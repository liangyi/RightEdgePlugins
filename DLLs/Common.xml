<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:RightEdge.Common.ActionAttribute">
            <summary>
            Derived RightEdgeObjectAttribute for use with Action plugins.
            </summary>
        </member>
        <member name="T:RightEdge.Common.RightEdgeObjectAttribute">
            <summary>
            Abstract base class for implementing RightEdge attributes.
            </summary>
            <remarks>
            RightEdgeObjectAttribute is typically derived from and applied to various
            plugins to provide basic information about a plugin such as the name and
            description.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.RightEdgeObjectAttribute.GetRightEdgeAttribute``1(System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.RightEdgeObjectAttribute.GetRightEdgeAttributeList``1(System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.RightEdgeObjectAttribute.Name">
            <summary>
            Gets or sets the Name property of this attribute.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RightEdgeObjectAttribute.Description">
            <summary>
            Gets or sets the Description property of this attribute.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RightEdgeObjectAttribute.Author">
            <summary>
            Gets or sets the Author property of this attribute.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RightEdgeObjectAttribute.CompanyName">
            <summary>
            Gets or sets the CompanyName property of this attribute.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RightEdgeObjectAttribute.Version">
            <summary>
            Gets or sets the Version property of this attribute.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RightEdgeObjectAttribute.Id">
            <summary>
            Gets or sets the Name property of this attribute.
            </summary>
            <remarks>
            An Id for an object is typically a globally unique identifier (GUID).  There is a GUID
            generation tool within the Microsoft development environment.  If this is not accessible,
            a GUID generation tool can be found at http://www.guidgen.com/.
            
            RightEdge uses these Ids to uniquely identify each plugin so that it can be saved to
            disk for later construction.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.RightEdgeObjectAttribute.HelpText">
            <summary>
            Gets or sets the HelpText property of this attribute.
            </summary>
            <remarks>
            Some plugins have the ability to display help directly within the RightEdge user interface.
            The text set here will be called by the user interface and displayed as is.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ActionAttribute.GetActionAttribute(System.Object)">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.YYEActionAttribute">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.YYEActionAttribute.#ctor">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.YYEActionAttribute.SetDefaults">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ActionBase">
            <summary>
            Abstract class for implementing Action plugins.
            </summary>
            <remarks>
            Derive from this abstract class to create Action plugins.  This base class implements
            the <see cref="T:RightEdge.Common.IAction">IAction</see> interface and performs some
            basic functionality common to all actions.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.IAction">
            <summary>
            Base action interface.  All actions implement this interface.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IAction.Init(RightEdge.Common.SystemData)">
            <summary>
            Initializes this action and associates it with the specified <see cref="T:RightEdge.Common.SystemData">SystemData</see> instance.
            </summary>
            <param name="systemData"><see cref="T:RightEdge.Common.SystemData">SystemData</see> instance that will be assigned to this instance.</param>
        </member>
        <member name="M:RightEdge.Common.IAction.SetInputs(System.String,RightEdge.Common.IAction[])">
            <summary>
            Sets any dependent actions for this action.
            </summary>
            <param name="actionName">Dependent action name.</param>
            <param name="actions">Dependent actions.</param>
        </member>
        <member name="M:RightEdge.Common.IAction.GetInputs(System.String)">
            <summary>
            Retrieves inputs for this action.
            </summary>
            <param name="actionName">The name assigned to the collection of inputs.</param>
            <returns>A collection of IAction instances.</returns>
        </member>
        <member name="M:RightEdge.Common.IAction.SetSeriesInputs(System.Object[])">
            <summary>
            Sets the series inputs that an action will use.  These should either be the name of a series,
            the BarElement desired, or a constant double value.
            </summary>
            <param name="inputs">A collection of series inputs.</param>
        </member>
        <member name="M:RightEdge.Common.IAction.Run(RightEdge.Common.ActionContext)">
            <summary>
            Executes the action using the specified context.
            </summary>
            <param name="context"><see cref="T:RightEdge.Common.ActionContext">ActionContext</see> instance.</param>
        </member>
        <member name="F:RightEdge.Common.ActionBase.SystemData">
            <summary>
            SystemData instance associated with this object.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ActionBase._inputSeries">
            <summary>
            Input series collection associated with this object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ActionBase.#ctor(System.String[])">
            <summary>
            Action constructor implementation.
            </summary>
            <param name="actionNames">An array of action names.</param>
            <remarks>This will receive a list of action names and build the inputs collection.</remarks>
        </member>
        <member name="M:RightEdge.Common.ActionBase.Init(RightEdge.Common.SystemData)">
            <summary>
            Action initialization function.
            </summary>
            <param name="systemData">SystemData instance to set.</param>
            <remarks>
            Sets the instance of the <see cref="T:RightEdge.Common.SystemData">SystemData</see> class and
            initializes any child inputs.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ActionBase.InitChildren">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ActionBase.SetInputs(System.String,RightEdge.Common.IAction[])">
            <summary>
            Sets any input parameters needed for this action.
            </summary>
            <param name="actionName">string containing the action name.</param>
            <param name="actions">An array of actions.</param>
        </member>
        <member name="M:RightEdge.Common.ActionBase.GetInputs(System.String)">
            <summary>
            Retrieves inputs for this action.
            </summary>
            <param name="actionName">The name assigned to the collection of inputs.</param>
            <returns>A collection of IAction instances.</returns>
        </member>
        <member name="M:RightEdge.Common.ActionBase.Run(RightEdge.Common.ActionContext)">
            <summary>
            Executes the action using the specified context.
            </summary><param name="context"><see cref="T:RightEdge.Common.ActionContext">ActionContext</see> instance.</param>
        </member>
        <member name="M:RightEdge.Common.ActionBase.SetSeriesInputs(System.Object[])">
            <summary>
            Assigns series inputs to this action.
            </summary>
            <param name="inputs">A collection of series inputs.</param>
        </member>
        <member name="M:RightEdge.Common.ActionBase.GetInputSeries(System.Int32,RightEdge.Common.ActionContext)">
            <summary>
            Gets a series input assigned to this action by index.
            </summary>
            <param name="index">The index of the <see cref="T:RightEdge.Common.ISeries">ISeries</see> inputs.</param>
            <param name="context"><see cref="T:RightEdge.Common.ActionContext">ActionContext</see> instance associated with this series.</param>
            <returns>returns an <see cref="T:RightEdge.Common.ISeries">ISeries</see> instance if it exists within the current input series, otherwise null or Nothing.</returns>
        </member>
        <member name="M:RightEdge.Common.ActionBase.RunInputs(System.String,RightEdge.Common.ActionContext)">
            <summary>
            Runs the collection of inputs under the specified action name using the specified context.
            </summary>
            <param name="actionName">Input action name.</param>
            <param name="context">Context to run the action.</param>
        </member>
        <member name="T:RightEdge.Common.ActionInputAttribute">
            <summary>
            <see cref="T:RightEdge.Common.InputAttribute">InputAttribute</see> derived class for Action inputs.
            </summary>
        </member>
        <member name="T:RightEdge.Common.InputAttribute">
            <summary>
            Abstract class to implement custom attributes.
            </summary>
            <remarks>
            Typically derived from to set input level attributes for items such as actions.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.InputAttribute.Name">
            <summary>
            Gets or sets the Name value for this attribute.
            </summary>
            <remarks>
            This is the "friendly" name.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.InputAttribute.Order">
            <summary>
            Gets or sets the Order value for this attribute.
            </summary>
            <remarks>
            Order specifies the sort order that this attribute will appear in the user interface.
            This is also how RightEdge will match a collection of inputs to the correct object
            construction arguments.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.InputAttribute.Repeatable">
            <summary>
            Gets or sets the Order value for this attribute.
            </summary>
            <remarks>
            Denotes whether or not this attribute repeats.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ActionInputAttribute.#ctor">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ActionInputAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Constructs an action attribute.
            </summary>
            <param name="name">The friendly name of this attribute.</param>
            <param name="order">The order.</param>
            <remarks>
            Order specifies the sort order that this attribute will appear in the user interface.
            This is also how RightEdge will match a collection of inputs to the correct object
            construction arguments.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ActionInputAttribute.Clone">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.ActionInputAttribute.Value">
            <summary>
            Gets or sets the value assigned to this attribute.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ActionManager">
            <summary>
            ActionManager class.
            </summary>
            <remarks>
            ActionManager is exposed from the <see cref="T:RightEdge.Common.SystemData">SystemData</see> and is
            a high level class used to run actions.  An instance of this class is already instantiated when
            a system is built
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ActionManager.#ctor(RightEdge.Common.SystemData)">
            <summary>
            Constructs an ActionManager instance.
            </summary>
            <param name="system">A valid SystemData instance.</param>
        </member>
        <member name="M:RightEdge.Common.ActionManager.RunActions(RightEdge.Common.Symbol)">
            <summary>
            Runs the actions for the specified symbol.
            </summary>
            <param name="symbol">Symbol instance.</param>
            <remarks>
            Each trigger for the specified symbol is evaluated.  If the trigger
            condition is true, the action is executed.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.ActionManager.System">
            <summary>
            Gets the <see cref="T:RightEdge.Common.SystemData">SystemData</see> instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ActionManager.Item(System.String)">
            <summary>
            Gets a trigger.
            </summary>
            <param name="TriggerName">string containing the trigger name.</param>
            <returns>IAction instance if the action is found.  If the action is not found, a new action instance is created.</returns>
        </member>
        <member name="P:RightEdge.Common.ActionManager.Keys">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ArrayQueue`1">
            <summary>
            ArrayQueue is a queue implementation backed by an array.
            </summary>
            <remarks>
            Queue entries are allowed to wrap around array boundaries.
            </remarks>
            <typeparam name="T">Type associated with this instance.</typeparam>
        </member>
        <member name="M:RightEdge.Common.ArrayQueue`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of ArrayQueue
            </summary>
            <param name="size">size of this ArrayQueue.</param>
        </member>
        <member name="M:RightEdge.Common.ArrayQueue`1.Enqueue(`0)">
            <summary>
            Inserts a new item into the queue.
            </summary>
            <param name="value">object to insert.</param>
        </member>
        <member name="M:RightEdge.Common.ArrayQueue`1.Clear">
            <summary>
            Removes the elements from the ArrayQueue.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ArrayQueue`1.Full">
            <summary>
            Full queue indicator.
            </summary>
            <remarks>
            Returns true if the queue is full, otherwise false.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.ArrayQueue`1.Count">
            <summary>
            Gets the count.
            </summary>
            <remarks>
            Gets the number of items that currently exist in the queue.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.ArrayQueue`1.Item(System.Int32)">
            <summary>
            Retrieves an element at the specified index.
            </summary>
            <param name="index">integer containing the index.</param>
            <returns>The element located at the specified index.</returns>
        </member>
        <member name="T:RightEdge.Common.BarDataDelegate">
            <summary>
            Delegate when a new bar for a symbol is received.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.Symbol">Symbol</see> of the new bar.</param>
            <param name="data">Populated <see cref="T:RightEdge.Common.BarData">BarData</see> class.</param>
        </member>
        <member name="T:RightEdge.Common.TickDataDelegate">
            <summary>
            Delegate when a new tick for a symbol is received.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.Symbol">Symbol</see> of the new bar.</param>
            <param name="partialBar">Populated <see cref="T:RightEdge.Common.BarData">BarData</see> class.</param>
            <param name="tick">Latest <see cref="T:RightEdge.Common.TickData">TickData</see> value.</param>
        </member>
        <member name="T:RightEdge.Common.BarAggregator">
            <summary>
            Class to build bars from tick data.
            </summary>
        </member>
        <member name="M:RightEdge.Common.BarAggregator.#ctor(RightEdge.Common.Symbol,System.Int32,RightEdge.Common.BarConstructionType)">
            <summary>
            Creates a BarAggregator instance for the specified symbol and frequency.
            </summary>
            <param name="symbol">Symbol instance.</param>
            <param name="freq">Bar frequency of the aggregator.</param>
            <param name="barConstruction"><see cref="T:RightEdge.Common.BarConstructionType" /> enumeration.</param>
        </member>
        <member name="M:RightEdge.Common.BarAggregator.ProcessTick(RightEdge.Common.TickData)">
            <summary>
            If aggregating in real time, call this when a tick arrives.
            </summary>
            <param name="tick">Tick instance.</param>
            <remarks>
            This function will handle all incoming ticks and determine
            if a new bar for the specified frequency should be produced at
            which point the NewBar event will be called.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarAggregator.Update(System.DateTime)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BarAggregator.AggregateBars(RightEdge.Common.RList{RightEdge.Common.BarData},System.Int32)">
            <summary>
            Aggregates a list of bars to the specified frequency.
            </summary>
            <param name="bars">Input bar collection.</param>
            <param name="freq">New frequency.</param>
            <returns>Aggregated bar collection.</returns>
            <remarks>
            The input collection must be of a higher resolution than the requested
            frequency.  For example, a 1 minute bar collection cannot be produced
            with a 5 minute input collection.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarAggregator.CombineBars(System.Collections.Generic.List{RightEdge.Common.BarData})">
            <summary>
            Combines bars for aggregation.
            </summary>
            <param name="bars">Bar collection to combine.</param>
            <returns>A combined bar from the collection.</returns>
            <remarks>
            Used to take a collection of bars to make a single bar.  For example,
            if the desired output is a 5 minute bar and the input collection is 1 minute
            bars, 5 1 minute bars would be combined.  The volume is summed and the open,
            high, low and close values are determined.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarAggregator.GetBars(System.Collections.Generic.List{RightEdge.Common.TickData},System.Int32)">
            <summary>
            Builds bars from a collection of tick data for the specified frequency.
            </summary>
            <param name="ticks">Collection of ticks.</param>
            <param name="freq">Frequency to build the bar collection</param>
            <returns>Collection of <see cref="T:RightEdge.Common.BarData">BarData</see>.</returns>
            <remarks>
            This instance of the class always uses the "last" price.  To build the bar data based
            on another bar element use the GetBars function that allows a
            <see cref="T:RightEdge.Common.BarConstructionType">BarConstructionType</see> parameter.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarAggregator.GetBars(System.Collections.Generic.List{RightEdge.Common.TickData},System.Int32,RightEdge.Common.BarConstructionType)">
            <summary>
            Builds bars from a collection of tick data for the specified frequency.
            </summary>
            <param name="ticks">Collection of ticks.</param>
            <param name="freq">Frequency to build the bar collection</param>
            <param name="constructionType">Builds the last price from the specified bar element.</param>
            <returns>Collection of <see cref="T:RightEdge.Common.BarData">BarData</see>.</returns>
        </member>
        <member name="M:RightEdge.Common.BarAggregator.CreateBarFromTicks(System.Collections.Generic.List{RightEdge.Common.TickData},System.DateTime,System.Double,RightEdge.Common.BarConstructionType)">
            <summary>
            Builds a bar from a tick collection
            </summary>
            <param name="ticks">Tick collection</param>
            <param name="time">time of bar</param>
            <param name="prevClose">previous close value.</param>
            <param name="constructionType">Builds the last price from the specified bar element.</param>
            <returns>A constructed bar.</returns>
        </member>
        <member name="M:RightEdge.Common.BarAggregator.RoundTime(System.DateTime,System.Int32)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.BarAggregator.NewTick">
            <summary>
            Assigns a delegate for a new tick.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarAggregator.NewBar">
            <summary>
            Assigns a delegate for a new bar.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BarData">
            <summary>
            This class contains information related to a single bar of data.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IOwnedDataSerializableAndRecreatable">
            <summary>
            Allows a class to specify that it can be recreated during deserialization using a default constructor
            and then calling DeserializeOwnedData()
            </summary>
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IOwnedDataSerializable">
            <summary>
            Allows a class to save/retrieve their internal data to/from an existing SerializationWriter/SerializationReader.
            </summary>
            <exclude />
        </member>
        <member name="M:RightEdge.Common.IOwnedDataSerializable.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <summary>
            Lets the implementing class store internal data directly into a SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter to use</param>
            <param name="context">Optional context to use as a hint as to what to store (BitVector32 is useful)</param>
        </member>
        <member name="M:RightEdge.Common.IOwnedDataSerializable.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <summary>
            Lets the implementing class retrieve internal data directly from a SerializationReader.
            </summary>
            <param name="reader">The SerializationReader to use</param>
            <param name="context">Optional context to use as a hint as to what to retrieve (BitVector32 is useful) </param>
        </member>
        <member name="M:RightEdge.Common.BarData.#ctor">
            <summary>
            Constructs a BarData class.  Sets the EmptyBar flag to false.
            </summary>
        </member>
        <member name="M:RightEdge.Common.BarData.#ctor(System.Boolean,System.DateTime)">
            <summary>
            Constructs a BarData class.
            </summary>
            <param name="emptyBar">Set to True to set the EmptyBar flag, else set to False.</param>
            <param name="barDate">Set the date and time for this bar.</param>
        </member>
        <member name="M:RightEdge.Common.BarData.#ctor(System.DateTime,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a BarData class.  Sets the EmptyBar flag to False.
            </summary>
            <param name="barDate">Set the date and time for this bar.</param>
            <param name="open">Set the open price for this bar.</param>
            <param name="close">Set the close price for this bar.</param>
            <param name="high">Set the high price for this bar.</param>
            <param name="low">Set the low price for this bar.</param>
        </member>
        <member name="M:RightEdge.Common.BarData.Clone">
            <summary>
            Creates a copy of this BarData class.
            </summary>
            <returns>Cloned instance of the class.</returns>
        </member>
        <member name="M:RightEdge.Common.BarData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for deserialization
            </summary>
            <param name="info">SerializationInfo instance.</param>
            <param name="context">StreamingContext instance.</param>
        </member>
        <member name="M:RightEdge.Common.BarData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BarData.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BarData.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.BarData.BarStartTime">
            <summary>
            Date and time of this bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.PriceDateTime">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.BarData.Open">
            <summary>
            Open price for this bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.Close">
            <summary>
            Close price for this bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.High">
            <summary>
            High price for this bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.Low">
            <summary>
            Low price for this bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.Bid">
            <summary>
            Bid price for this price.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.Ask">
            <summary>
            Ask price for this bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.Volume">
            <summary>
            Volume for this bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.OpenInterest">
            <summary>
            Open Interest for this bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarData.EmptyBar">
            <summary>
            Indicator determining if this bar is empty.  True if it is empty, otherwise false.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BarElementSeries">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ISeries">
            <summary>
            A series of numerical data that can be plotted on a chart.
            </summary>
            <remarks>
            This interface provides methods to access a series of data.  Most often this data is the
            values for an indicator.  The interface is the base interface for the 
            <see cref="T:RightEdge.Common.IIndicator" /> and <see cref="T:RightEdge.Common.ISeriesCalculator" /> interfaces.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ISeries.LookBack(System.Int32)">
            <summary>
            Looks back within the series for the specified value.  A value of 0 represents the most recent value.
            </summary>
            <param name="nBars">Number of bars to lookback in the series.</param>
            <returns>The value contained at the specified index.</returns>
            <remarks>
            A series is a collection of values.  The values within series can be referenced using the Lookback method.
            Use 0 to get the most recent value in the series.  To reference values further back in time, pass a value
            greater than 0.  For example, if the series is created against daily bars, to reference yesterday's value
            use Lookback(1).  To reference the day before yesterday, use Lookback(2) and so on.  Use the
            <see cref="P:RightEdge.Common.ISeries.Count">Count</see> method to determine how many values are contained
            within the series.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.ISeries.Current">
            <summary>
            The current value of the series.  This property should return the same value as calling LookBack(0).
            </summary>
        </member>
        <member name="P:RightEdge.Common.ISeries.Count">
            <summary>
            The number of values in the series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ISeries.OldValuesChange">
            <summary>
            Indicates whether previous values in the series change when a new value is added.
            </summary>
            <value>
            Indicates whether previous values in the series change when a new value is added.
            </value>
            <remarks>
            Usually, in a series that is related to bar data, a new value will be calculated
            and added to the end of the series when a new bar comes in.  The previous values
            of the series will not change.  Return true for this property to indicate that
            this is not the case.  If this returns true, then the <see cref="P:RightEdge.Common.ISeries.OldestValueChanged" />
            property should reflect what values changed.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.ISeries.OldestValueChanged">
            <summary>
            The lookback index of the oldest value that changed.  Should be zero unless <see cref="P:RightEdge.Common.ISeries.OldValuesChange" /> is true.
            </summary>
            <value>
            The lookback index of the oldest value that changed.  Should be zero unless <see cref="P:RightEdge.Common.ISeries.OldValuesChange" /> is true.
            </value>
        </member>
        <member name="P:RightEdge.Common.ISeries.ChartSettings">
            <summary>
            Contains settings for how the series should be displayed on a chart.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BarDataSeriesManager">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.BarDataSeriesManager.BDSMKey">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.BarStatistic">
            <summary>
            Holds all account information about an account.
            </summary>
            <remarks>
            An instance of BarStatistic is created for every
            bar that the system is in existence including
            historical bars.  This will allow you to derive
            historical account information if necessary.
            <see cref="T:RightEdge.Common.BaseSystemHistory">BaseSystemHistory</see> contains
            4 collections of BarStatistics.  There is one for long, short,
            long &amp; short, and buy and hold.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarStatistic.#ctor(System.Double,System.DateTime,System.DateTime)">
            <summary>
            Constructs a BarStatistic object.
            </summary>
            <param name="startingCapital">Starting capital amount.</param>
            <param name="tradeStartDate">System start date.</param>
            <param name="currentDate">System end date.</param>
        </member>
        <member name="M:RightEdge.Common.BarStatistic.Clone">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BarStatistic.#ctor">
            <summary>
            Constructs a BarStatistic instance.
            </summary>
        </member>
        <member name="M:RightEdge.Common.BarStatistic.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for deserialization
            </summary>
            <param name="info">SerializationInfo instance.</param>
            <param name="context">StreamingContext instance.</param>
        </member>
        <member name="M:RightEdge.Common.BarStatistic.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BarStatistic.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BarStatistic.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.BarStatistic.StartingCapital">
            <summary>
            Gets the amount of starting capital.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TradeStartDate">
            <summary>
            Gets the date that the system began running.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.DisplayDate">
            <summary>
            The date/time to display for the statistics: Generally the start of the bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.CalculatedDate">
            <summary>
            The date/time statistics were calculated: Generally the end of the bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.EndingCapital">
            <summary>
            Gets the calculated ending capital. The ending capital is the sum of the starting 
            capital, relized net profit and unrealized net profit.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.ActiveBarCount">
            <summary>
            Gets or sets the active trading bar count.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.WinningTrades">
            <summary>
            Gets the calculated number of winning trades. The number of winning trades is the sum of 
            the long winning trades and the short winning trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.WinningTradesPct">
            <summary>
            Gets the calculated percentage of winning trades. The percentage of winning 
            trades is the number of winning trades divided by the total number of finished trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.LosingTrades">
            <summary>
            Gets the calculated number of losing trades. The number of losing trades 
            is the sum of the long losing trades and the short losing trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.LosingTradesPct">
            <summary>
            Gets the calculated percentage of losing trades. The percentage of losing 
            trades is the number of losing trades divided by the total number of finished trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.NeutralTrades">
            <summary>
            The number of trades which resulted in neither a profit nor a loss.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TotalFinishedTrades">
            <summary>
            Gets the calculated number of exited trades. The number of existed trades 
            is the sum of winning trades and losing trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TotalTrades">
            <summary>
            Gets the calculated number of total trades both active and closed. The number 
            of total trades is the sum of the total of finised trades and the number of open 
            positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.OpenPositions">
            <summary>
            Gets or sets the number of open positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.LongWinningTrades">
            <summary>
            Gets or sets the number of long winning trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.LongLosingTrades">
            <summary>
            Gets or sets the number of long losing trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.ShortWinningTrades">
            <summary>
            Gets or sets the number of short winning trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.ShortLosingTrades">
            <summary>
            Gets or sets the number of short losing trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.RealizedNetProfit">
            <summary>
            Gets or sets the realized net profit.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.NetProfit">
            <summary>
            Gets the calculated total net profit. The total net profit is the sum of 
            the realized net profit and the unrealized net profit.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.NetProfitPct">
            <summary>
            Gets the calculated net profit percentage. The net profit percentage is the 
            sum of the realized net profit and the unrealized net profit divided by the 
            starting capital.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.UnrealizedNetProfit">
            <summary>
            Gets or sets the unrealized net profit.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.RealizedGrossProfit">
            <summary>
            Gets or sets the realized gross profit.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.RealizedGrossLoss">
            <summary>
            Gets or sets the realized gross loss.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.DrawDown">
            <summary>
            Gets or sets the drawdown.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.DrawDownPct">
            <summary>
            Gets or sets drawdown as a percentage.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxDrawDown">
            <summary>
            Gets or sets the max draw down encountered so far.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxDrawDownPct">
            <summary>
            Gets or sets the maximum drawdown encountered so far as a percentage.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxDrawDownDate">
            <summary>
            Gets or sets the maximum draw down date.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxDrawDownPctDate">
            <summary>
            Gets or sets the maximum draw down percentage date
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.Exposure">
            <summary>
            Gets or sets the exposure value.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TotalExposure">
            <summary>
            The sum of the exposure for all bars.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageExposure">
            <summary>
            Gets or sets the average exposure.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TotalExposurePct">
            <summary>
            The sum of the exposure percent for all bars.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageExposurePct">
            <summary>
            Gets or sets the average exposure represented as a percentage.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.ExposurePct">
            <summary>
            Gets or sets the exposure represented as a percentage.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxExposure">
            <summary>
            Gets or sets the maximum exposure.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxExposurePct">
            <summary>
            Gets or sets the maximum exposure percentage.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxExposureDate">
            <summary>
            Gets or sets the maximum exposure date.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxExposurePctDate">
            <summary>
            Gets or sets the maximum exposure percentage date.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AccountBalance">
            <summary>
            Gets or sets the current account cash balance
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AccountValue">
            <summary>
            Gets the calculated account value. The account value is the sum of 
            the long value, short value and cash.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxAccountValue">
            <summary>
            This is the maximum historical account value.  It is used to calculate the drawdown.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.ShortValue">
            <summary>
            Gets or sets the current value of short holdings.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.LongValue">
            <summary>
            Gets or sets the current value of long holdings.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.APR">
             <summary>
             Gets the calculated APR value.
             </summary>
             <remarks>
             Formula
             ((v / b) ^ (365 / d) - 1) * 100%
            
             v = current value
             b = cost basis
             d = days held
             </remarks>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxProfit">
            <summary>
            Gets or sets the maximum profit up to this point.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxLoss">
            <summary>
            Gets or sets the maximum loss up to this point.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageProfit">
            <summary>
            Gets the calculated average profit. The average profit is the realized 
            net profit divided by the total number of finished trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TotalProfitPct">
            <summary>
            The sum of the percent profits for all the trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageProfitPct">
            <summary>
            Gets or sets the average profit percentage.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageWin">
            <summary>
            Gets the calculated average win size. The average win size is the 
            realized gross profit divided by the number of winning trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TotalWinPct">
            <summary>
            The sum of the percent profits for all winning positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageWinPct">
            <summary>
            Gets or sets the average win percentage.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageLoss">
            <summary>
            Gets the calculated average loss. The average loss is the realized 
            gross loss divided by the number of losing trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TotalLossPct">
            <summary>
            The sum of the percent profits for all losing positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageLossPct">
            <summary>
            Gets or sets the average loss percentage.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageBarsHeld">
            <summary>
            Gets the calculated number of average bars held. The number of average 
            bars held is the number of total bars held divided by the total number 
            of finished trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.WinningBarsHeld">
            <summary>
            Gets or sets the number of winning bars held.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.LosingBarsHeld">
            <summary>
            Gets or sets the number of losing bars held.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.TotalBarsHeld">
            <summary>
            Gets the calculated total of bars held. The total of bars held is the sum 
            of the number winning bars held and the number of losing bars held.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageWinningBarsHeld">
            <summary>
            Gets the calcualted number of average winning bars held. The number of 
            average winning bars held is the number of winning bars held divided by 
            the number of winning trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.AverageLosingBarsHeld">
            <summary>
            Gets the calculated number of average losing bars held. The number of 
            average losing bars held is the number of losing bars held divided by 
            the number of losing trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.ConsecutiveWinning">
            <summary>
            The current number of consecutive winning positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxConsecutiveWinning">
            <summary>
            Gets or sets the maximum consecutive winning trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.ConsecutiveLosing">
            <summary>
            The current number of consecutive losing positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarStatistic.MaxConsecutiveLosing">
            <summary>
            Gets or sets the maximum number of consecutive losing trades.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BarUtils">
            <summary>
            A set of utility functions (typically static) that are aimed to aid in extracting values or prices between sets of bars or values.
            </summary>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetBarConstruction(RightEdge.Common.Symbol,RightEdge.Common.BarConstructionType)">
            <summary>
            Gets the <see cref="T:RightEdge.Common.BarConstructionType" /> associated with this symbol.
            </summary>
            <param name="symbol">The <see cref="T:RightEdge.Common.Symbol" /> object to query.</param>
            <param name="barConstruction">Default bar construction type.</param>
            <returns><see cref="T:RightEdge.Common.BarConstructionType" /> associated with the input symbol.</returns>
            <remarks>
            This version finds the desired <see cref="T:RightEdge.Common.BarConstructionType" /> setting based on
            the symbol's AssetClass.  If the type is <see cref="F:RightEdge.Common.AssetClass.Forex" /> and 
            the <see cref="T:RightEdge.Common.BarConstructionType" /> is <see cref="F:RightEdge.Common.BarConstructionType.Default" />
            the default behavior is to assign the type to <see cref="F:RightEdge.Common.BarConstructionType.Mid" />.  In the
            case of other asset classes, the default type would be set to <see cref="F:RightEdge.Common.BarConstructionType.Trades" />
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetValueForBarElement(RightEdge.Common.BarData,RightEdge.Common.BarElement)">
            <summary>
            Gets a single value for the specified bar from the specified series.
            </summary>
            <param name="bar">The bar in which to analyze.</param>
            <param name="barElement">The portion of the bar to derive the input data from.</param>
            <returns>The value for the specified bar element.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetBidBar(RightEdge.Common.BarData)">
            <summary>
            Returns a bar with OHLC values corresponding to the bid price.
            </summary>
            <param name="bar">A bar where the <see cref="P:RightEdge.Common.BarData.Bid" /> corresponds to the bid price at close.</param>
            <returns>A bar with OHLC values corresponding to the bid price.</returns>
            <remarks>The difference between <see cref="P:RightEdge.Common.BarData.Bid" /> and <see cref="P:RightEdge.Common.BarData.Close" /> in <paramref name="bar" />
            is used to calculate the adjusted OHLC values for the returned bar.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetAskBar(RightEdge.Common.BarData)">
            <summary>
            Returns a bar with OHLC values corresponding to the ask price.
            </summary>
            <param name="bar">A bar where the <see cref="P:RightEdge.Common.BarData.Ask" /> corresponds to the ask price at close.</param>
            <returns>A bar with OHLC values corresponding to the ask price.</returns>
            <remarks>The difference between <see cref="P:RightEdge.Common.BarData.Ask" /> and <see cref="P:RightEdge.Common.BarData.Close" /> in <paramref name="bar" />
            is used to calculate the adjusted OHLC values for the returned bar.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetBarTime(System.DateTime,System.DateTime,System.Double)">
            <summary>
            Calculates the timestamp for a tick inside a bar.
            </summary>
            <param name="barStartTime">The bar start time</param>
            <param name="barEndTime">The bar end time</param>
            <param name="ratio">How far through the bar the returned time should be.  Zero means the start of the bar, One means just before the bar end time.</param>
            <returns>A time greater than or equal to the bar start time and strictly less than the bar end time.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.HighestValue(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Returns the highest value among the list of values.
            </summary>
            <param name="values">The list of double values to analyze.</param>
            <param name="start">The index in the list in which to start the analysis.</param>
            <param name="length">The length or number of values to analyze before completing.</param>
            <returns>The highest double value in the list.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.HighestValue(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the highest value among the list of values.
            </summary>
            <param name="values">The list of double values to analyze.</param>
            <returns>The highest double value in the list.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.LowestValue(System.Collections.Generic.IList{System.Double},System.Int32,System.Int32)">
            <summary>
            Returns the lowest value among the list of values.
            </summary>
            <param name="values">The list of double values to analyze.</param>
            <param name="start">The index in the list in which to start the analysis.</param>
            <param name="length">The length or number of values to analyze before completing.</param>
            <returns>The lowest double value in the list.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.LowestValue(System.Collections.Generic.IList{System.Double})">
            <summary>
            Returns the lowest value among the list of values.
            </summary>
            <param name="values">The list of double values to analyze.</param>
            <returns>The lowest double value in the list.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.HighestHigh(System.Collections.Generic.IList{RightEdge.Common.BarData},System.Int32,System.Int32)">
            <summary>
            Returns the highest high value within the list of bars.
            </summary>
            <param name="bars">List containing a series of BarData classes.</param>
            <param name="start">The index in the list in which to start the analysis.</param>
            <param name="length">The length or number of values to analyze before completing.</param>
            <returns>Highest high value as a double.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.HighestHigh(System.Collections.Generic.IList{RightEdge.Common.BarData})">
            <summary>
            Returns the highest high value within the list of bars.
            </summary>
            <param name="bars">List containing a series of BarData classes.</param>
            <returns>Highest high value as a double.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.HighestHigh(RightEdge.Common.RList{RightEdge.Common.BarData},System.Int32)">
            <summary>
            Returns the highest high for the specified number of recent bars in a bar series.
            </summary>
            <param name="bars">RList containing a series of bars.</param>
            <param name="count">The number of bars to compute the highest high for.</param>
            <returns>The highest high in the bar series over the last number of bars specified by <paramref name="count" />.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.HighestHigh(RightEdge.Common.RList{RightEdge.Common.BarData})">
            <summary>
            Returns the highest high value in a series of bars.
            </summary>
            <param name="bars">RList containing a series of bars.</param>
            <returns>The highest high in the series of bars.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.LowestLow(System.Collections.Generic.IList{RightEdge.Common.BarData},System.Int32,System.Int32)">
            <summary>
            Returns the lowest low value within the list of bars.
            </summary>
            <param name="bars">List containing a series of BarData classes.</param>
            <param name="start">The index in the list in which to start the analysis.</param>
            <param name="length">The length or number of values to analyze before completing.</param>
            <returns>Lowest low value as a double.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.LowestLow(System.Collections.Generic.IList{RightEdge.Common.BarData})">
            <summary>
            Returns the lowest low value within the list of bars.
            </summary>
            <param name="bars">List containing a series of BarData classes.</param>
            <returns>Lowest low value as a double.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.LowestLow(RightEdge.Common.RList{RightEdge.Common.BarData},System.Int32)">
            <summary>
            Returns the lowest low for the specified number of recent bars in a bar series.
            </summary>
            <param name="bars">RList containing a series of bars.</param>
            <param name="count">The number of bars to compute the lowest low for.</param>
            <returns>The lowest low in the bar series over the last number of bars specified by <paramref name="count" />.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.LowestLow(RightEdge.Common.RList{RightEdge.Common.BarData})">
            <summary>
            Returns the lowest low value in a series of bars.
            </summary>
            <param name="bars">RList containing a series of bars.</param>
            <returns>The lowest low in the series of bars.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.BarLookBackFromDate(RightEdge.Common.RList{RightEdge.Common.BarData},System.DateTime)">
            <summary>
            Find a bar in an RList based on a date.
            </summary>
            <param name="bars">RList containing a series of BarData</param>
            <param name="date">The date to find the bar for.</param>
            <returns>Integer containing the lookback at which the bar was found, or -1 if the bar is not found.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.LastValueOf(RightEdge.Common.ISeries)">
            <summary>
            Retrieves the most recent value of a series.
            </summary>
            <param name="series">A series to retrieve the most recent value from.</param>
            <returns>The most recent value of <paramref name="series" />.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.LastValidBar(RightEdge.Common.RList{RightEdge.Common.BarData})">
            <summary>
            Retrieves the last non-empty bar in a list of bars.
            </summary>
            <param name="bars">A list of bars.</param>
            <returns>The last non-empty bar in <paramref name="bars" />.  If there are no non-empty bars in the list, returns null.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.ProcessRListInBarGenerator(RightEdge.Common.IFrequencyGenerator,RightEdge.Common.Symbol,RightEdge.Common.RList{RightEdge.Common.BarData},System.DateTime)">
            <summary>
            Processes an RList of bars for the specified frequency.
            </summary>
            <param name="generator">Frequency generator used for processing.</param>
            <param name="symbol">Symbol object to process for.</param>
            <param name="bars">RList of bars as input.</param>
            <param name="lastBarEnd">The final date to assign to bars with no end date specified.</param>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetFrequencies">
            <summary>
            Gets the known, default frequencies supported by RightEdge.
            </summary>
            <returns>Dictionary list of the frequencies and corresponding names.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetFrequencyText(System.Int32)">
            <summary>
            Returns a text representation of a frequency.
            </summary>
            <param name="frequency">integer containing the frequency number.</param>
            <returns>string containing the frequency text.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetShortFrequencyText(System.Int32)">
            <summary>
            Returns a shortened text representation of a frequency.
            </summary>
            <param name="frequency">integer containing the frequency number.</param>
            <returns>string containing the frequency text.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetCurrencyCulture(System.String)">
            <summary>
            Gets a <see cref="T:System.Globalization.CultureInfo" /> object which can be used to format currency.
            </summary>
            <param name="currencyType">A string representing the currency, such as USD or GBP</param>
            <returns>A CultureInfo object which can be used to format currency.</returns>
        </member>
        <member name="M:RightEdge.Common.BarUtils.GetCurrencyCulture(RightEdge.Common.CurrencyType)">
            <summary>
            Gets a <see cref="T:System.Globalization.CultureInfo" /> object which can be used to format currency.
            </summary>
            <param name="currencyType">A CurrencyType to get a formatter for.</param>
            <returns>A CultureInfo object which can be used to format currency.</returns>
        </member>
        <member name="T:RightEdge.Common.BlockingQueue`1">
            <summary>
            </summary>
            <remarks>
            Original Author: William Stacey, MVP (staceyw@mvps.org)
            Downloaded from: http://www.codeproject.com/csharp/boundedblockingqueue.asp
            Modifications made for use with RightEdge:
            	- converted class to a generic class
            	- Added a datetime to each element in the queue, and added a property to retrieve the BackLog
            	- allow queue to resize if it fills up
            
            One Lock Bounded Blocking Queue (e.g. Bounded Buffer).
            This queue is internally synchronized (thread-safe) and designed for one-many producers and one-many
            consumer threads.  This is ideal for pipelining or other consumer/producer needs.
            Fast and thread safe on single or multiple cpu machines.
            
            Consumer thread(s) will block on Dequeue operations until another thread performs a Enqueue
            operation, at which point the first scheduled consumer thread will be unblocked and get the
            current object.  Producer thread(s) will block on Enqueue operations until another
            consumer thread calls Dequeue to free a queue slot, at which point the first scheduled producer
            thread will be unblocked to finish its Enqueue operation.  No user code is needed to
            handle this "ping-pong" between locking/unlocking consumers and producers. \
            
            </remarks>
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.#ctor(System.Int32)">
            <summary>
            Create instance of Queue with Bounded number of elements.  After that
            many elements are used, another Enqueue operation will "block" or wait
            until a Consumer calls Dequeue to free a slot.  Likewise, if the queue
            is empty, a call to Dequeue will block until another thread calls
            Enqueue.
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Adds an object to the end of the queue. If queue is full, this method will
            block until another thread calls one of the Dequeue methods.  This method will wait
            "Timeout.Infinite" until queue has a free slot.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.Enqueue(`0,System.Int32)">
            <summary>
            Adds an object to the end of the queue. If queue is full, this method will
            block until another thread calls one of the Dequeue methods or millisecondsTimeout
            expires.  If timeout, method will throw QueueTimeoutException.
            </summary>
            <param name="value">The object to add to the queue.</param>
            <param name="millisecondsTimeout">The number of milliseconds after which a QueueTimeoutException should be thrown if
            the value has not been added to the queue.</param>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.TryEnqueue(`0)">
            <summary>
            Non-blocking version of Enqueue().  If Enqueue is successfull, this will
            return true; otherwise false if queue is full.
            </summary>
            <param name="value">Generic item to enqueue.</param>
            <returns>true if successfull, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            If queue is empty, method will block until another thread calls one of
            the Enqueue methods.   This method will wait "Timeout.Infinite" until another
            thread Enqueues and object.
            </summary>
            <returns>Generic item to Dequeue.</returns>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.Dequeue(System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            If queue is empty, method will block until another thread calls one of
            the Enqueue methods or millisecondsTimeout expires.
            If timeout, method will throw QueueTimeoutException.
            </summary>
            <returns>The object that is removed from the beginning of the Queue.</returns>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.TryDequeue(`0@)">
            <summary>
            Non-blocking version of Dequeue.  Will return false if queue is empty and set
            value to default(T), otherwise will return true and set value to the dequeued object.
            </summary>
            <param name="value">The object that is removed from the beginning of the Queue or null if empty.</param>
            <returns>true if successfull, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the queue without removing it.
            </summary>
            <returns>The object at the beginning of the queue.</returns>
            <remarks>
            This method is similar to the Dequeue method, but Peek does not modify the queue. 
            A null reference can be added to the Queue as a value (if T is a reference type).
            To distinguish between a null or default value and the end of the queue, check the Count property or
            catch the InvalidOperationException, which is thrown when the Queue is empty.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The queue is empty.</exception>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.TryPeek(`0@)">
            <summary>
            Returns the object at the beginning of the Queue without removing it.
            Similar to the Peek method, however this method will not throw exception if
            queue is empty, but instead will return false.
            </summary>
            <param name="value">The object at the beginning of the Queue or default(T) if empty.</param>
            <returns>The object at the beginning of the Queue.</returns>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.Clear">
            <summary>
            Removes all objects from the Queue.
            </summary>
            <remarks>
            Count is set to zero. Size does not change.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the Queue elements to an existing one-dimensional Array,
            starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from Queue. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:RightEdge.Common.BlockingQueue`1.GetEnumerator">
            <summary>
            GetEnumerator not implemented.  You can't enumerate the active queue
            as you would an array as it is dynamic with active gets and puts.  You could
            if you locked it first and unlocked after enumeration, but that does not
            work well for GetEnumerator.  The recommended method is to Get Values
            and enumerate the returned array copy.  That way the queue is locked for
            only a short time and a copy returned so that can be safely enumerated using
            the array's enumerator.  You could also create a custom enumerator that would
            dequeue the objects until empty queue, but that is a custom need. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:RightEdge.Common.BlockingQueue`1.Values">
            <summary>
            Gets the object values currently in the queue.  If queue is empty, this
            will return a zero length array.  The returned array length can be
            0 to Size.  This method does not modify the queue, but returns a shallow copy
            of the queue buffer containing the objects contained in the queue.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BlockingQueue`1.BackLog">
            <summary>
            The amount of time that has elapsed since the oldest item in the queue was inserted.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BlockingQueue`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the Queue is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:RightEdge.Common.BlockingQueue`1.Size">
            <summary>
            Returns the max elements allowed in the queue before blocking Enqueue
            operations.  This is the size set in the constructor.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BlockingQueue`1.Count">
            <summary>
            Gets the number of elements contained in the Queue.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BlockingQueue`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the Queue.
            </summary>
        </member>
        <member name="T:RightEdge.Common.QueueTimeoutException">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.QueueTimeoutException.#ctor">
            <exclude />
        </member>
        <member name="T:RightEdge.Triggers.ConstantTrigger">
            <summary>
            RightEdge built in Constant trigger.
            </summary>
            <remarks>
            This trigger is used as a true/false setting.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.TriggerBase">
            <summary>
            Base abstract class used for implementing trigger plugins.
            </summary>
            <remarks>
            This class is implements <see cref="T:RightEdge.Common.ITrigger">ITrigger</see>.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.ITrigger">
            <summary>
            Base trigger interface.  All triggers implement this interface.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ITrigger.NewBar">
            <summary>
            Called for each bar iteration to evaluate the trigger parameters.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ITrigger.SetSeriesInputs(RightEdge.Common.ISeries[])">
            <summary>
            Sets series inputs for this trigger.
            </summary>
            <param name="inputs">A collection of <see cref="T:RightEdge.Common.ISeries">ISeries</see> instances.</param>
        </member>
        <member name="M:RightEdge.Common.ITrigger.GetSeriesInputs">
            <summary>
            Retrieves the series inputs for this trigger.
            </summary>
            <returns><see cref="T:RightEdge.Common.ISeries">ISeries</see> collection.</returns>
        </member>
        <member name="M:RightEdge.Common.ITrigger.SetTriggerInputs(RightEdge.Common.ITrigger[])">
            <summary>
            Sets dependent trigger inputs for this trigger.
            </summary>
            <param name="inputs"><see cref="T:RightEdge.Common.ITrigger">ITrigger</see> collection.</param>
        </member>
        <member name="M:RightEdge.Common.ITrigger.GetTriggerInputs">
            <summary>
            Retrieves any dependent trigger inputs for this trigger.
            </summary>
            <returns><see cref="T:RightEdge.Common.ITrigger">ITrigger</see> collection.</returns>
        </member>
        <member name="P:RightEdge.Common.ITrigger.IsTriggered">
            <summary>
            Determines if a trigger's conditions are true at this point in time.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TriggerBase.series">
            <summary>
            Access to the <see cref="T:RightEdge.Common.ISeries">ISeries</see> collection associated with this instance.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TriggerBase.numberOfSeries">
            <summary>
            Access the number of series associated with this trigger.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TriggerBase.triggers">
            <summary>
            Access to the dependent triggers.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TriggerBase.numberOfTriggers">
            <summary>
            Access to the dependent trigger count.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TriggerBase.VARIABLE_NUM">
            <summary>
            The integer that specifies that the number of inputs is variable.
            </summary>
        </member>
        <member name="M:RightEdge.Common.TriggerBase.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that requires a series and trigger count.
            </summary>
            <param name="numberOfSeries">seris count.</param>
            <param name="numberOfTriggers">trigger count.</param>
        </member>
        <member name="M:RightEdge.Common.TriggerBase.NewBar">
            <summary>
            Called for each bar iteration to evaluate the trigger parameters.
            </summary>
        </member>
        <member name="M:RightEdge.Common.TriggerBase.SetSeriesInputs(RightEdge.Common.ISeries[])">
            <summary>
            Sets series inputs for this trigger.
            </summary>
            <param name="inputs">A collection of <see cref="T:RightEdge.Common.ISeries">ISeries</see> instances.</param>
        </member>
        <member name="M:RightEdge.Common.TriggerBase.GetSeriesInputs">
            <summary>
            Retrieves the series inputs for this trigger.
            </summary>
            <returns><see cref="T:RightEdge.Common.ISeries">ISeries</see> collection.</returns>
        </member>
        <member name="M:RightEdge.Common.TriggerBase.SetTriggerInputs(RightEdge.Common.ITrigger[])">
            <summary>
            Sets dependent trigger inputs for this trigger.
            </summary>
            <param name="inputs"><see cref="T:RightEdge.Common.ITrigger">ITrigger</see> collection.</param>
        </member>
        <member name="M:RightEdge.Common.TriggerBase.GetTriggerInputs">
            <summary>
            Retrieves any dependent trigger inputs for this trigger.
            </summary>
            <returns><see cref="T:RightEdge.Common.ITrigger">ITrigger</see> collection.</returns>
        </member>
        <member name="P:RightEdge.Common.TriggerBase.IsTriggered">
            <summary>
            Determines if a trigger's conditions are true at this point in time.
            </summary>
        </member>
        <member name="M:RightEdge.Triggers.ConstantTrigger.#ctor(System.Boolean)">
            <summary>
            Constructs a ConstantTrigger instance.
            </summary>
            <param name="value">Set this to true or false.</param>
        </member>
        <member name="M:RightEdge.Triggers.ConstantTrigger.NewBar">
            <exclude />
        </member>
        <member name="P:RightEdge.Triggers.ConstantTrigger.IsTriggered">
            <summary>
            Returns the triggered condition.
            </summary>
            <remarks>
            Returns true if triggered, false if not triggered.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.EnumUtil`1">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SerializationWriter">
             <summary>
             A SerializationWriter instance is used to store values and objects in a byte array.
            
             Once an instance is created, use the various methods to store the required data.
             ToArray() will return a byte[] containing all of the data required for deserialization.
             This can be stored in the SerializationInfo parameter in an ISerializable.GetObjectData() method.
             <para />
             As an alternative to ToArray(), if you want to apply some post-processing to the serialized bytes, 
             such as compression, call AppendTokenTables first to ensure that the string and object token tables 
             are appended to the stream, and then cast BaseStream to MemoryStream. You can then access the
             MemoryStream's internal buffer as follows:
             <para />
             <example><code>
             writer.AppendTokenTables();
             MemoryStream stream = (MemoryStream) writer.BaseStream;
            	serializedData = MiniLZO.Compress(stream.GetBuffer(), (int) stream.Length);
             </code></example>
             </summary>
             <exclude />
        </member>
        <member name="F:RightEdge.Common.SerializationWriter.HighestOptimizable32BitValue">
            <summary>
            Holds the highest int that can be optimized into less than the normal 4 bytes
            </summary>
        </member>
        <member name="F:RightEdge.Common.SerializationWriter.HighestOptimizable64BitValue">
            <summary>
            Holds the highest long that can be optimized into less than the normal 8 bytes
            </summary>
        </member>
        <member name="F:RightEdge.Common.SerializationWriter.DefaultCapacity">
            <summary>
            Default capacity for the underlying MemoryStream
            </summary>
        </member>
        <member name="F:RightEdge.Common.SerializationWriter.DefaultOptimizeForSize">
            <summary>
            The Default setting for the OptimizeForSize property.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SerializationWriter.DateYearMask">
            <summary>
            Section masks used for packing DateTime values
            </summary>
        </member>
        <member name="F:RightEdge.Common.SerializationWriter.IsNegativeSection">
            <summary>
            Section masks used for packing TimeSpan values
            </summary>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.#ctor">
            <summary>
            Creates a FastSerializer with the Default Capacity (1kb)
            </summary>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.#ctor(System.Int32)">
            <summary>
            Creates a FastSerializer with the specified capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a FastSerializer around the specified stream
            Note: The stream must be seekable in this version to allow the token table 
            offset to be written on completion 
            </summary>
            <param name="stream">The seekable stream in which to store data</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Collections.ArrayList)">
            <summary>
            Writes an ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null Arraylist takes 1 byte.
            An empty ArrayList takes 2 bytes.
            The contents are stored using WriteOptimized(ArrayList) which should be used
            if the ArrayList is guaranteed never to be null.
            </summary>
            <param name="value">The ArrayList to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Collections.BitArray)">
            <summary>
            Writes a BitArray value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null BitArray takes 1 byte.
            An empty BitArray takes 2 bytes.
            </summary>
            <param name="value">The BitArray value to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream.
            Stored Size: 4 bytes.
            </summary>
            <param name="value">The BitVector32 to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The DateTime value to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Guid)">
            <summary>
            Writes a Guid into the stream.
            Stored Size: 16 bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(RightEdge.Common.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows any object implementing IOwnedDataSerializable to serialize itself
            into this SerializationWriter.
            A context may also be used to give the object an indication of what data
            to store. As an example, using a BitVector32 gives a list of flags and
            the object can conditionally store data depending on those flags.
            </summary>
            <param name="target">The IOwnedDataSerializable object to ask for owned data</param>
            <param name="context">An arbtritrary object but BitVector32 recommended</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteObject(System.Object)">
            <summary>
            Stores an object into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on type and/or content.
            
            1 byte: null, DBNull.Value, Boolean
            
            1 to 2 bytes: Int16, UInt16, Byte, SByte, Char, 
            
            1 to 4 bytes: Int32, UInt32, Single, BitVector32
            
            1 to 8 bytes: DateTime, TimeSpan, Double, Int64, UInt64
            
            1 or 16 bytes: Guid
            
            1 plus content: string, object[], byte[], char[], BitArray, Type, ArrayList
            
            Any other object be stored using a .Net Binary formatter but this should 
            only be allowed as a last resort:
            Since this is effectively a different serialization session, there is a 
            possibility of the same shared object being serialized twice or, if the 
            object has a reference directly or indirectly back to the parent object, 
            there is a risk of looping which will throw an exception.
            
            The type of object is checked with the most common types being checked first.
            Each 'section' can be reordered to provide optimum speed but the check for
            null should always be first and the default serialization always last.
            
            Once the type is identified, a SerializedType byte is stored in the stream
            followed by the data for the object (certain types/values may not require
            storage of data as the SerializedType may imply the value).
            
            For certain objects, if the value is within a certain range then optimized
            storage may be used. If the value doesn't meet the required optimization
            criteria then the value is stored directly.
            The checks for optimization may be disabled by setting the OptimizeForSize
            property to false in which case the value is stored directly. This could 
            result in a slightly larger stream but there will be a speed increate to
            compensate.
            </summary>
            <param name="value">The object to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.String)">
            <summary>
            Calls WriteOptimized(string).
            This override to hide base BinaryWriter.Write(string).
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The TimeSpan value to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Type,System.Boolean)">
            <summary>
            Stores a Type object into the stream.
            Stored Size: Depends on the length of the Type's name and whether the fullyQualified parameter is set.
            A null Type takes 1 byte.
            </summary>
            <param name="value">The Type to store.</param>
            <param name="fullyQualified">true to store the AssemblyQualifiedName or false to store the FullName. </param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Collections.ArrayList)">
            <summary>
            Writes an non-null ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty ArrayList takes 1 byte.
            </summary>
            <param name="value">The ArrayList to store. Must not be null.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Collections.BitArray)">
            <summary>
            Writes a BitArray into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty BitArray takes 1 byte.
            </summary>
            <param name="value">The BitArray value to store. Must not be null.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream using the fewest number of bytes possible.
            Stored Size: 1 to 4 bytes. (.Net is 4 bytes)
             1 to  7 bits takes 1 byte
             8 to 14 bits takes 2 bytes
            15 to 21 bits takes 3 bytes
            22 to 28 bits takes 4 bytes
            -------------------------------------------------------------------
            29 to 32 bits takes 5 bytes - use Write(BitVector32) method instead
            
            Try to order the BitVector32 masks so that the highest bits are least-likely
            to be set.
            </summary>
            <param name="value">The BitVector32 to store. Must not use more than 28 bits.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream using the fewest number of bytes possible.
            Stored Size: 3 bytes to 7 bytes (.Net is 8 bytes)
            Notes:
            A DateTime containing only a date takes 3 bytes
            (except a .NET 2.0 Date with a specified DateTimeKind which will take a minimum
            of 5 bytes - no further optimization for this situation felt necessary since it
            is unlikely that a DateTimeKind would be specified without hh:mm also)
            Date plus hh:mm takes 5 bytes.
            Date plus hh:mm:ss takes 6 bytes.
            Date plus hh:mm:ss.fff takes 7 bytes.
            </summary>
            <param name="value">The DateTime value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Decimal)">
            <summary>
            Writes a Decimal value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte to 14 bytes (.Net is 16 bytes)
            Restrictions: None
            </summary>
            <param name="value">The Decimal value to store</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Int32)">
            <summary>
            Write an Int32 value using the fewest number of bytes possible.
            <para />
            Only call this method if the value is known to be between 0 and 
            268,435,455 otherwise use Write(Int32 value)
            </summary>
            <remarks>
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0x07FFFFFF (268,435,456 and above) takes 5 bytes
            All negative numbers take 5 bytes
            
            Only call this method if the value is known to be between 0 and 
            268,435,455 otherwise use Write(Int32 value)
            </remarks>
            <param name="value">The Int32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Int64)">
            <summary>
            Write an Int64 value using the fewest number of bytes possible.
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            All negative numbers take 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(Int64 value)
            </summary>
            <param name="value">The Int64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.String)">
            <summary>
            Writes a string value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on string length
            Notes:
            Encodes null, Empty, 'Y', 'N', ' ' values as a single byte
            Any other single char string is stored as two bytes
            All other strings are stored in a string token list:
            
            The TypeCode representing the current string token list is written first (1 byte), 
            followed by the string token itself (1-4 bytes)
            
            When the current string list has reached 128 values then a new string list
            is generated and that is used for generating future string tokens. This continues
            until the maximum number (128) of string lists is in use, after which the string 
            lists are used in a round-robin fashion.
            By doing this, more lists are created with fewer items which allows a smaller 
            token size to be used for more strings.
            
            The first 16,384 strings will use a 1 byte token.
            The next 2,097,152 strings will use a 2 byte token. (This should suffice for most uses!)
            The next 268,435,456 strings will use a 3 byte token. (My, that is a lot!!)
            The next 34,359,738,368 strings will use a 4 byte token. (only shown for completeness!!!)
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes to 8 bytes (.Net is 8 bytes)
            Notes:
            hh:mm (time) are always stored together and take 2 bytes.
            If seconds are present then 3 bytes unless (time) is not present in which case 2 bytes
            since the seconds are stored in the minutes position.
            If milliseconds are present then 4 bytes.
            In addition, if days are present they will add 1 to 4 bytes to the above.
            </summary>
            <param name="value">The TimeSpan value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Type)">
            <summary>
            Stores a non-null Type object into the stream.
            Stored Size: Depends on the length of the Type's name.
            If the type is a System type (mscorlib) then it is stored without assembly name information,
            otherwise the Type's AssemblyQualifiedName is used.
            </summary>
            <param name="value">The Type to store. Must not be null.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.UInt32)">
            <summary>
            Write a UInt32 value using the fewest number of bytes possible.
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0xFFFFFFFF (268,435,456 and above) takes 5 bytes
            
            Only call this method if the value is known to  be between 0 and 
            268,435,455 otherwise use Write(UInt32 value)
            </summary>
            <param name="value">The UInt32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.UInt64)">
            <summary>
            Write a UInt64 value using the fewest number of bytes possible.
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(UInt64 value)
            </summary>
            <param name="value">The UInt64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Boolean[])">
            <summary>
            Writes a Boolean[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(Boolean[]).
            </summary>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Byte[])">
            <summary>
            Writes a Byte[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Char[])">
            <summary>
            Writes a Char[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Decimal[])">
            <summary>
            Writes a Decimal[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(Decimal[]).
            </summary>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Double[])">
            <summary>
            Writes a Double[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Single[])">
            <summary>
            Writes a Single[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Guid[])">
            <summary>
            Writes a Guid[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Object[])">
            <summary>
            Writes an object[] into the stream.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            A null object[] takes 1 byte.
            An empty object[] takes 2 bytes.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.SByte[])">
            <summary>
            Writes an SByte[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.Int16[])">
            <summary>
            Writes an Int16[]or a null into the stream.
            Notes:
            A null or empty array will take 1 byte.
            Calls WriteOptimized(decimal[]).
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Write(System.UInt16[])">
            <summary>
            Writes a UInt16[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt16[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Boolean[])">
            <summary>
            Writes an optimized Boolean[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            Stored as a BitArray.
            </summary>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Decimal[])">
            <summary>
            Writes a Decimal[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Object[])">
            <summary>
            Writes a not-null object[] into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            An empty object[] takes 1 byte.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store. Must not be null.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Object[],System.Object[])">
            <summary>
            Writes a pair of object[] arrays into the stream using the fewest number of bytes possible.
            The arrays must not be null and must have the same length
            The first array's values are written optimized
            The second array's values are compared against the first and, where identical, will be stored
            using a single byte.
            Useful for storing entity data where there is a before-change and after-change set of value pairs
            and, typically, only a few of the values will have changed.
            </summary>
            <param name="values1">The first object[] value which must not be null and must have the same length as values2</param>
            <param name="values2">The second object[] value which must not be null and must have the same length as values1</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteOptimized(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteTypedArray(System.Array)">
            <summary>
            Writes a null or a typed array into the stream.
            </summary>
            <param name="values">The array to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.AppendTokenTables">
            <summary>
            Writes the contents of the string and object token tables into the stream.
            Also write the starting offset into the first 4 bytes of the stream.
            Notes:
            Called automatically by ToArray().
            Can be used to ensure that the complete graph is written before using an
            alternate technique of extracting a Byte[] such as using compression on
            the underlying stream.
            </summary>
            <returns>The length of the string and object tables.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.ToArray">
            <summary>
            Returns a byte[] containing all of the serialized data.
            
            The current implementation has the data in 3 sections:
            1) A 4 byte Int32 giving the offset to the 3rd section.
            2) The main serialized data.
            3) The serialized string tokenization lists and object
               tokenization lists.
            
            Only call this method once all of the data has been serialized.
            
            This method appends all of the tokenized data (string and object)
            to the end of the stream and ensures that the first four bytes
            reflect the offset of the tokenized data so that it can be
            deserialized first.
            This is the reason for requiring a rewindable stream.
            
            Future implementations may also allow the serialized data to be
            accessed via 2 byte[] arrays. This would remove the requirement
            for a rewindable stream opening the possibility of streaming the
            serialized data directly over the network allowing simultaneous
            of partially simultaneous deserialization.
            </summary>
            <returns>A byte[] containing all serialized data.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteBytesDirect(System.Byte[])">
            <summary>
            Writes a byte[] directly into the stream.
            The size of the array is not stored so only use this method when
            the number of bytes will be known at deserialization time.
            
            A null value will throw an exception
            </summary>
            <param name="value">The byte[] to store. Must not be null.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteStringDirect(System.String)">
            <summary>
            Writes a non-null string directly to the stream without tokenization.
            </summary>
            <param name="value">The string to store. Must not be null.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteTokenizedObject(System.Object)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            The object will be serialized once and recreated at deserialization time.
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.WriteTokenizedObject(System.Object,System.Boolean)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            When recreateFromType is set to true, the object's Type will be stored and the object recreated using 
            Activator.GetInstance with a parameterless contructor. This is useful for stateless, factory-type classes.
            
            When recreateFromType is set to false, the object will be serialized once and recreated at deserialization time.
            
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
            <param name="recreateFromType">true if the object can be recreated using a parameterless constructor; 
            false if the object should be serialized as-is</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.Dispose(System.Boolean)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.encodeTimeSpan(System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Encodes a TimeSpan into the fewest number of bytes.
            Has been separated from the WriteOptimized(TimeSpan) method so that WriteOptimized(DateTime)
            can also use this for .NET 2.0 DateTimeKind information.
            By taking advantage of the fact that a DateTime's TimeOfDay portion will never use the IsNegative
            and HasDays flags, we can use these 2 bits to store the DateTimeKind and, since DateTimeKind is
            unlikely to be set without a Time, we need no additional bytes to support a .NET 2.0 DateTime.
            </summary>
            <param name="value">The TimeSpan to store.</param>
            <param name="partOfDateTime">True if the TimeSpan is the TimeOfDay from a DateTime; False if a real TimeSpan.</param>
            <param name="initialData">The intial data for the BitVector32 - contains DateTimeKind or 0</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.checkOptimizable(System.Boolean,System.String)">
            <summary>
            Checks whether an optimization condition has been met and throw an exception if not.
            
            This method has been made conditional on THROW_IF_NOT_OPTIMIZABLE being set at compile time.
            By default, this is set if DEBUG is set but could be set explicitly if exceptions are required and
            the evaluation overhead is acceptable. 
            If not set, then this method and all references to it are removed at compile time.
            
            Leave at the default for optimum usage.
            </summary>
            <param name="condition">An expression evaluating to true if the optimization condition is met, false otherwise.</param>
            <param name="message">The message to include in the exception should the optimization condition not be met.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.write7bitEncodedSigned32BitValue(System.Int32)">
            <summary>
            Stores a 32-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int32) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int32 value to encode.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.write7bitEncodedSigned64BitValue(System.Int64)">
            <summary>
            Stores a 64-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int64) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int64 value to encode.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.write7bitEncodedUnsigned32BitValue(System.UInt32)">
            <summary>
            Stores a 32-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(UInt32) for details of the values that are optimizable.
            </summary>
            <param name="value">The UInt32 value to encode.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.write7bitEncodedUnsigned64BitValue(System.UInt64)">
            <summary>
            Stores a 64-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(ULong) for details of the values that are optimizable.
            </summary>
            <param name="value">The ULong value to encode.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Boolean[])">
            <summary>
            Internal implementation to store a non-null Boolean[].
            </summary>
            <remarks>
            Stored as a BitArray for optimization.
            </remarks>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Byte[])">
            <summary>
            Internal implementation to store a non-null Byte[].
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Char[])">
            <summary>
            Internal implementation to store a non-null Char[].
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.DateTime[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non, null DateTime[] using a BitArray to 
            determine which elements are optimizable.
            </summary>
            <param name="values">The DateTime[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Decimal[])">
            <summary>
            Internal implementation to store a non-null Decimal[].
            </summary>
            <remarks>
            All elements are stored optimized.
            </remarks>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Double[])">
            <summary>
            Internal implementation to store a non-null Double[].
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Single[])">
            <summary>
            Internal implementation to store a non-null Single[].
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Guid[])">
            <summary>
            Internal implementation to store a non-null Guid[].
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Int32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null Int32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Int64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to writes a non-null Int64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.SByte[])">
            <summary>
            Internal implementation to store a non-null SByte[].
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.Int16[])">
            <summary>
            Internal implementation to store a non-null Int16[].
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.TimeSpan[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null TimeSpan[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.UInt32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.UInt16[])">
            <summary>
            Internal implementation to store a non-null UInt16[].
            </summary>
            <param name="values">The UIn16[] to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeArray(System.UInt64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeObjectArray(System.Object[])">
            <summary>
            Writes the values in the non-null object[] into the stream.
            
            Sequences of null values and sequences of DBNull.Values are stored with a flag and optimized count.
            Other values are stored using WriteObject().
            
            This routine is called by the Write(object[]), WriteOptimized(object[]) and Write(object[], object[])) methods.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeTypeCode(RightEdge.Common.SerializedType)">
            <summary>
            Stores the specified SerializedType code into the stream.
            
            By using a centralized method, it is possible to collect statistics for the
            type of data being stored in DEBUG mode.
            
            Use the DumpTypeUsage() method to show a list of used SerializedTypes and
            the number of times each has been used. This method and the collection code
            will be optimized out when compiling in Release mode.
            </summary>
            <param name="typeCode">The SerializedType to store.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeTypedArray(System.Array,System.Boolean)">
            <summary>
            Internal implementation to write a non-null typed array into the stream.
            </summary>
            <remarks>
            Checks first to see if the element type is a primitive type and calls the 
            correct routine if so. Otherwise determines the best, optimized method
            to store the array contents.
            <para />
            An array of object elements never stores its type.
            </remarks>
            <param name="value">The non-null typed array to store.</param>
            <param name="storeType">True if the type should be stored; false otherwise</param>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.isTypeRecreatable(System.Type)">
            <summary>
            Checks whether instances of a Type can be created.
            </summary>
            <remarks>
            A Value Type only needs to implement IOwnedDataSerializable. 
            A Reference Type needs to implement IOwnedDataSerializableAndRecreatable and provide a default constructor.
            </remarks>
            <param name="type">The Type to check</param>
            <returns>true if the Type is recreatable; false otherwise.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.arrayElementsAreSameType(System.Object[],System.Type)">
            <summary>
            Checks whether each element in an array is of the same type.
            </summary>
            <param name="values">The array to check</param>
            <param name="elementType">The expected element type.</param>
            <returns></returns>
        </member>
        <member name="M:RightEdge.Common.SerializationWriter.writeTypedArrayTypeCode(System.Collections.BitArray,System.Int32)">
            <summary>
            Writes the TypeCode for the Typed Array followed by the number of elements.
            </summary>
            <param name="optimizeFlags"></param>
            <param name="length"></param>
        </member>
        <member name="P:RightEdge.Common.SerializationWriter.OptimizeForSize">
            <summary>
            Gets or Sets a boolean flag to indicate whether to optimize for size (default)
            by storing data as packed bits or sections where possible.
            Setting this value to false will turn off this optimization and store
            data directly which increases the speed.
            Note: This only affects optimization of data passed to the WriteObject method
            and direct calls to the WriteOptimized methods will always pack data into
            the smallest space where possible.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SerializationWriter.SingletonTypeWrapper">
            <summary>
            Private class used to wrap an object that is to be tokenized, and recreated at deserialization by its type.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SerializationWriter.UniqueStringList">
            <summary>
            Provides a faster way to store string tokens both maintaining the order that they were added and
            providing a fast lookup.
            
            Based on code developed by ewbi at http://ewbi.blogs.com/develops/2006/10/uniquestringlis.html
            </summary>
        </member>
        <member name="T:RightEdge.Common.SerializationReader">
             <summary>
             A SerializationReader instance is used to read stored values and objects from a byte array.
            
             Once an instance is created, use the various methods to read the required data.
             The data read MUST be exactly the same type and in the same order as it was written.
             </summary>
             <exclude />
        </member>
        <member name="M:RightEdge.Common.SerializationReader.#ctor(System.Byte[])">
            <summary>
            Creates a SerializationReader using a byte[] previous created by SerializationWriter
            
            A MemoryStream is used to access the data without making a copy of it.
            </summary>
            <param name="data">The byte[] containining serialized data.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a SerializationReader based on the passed Stream.
            </summary>
            <param name="stream">The stream containing the serialized data</param>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadArrayList">
            <summary>
            Returns an ArrayList or null from the stream.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadBitArray">
            <summary>
            Returns a BitArray or null from the stream.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadBitVector32">
            <summary>
            Returns a BitVector32 value from the stream.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadBytesDirect(System.Int32)">
            <summary>
            Reads the specified number of bytes directly from the stream.
            </summary>
            <param name="count">The number of bytes to read</param>
            <returns>A byte[] containing the read bytes</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadDateTime">
            <summary>
            Returns a DateTime value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadGuid">
            <summary>
            Returns a Guid value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadObject">
            <summary>
            Returns an object based on the SerializedType read next from the stream.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadString">
            <summary>
            Called ReadOptimizedString().
            This override to hide base BinaryReader.ReadString().
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadStringDirect">
            <summary>
            Returns a string value from the stream.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadType">
            <summary>
            Returns a Type or null from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadType(System.Boolean)">
            <summary>
            Returns a Type or null from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedArrayList">
            <summary>
            Returns an ArrayList from the stream that was stored optimized.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedBitArray">
            <summary>
            Returns a BitArray from the stream that was stored optimized.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedBitVector32">
            <summary>
            Returns a BitVector32 value from the stream that was stored optimized.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedDateTime">
            <summary>
            Returns a DateTime value from the stream that was stored optimized.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedDecimal">
            <summary>
            Returns a Decimal value from the stream that was stored optimized.
            </summary>
            <returns>A Decimal value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedInt32">
            <summary>
            Returns an Int32 value from the stream that was stored optimized.
            </summary>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedInt64">
            <summary>
            Returns an Int64 value from the stream that was stored optimized.
            </summary>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedObjectArray">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            </summary>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedObjectArray(System.Type)">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadOptimizedObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedObjectArrayPair(System.Object[]@,System.Object[]@)">
            <summary>
            Returns a pair of object[] arrays from the stream that were stored optimized.
            </summary>
            <returns>A pair of object[] arrays.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedString">
            <summary>
            Returns a string value from the stream that was stored optimized.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream that was stored optimized.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedType">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedType(System.Boolean)">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedUInt32">
            <summary>
            Returns a UInt32 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedUInt64">
            <summary>
            Returns a UInt64 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadTypedArray">
            <summary>
            Returns a typed array from the stream.
            </summary>
            <returns>A typed array.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadByteArray">
            <summary>
            Returns a Byte[] from the stream.
            </summary>
            <returns>A Byte instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadCharArray">
            <summary>
            Returns a Char[] from the stream.
            </summary>
            <returns>A Char[] value; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadDoubleArray">
            <summary>
            Returns a Double[] from the stream.
            </summary>
            <returns>A Double[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadGuidArray">
            <summary>
            Returns a Guid[] from the stream.
            </summary>
            <returns>A Guid[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadInt16Array">
            <summary>
            Returns an Int16[] from the stream.
            </summary>
            <returns>An Int16[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadObjectArray">
            <summary>
            Returns an object[] or null from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadObjectArray(System.Type)">
            <summary>
            Returns an object[] or null from the stream.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadSingleArray">
            <summary>
            Returns a Single[] from the stream.
            </summary>
            <returns>A Single[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadSByteArray">
            <summary>
            Returns an SByte[] from the stream.
            </summary>
            <returns>An SByte[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadStringArray">
            <summary>
            Returns a string[] or null from the stream.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadUInt16Array">
            <summary>
            Returns a UInt16[] from the stream.
            </summary>
            <returns>A UInt16[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadBooleanArray">
            <summary>
            Returns a Boolean[] from the stream.
            </summary>
            <returns>A Boolean[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadDecimalArray">
            <summary>
            Returns a Decimal[] from the stream.
            </summary>
            <returns>A Decimal[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadInt32Array">
            <summary>
            Returns an Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadInt64Array">
            <summary>
            Returns an Int64[] from the stream.
            </summary>
            <returns>An Int64[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedStringArray">
            <summary>
            Returns a string[] from the stream that was stored optimized.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadUInt32Array">
            <summary>
            Returns a UInt[] from the stream.
            </summary>
            <returns>A UInt[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedBooleanArray">
            <summary>
            Returns a Boolean[] from the stream.
            </summary>
            <returns>A Boolean[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedDecimalArray">
            <summary>
            Returns a Decimal[] from the stream.
            </summary>
            <returns>A Decimal[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedInt32Array">
            <summary>
            Returns a Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedInt64Array">
            <summary>
            Returns a Int64[] from the stream.
            </summary>
            <returns>A Int64[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedUInt32Array">
            <summary>
            Returns a UInt32[] from the stream.
            </summary>
            <returns>A UInt32[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOptimizedUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadOwnedData(RightEdge.Common.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows an existing object, implementing IOwnedDataSerializable, to 
            retrieve its owned data from the stream.
            </summary>
            <param name="target">Any IOwnedDataSerializable object.</param>
            <param name="context">An optional, arbitrary object to allow context to be provided.</param>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.ReadTokenizedObject">
            <summary>
            Returns the object associated with the object token read next from the stream.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.decodeTimeSpan(System.Byte)">
            <summary>
            Returns a TimeSpan decoded from packed data.
            This routine is called from ReadOptimizedDateTime() and ReadOptimizedTimeSpan().
            <remarks>
            This routine uses a parameter to allow ReadOptimizedDateTime() to 'peek' at the
            next byte and extract the DateTimeKind from bits one and two (IsNegative and HasDays)
            which are never set for a Time portion of a DateTime.
            </remarks>
            </summary>
            <param name="initialByte">The first of two always-present bytes.</param>
            <returns>A decoded TimeSpan</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readTypedArrayOptimizeFlags(RightEdge.Common.SerializedType)">
            <summary>
            Creates a BitArray representing which elements of a typed array
            are serializable.
            </summary>
            <param name="serializedType">The type of typed array.</param>
            <returns>A BitArray denoting which elements are serializable.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.processObject(RightEdge.Common.SerializedType)">
            <summary>
            Returns an object based on supplied SerializedType.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.processArrayTypes(RightEdge.Common.SerializedType,System.Type)">
            <summary>
            Determine whether the passed-in type code refers to an array type
            and deserializes the array if it is.
            Returns null if not an array type.
            </summary>
            <param name="typeCode">The SerializedType to check.</param>
            <param name="defaultElementType">The Type of array element; null if to be read from stream.</param>
            <returns></returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readTokenizedString(System.Int32)">
            <summary>
            Returns the string value associated with the string token read next from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readTypeCode">
            <summary>
            Returns the SerializedType read next from the stream.
            </summary>
            <returns>A SerializedType value.</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readBooleanArray">
            <summary>
            Internal implementation returning a Bool[].
            </summary>
            <returns>A Bool[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readByteArray">
            <summary>
            Internal implementation returning a Byte[].
            </summary>
            <returns>A Byte[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readCharArray">
            <summary>
            Internal implementation returning a Char[].
            </summary>
            <returns>A Char[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readDecimalArray">
            <summary>
            Internal implementation returning a Decimal[].
            </summary>
            <returns>A Decimal[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readDoubleArray">
            <summary>
            Internal implementation returning a Double[].
            </summary>
            <returns>A Double[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readGuidArray">
            <summary>
            Internal implementation returning a Guid[].
            </summary>
            <returns>A Guid[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readInt16Array">
            <summary>
            Internal implementation returning an Int16[].
            </summary>
            <returns>An Int16[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readSByteArray">
            <summary>
            Internal implementation returning an SByte[].
            </summary>
            <returns>An SByte[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readSingleArray">
            <summary>
            Internal implementation returning a Single[].
            </summary>
            <returns>A Single[].</returns>
        </member>
        <member name="M:RightEdge.Common.SerializationReader.readUInt16Array">
            <summary>
            Internal implementation returning a UInt16[].
            </summary>
            <returns>A UInt16[].</returns>
        </member>
        <member name="P:RightEdge.Common.SerializationReader.BytesRemaining">
            <summary>
            Returns the number of bytes or serialized remaining to be processed.
            Useful for checking that deserialization is complete.
            
            Warning: Retrieving the Position in certain stream types can be expensive,
            e.g. a FileStream, so use sparingly unless known to be a MemoryStream.
            </summary>
        </member>
        <member name="T:RightEdge.Common.OptimizationException">
            <summary>
            Exception thrown when a value being optimized does not meet the required criteria for optimization.
            </summary>
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SerializedType">
            <summary>
            Stores information about a type or type/value.
            Internal use only.
            </summary>
            <exclude />
        </member>
        <member name="T:RightEdge.Common.FilteredDailyFrequency">
            <summary>
            Frequency plugin which only builds bars from data between a specified start and end time.
            </summary>
            <remarks>This frequency can be used to filter out data outside of trading hours.</remarks>
        </member>
        <member name="T:RightEdge.Common.FrequencyPlugin">
            <summary>
            Abstract class that defines a FrequencyPlugin.
            </summary>
            <remarks>
            RightEdge has the capability to aggregate data to any imaginable frequency.  A number of frequency plugins are
            provided out of the box, but in cases where those in existence are not sufficient, a custom frequency plugin
            can be authored.  This class is the basis for generation.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.FrequencyPlugin.CreateFrequencyGenerator">
            <summary>
            Call to create an IFrequencyGenerator instance.
            </summary>
            <returns>Instantiated IFrequencyGenerator plugin.</returns>
        </member>
        <member name="M:RightEdge.Common.FrequencyPlugin.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>A full copy of the FrequencyPlugin</returns>
        </member>
        <member name="M:RightEdge.Common.FrequencyPlugin.Equals(System.Object)">
            <summary>
            Determines whether two FrequencyPlugin instances are equal
            </summary>
            <param name="obj">FrequencyPlugin used for comparison</param>
            <returns>true if they are equal, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.FrequencyPlugin.GetHashCode">
            <summary>
            Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="P:RightEdge.Common.FrequencyPlugin.IsTimeBased">
            <summary>
            Indicates whether the frequency generates bars based on the date/time of the input data.  If true, and
            the synchronize bars setting is enabled, empty bars will be created for symbols that don't have any data
            during a time period when another symbol generates a bar.
            </summary>
        </member>
        <member name="M:RightEdge.Common.FilteredDailyFrequency.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:RightEdge.Common.FilteredDailyFrequency" /> class.  By default, the <see cref="P:RightEdge.Common.FilteredDailyFrequency.StartTime" />
            will be 9:30 am and the <see cref="P:RightEdge.Common.FilteredDailyFrequency.EndTime" /> will be 4:00 pm.
            </summary>
        </member>
        <member name="M:RightEdge.Common.FilteredDailyFrequency.CreateFrequencyGenerator">
            <summary>
            Creates an IFrequencyGenerator instance
            </summary>
            <returns>an IFrequencyGenerator instance</returns>
        </member>
        <member name="M:RightEdge.Common.FilteredDailyFrequency.Clone">
            <summary>
            Clones or creates a copy of this <see cref="T:RightEdge.Common.FilteredDailyFrequency" /> instance.
            </summary>
            <returns><see cref="T:RightEdge.Common.FilteredDailyFrequency" /> plugin instance.</returns>
        </member>
        <member name="M:RightEdge.Common.FilteredDailyFrequency.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.FilteredDailyFrequency.GetHashCode">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.FilteredDailyFrequency.StartTime">
            <summary>
            The time to start accepting data.  Ticks before this time will not be included in the bars generated by this plugin.
            </summary>
        </member>
        <member name="P:RightEdge.Common.FilteredDailyFrequency.EndTime">
            <summary>
            The time to stop accepting data.  Ticks after this time will not be included in the bars generated by this plugin.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IFrequencyGenerator">
            <summary>
            Interface for IFrequencyGenerator
            </summary>
            <remarks>
            RightEdge has the capability to aggregate tick data to any imaginable frequency.  A number of frequency plugins are
            provided out of the box, but in cases where those in existence are not sufficient, a custom frequency plugin
            can be authored.  IFrequencyGenerator is piece that handles the logic for tick aggregation.  It is housed inside
            of a <see cref="T:RightEdge.Common.FrequencyPlugin" /> object.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IFrequencyGenerator.Initialize(RightEdge.Common.Symbol,RightEdge.Common.BarConstructionType)">
            <summary>
            Called to initialize this frequency generator instance.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.Symbol" /> object.</param>
            <param name="barConstruction"><see cref="T:RightEdge.Common.BarConstructionType" /> enumeration.</param>
        </member>
        <member name="M:RightEdge.Common.IFrequencyGenerator.ProcessTick(RightEdge.Common.TickData)">
            <summary>
            Called to process ticks.
            </summary>
            <param name="tick">Incoming <see cref="T:RightEdge.Common.TickData" /> structure.</param>
            <remarks>
            Each time an incoming tick is consumed by RightEdge, it is passed off to each
            registered IFrequencyGenerator for further processing and record keeping.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IFrequencyGenerator.ProcessBar(RightEdge.Common.SingleBarEventArgs)">
            <summary>
            Called to handle bars.
            </summary>
            <param name="args">Incoming <see cref="T:RightEdge.Common.SingleBarEventArgs" /> object.</param>
            <remarks>
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IFrequencyGenerator.NextTimeUpdateNeeded">
            <summary>
            A time which represents the soonest time that the frequency will need to be notified of the current time.
            </summary>
            <remarks>
            <para>Time-based frequencies need to be notified when the current time changes in order to send out new bars
            when necessary.  However, it is not efficient to send a time update notification to each frequency generator
            on each new tick for every symbol (since there is one frequency generator per symbol per frequency).</para>
            <para>This property lets frequencies notify RightEdge when the next time is that they will need a time update.
            Time-based frequencies should usually return the end time of the current bar.  Non time-based frequencies
            can return <see cref="F:System.DateTime.MaxValue" /> to indicate that they don't need any time updates.  A frequency that
            does need all time updates can return <see cref="F:System.DateTime.MinValue" />, however this means the frequency will
            cause slowdown when running live systems with large numbers of symbols.</para>
            </remarks>
        </member>
        <member name="E:RightEdge.Common.IFrequencyGenerator.NewTick">
            <summary>
            NewTick event
            </summary>
            <remarks>
            Allows system writers to hook into the NewTick event generated by this frequency plugin.
            </remarks>
        </member>
        <member name="E:RightEdge.Common.IFrequencyGenerator.NewBar">
            <summary>
            NewBar event
            </summary>
            <remarks>
            Allows system writers to hook into the NewBar event generated by this frequency plugin.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.ActionContext">
            <summary>
            ActionContext class.
            </summary>
            <remarks>
            Class for use with Series inputs for actions.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.ActionContext.symbol">
            <summary>
            <see cref="T:RightEdge.Common.Symbol">Symbol</see> instance assigned to this ActionContext.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ActionContext.position">
            <summary>
            <see cref="T:RightEdge.Common.Position">Position</see> instance assigned to this ActionContext.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ISystemAccess">
            <summary>
            Allows a trigger or indicator to access the full system state
            </summary>
        </member>
        <member name="M:RightEdge.Common.ISystemAccess.Initialize(RightEdge.Common.SystemData,RightEdge.Common.Symbol)">
            <summary>
            Initializes a component with information about the system and symbol it is associated with.
            </summary>
            <param name="systemData">The <see cref="T:RightEdge.Common.SystemData" /> object for the current system</param>
            <param name="symbol">The symbol associated with this object</param>
            <remarks>
            If a component implements the <see cref="T:RightEdge.Common.ISystemAccess" /> Interface, this method will
            be called to pass a reference to the <see cref="T:RightEdge.Common.SystemData" /> class and the <see cref="T:RightEdge.Common.Symbol" />
            associated with this object.  The component will usually save these values for later
            reference.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.OutputManager">
            <summary>
            Class that manages output to the Output window.
            </summary>
        </member>
        <member name="M:RightEdge.Common.OutputManager.#ctor">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.OutputManager.Add(RightEdge.Common.OutputSeverityLevel,System.String)">
            <summary>
            Adds an output line to be sent to the output pane.
            </summary>
            <param name="severityLevel">Assigned severity level.</param>
            <param name="errorMessage">Text containing the error or output message.</param>
        </member>
        <member name="M:RightEdge.Common.OutputManager.Add(RightEdge.Common.OutputSeverityLevel,System.String,RightEdge.Common.Symbol)">
            <summary>
            Adds an output line to be sent to the output pane.
            </summary>
            <param name="severityLevel">Assigned severity level.</param>
            <param name="errorMessage">Text containing the error or output message.</param>
            <param name="symbol">Assigned Symbol instance for this output line.</param>
        </member>
        <member name="M:RightEdge.Common.OutputManager.Add(RightEdge.Common.OutputSeverityLevel,System.String,RightEdge.Common.Symbol,System.String)">
            <summary>
            Adds an output line to be sent to the output pane.
            </summary>
            <param name="severityLevel">Assigned severity level.</param>
            <param name="errorMessage">Text containing the error or output message.</param>
            <param name="symbol">Assigned Symbol instance for this output line.</param>
            <param name="moduleName">Optional module name for this output line.</param>
        </member>
        <member name="M:RightEdge.Common.OutputManager.Add(RightEdge.Common.OutputSeverityLevel,System.String,RightEdge.Common.Symbol,System.String,RightEdge.Common.SystemOutputLocation)">
            <summary>
            Adds an output line to be sent to the output pane.
            </summary>
            <param name="severityLevel">Assigned severity level.</param>
            <param name="errorMessage">Text containing the error or output message.</param>
            <param name="symbol">Assigned Symbol instance for this output line.</param>
            <param name="moduleName">Optional module name for this output line.</param>
            <param name="location">Specifies the output location.</param>
        </member>
        <member name="M:RightEdge.Common.OutputManager.Add(RightEdge.Common.SystemOutput)">
            <summary>
            Adds an output line to be sent to the output pane.
            </summary>
            <param name="systemOutput">A fully constructed SystemOutput instance.</param>
        </member>
        <member name="M:RightEdge.Common.OutputManager.Clear">
            <summary>
            Clears the output line list as well as the output pane in the user interface.
            </summary>
        </member>
        <member name="M:RightEdge.Common.OutputManager.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.OutputManager.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.OutputManager.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.OutputManager.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="E:RightEdge.Common.OutputManager.LogLineAdded">
            <summary>
            Subscribe to this event to receive a notification when a log line is added to the output pane.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OutputManager.OutputLines">
            <summary>
            Gets the collection of SystemOutput lines.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionInfo">
            <summary>
            Stores information about a position.
            </summary>
            <remarks>This class is mostly for internal use.  Trading systems should use the
            <see cref="T:RightEdge.Common.Position" /> class for more convenient position management.</remarks>
        </member>
        <member name="F:RightEdge.Common.PositionInfo.PositionType">
            <summary>
            The type of position (long or short).
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionInfo.Trades">
            <summary>
            The list of trades (orders that were filled) for this position.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionInfo.Tag">
            <summary>
            An object that can be used to store additional user-defined data related to the position.  Note that this field will not be saved between different live trading sessions.
            The <see cref="P:RightEdge.Common.PositionInfo.CustomString" /> field will be saved between sessions.
            </summary>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.#ctor">
            <summary>
            Creates a new position
            </summary>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetPositionTypeText(RightEdge.Common.PositionType)">
            <summary>
            Provides the textual representation of the PositionType enumeration.
            </summary>
            <param name="positionType">PositionType to return name for.</param>
            <returns>string representing the text of the PositionType enumeration.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.UpdateStats(RightEdge.Common.PositionStats,RightEdge.Common.TradeInfo)">
            <summary>
            Calculates modified position statistics after a trade.
            </summary>
            <param name="stats">The <see cref="T:RightEdge.Common.PositionStats" /> object representing
            the position statistics before the trade.</param>
            <param name="trade">An object representing the trade that took place</param>
            <returns>A new <see cref="T:RightEdge.Common.PositionStats" /> object corresponding to the position
            statistics after the trade has taken place.</returns>
        </member>
        <member name="F:RightEdge.Common.PositionInfo._stats">
            <summary>
            A list of <see cref="T:RightEdge.Common.PositionStats" /> objects corresponding to the statistics
            after each trade in <see cref="F:RightEdge.Common.PositionInfo.Trades" />.  Most code should use
            <see cref="P:RightEdge.Common.PositionInfo.StatList" /> instead.
            </summary>
            <remarks>
            This list might be null (if the position was serialized) or not up to date
            (if a new trade came in).  The <see cref="P:RightEdge.Common.PositionInfo.StatList" /> property will update
            this list when accessed.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetCloseStats(System.Double,System.DateTime,RightEdge.Common.IAccountInfo)">
            <summary>
            Calculates what the position statistics would be if the position was closed at a given price.
            </summary>
            <param name="price">The price for the position to be closed at.</param>
            <param name="time">The time to close the position at.</param>
            <param name="accountInfo">An object providing account information.</param>
            <returns>Position statistics representing what the statistics would be if the position was closed.</returns>
            <seealso cref="M:RightEdge.Common.PositionInfo.GetClosedPosition(System.Double,System.DateTime,RightEdge.Common.IAccountInfo)" />
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetClosedPosition(System.Double,System.DateTime,RightEdge.Common.IAccountInfo)">
            <summary>
            Returns a copy of the position with an additional trade to close the position.
            </summary>
            <param name="price">The price for the position to be closed at.</param>
            <param name="time">The time to close the position at.</param>
            <param name="accountInfo">An object providing account information.</param>
            <returns>A copy of the position with an additional trade to close the position.</returns>
            <seealso cref="M:RightEdge.Common.PositionInfo.GetCloseStats(System.Double,System.DateTime,RightEdge.Common.IAccountInfo)" />
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetRealizedProfitPct(RightEdge.Common.PositionStats)">
            <summary>
            Gets the percent profit for a position.
            </summary>
            <param name="stats">Position statistics to calculate the percent profit for.</param>
            <returns>The percent profit.</returns>
            <remarks>This value is calculated based on the realized profit for a position.  
            For an instrument with an initial margin (such as futures or forex), this
            will be the return on margin.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetUnrealizedProfit(RightEdge.Common.PositionStats,System.Double,RightEdge.Common.IAccountInfo)">
            <summary>
            Calculates the unrealized profit for a position.
            </summary>
            <param name="stats">The <see cref="T:RightEdge.Common.PositionStats" /> object corresponding to the
            most recent trade at the time you want to calculate the unrealized profit.</param>
            <param name="currentPrice">The current price of the instrument that is being traded.</param>
            <param name="accountInfo">An object which provides account information.</param>
            <returns>The unrealized profit.</returns>
            <remarks>
            The unrealized profit is the amount of profit that would be gained if the 
            position were to be closed at <see paramref="currentPrice" />.  However, this
            value does not take into account the commission that may be paid on the trade
            which closes the position.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetExposure(RightEdge.Common.PositionStats,RightEdge.Common.IAccountInfo)">
            <summary>
            Gets the exposure for this position.
            </summary>
            <param name="stats">The <see cref="T:RightEdge.Common.PositionStats" /> object corresponding to the
            most recent trade at the time you want to calculate the exposure.</param>
            <param name="accountInfo">Account information.</param>
            <returns>The exposure for the position.</returns>
            <remarks>
            <para>For a long position on a standard equity, the exposure is both the amount
            of money that it cost to open the position, and the maximum amount of money
            that could be lost from the position (if the stock loses all of its value).</para>
            <para>For short or leveraged positions, the risk/exposure may be theoretically
            infinite or may not correspond to the cost to open a position.  In any case,
            this function returns a value that corresponds to the cost to open the position.</para>
            <para>Note that this value does not include commissions.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetCurrentValue(RightEdge.Common.PositionStats,System.Double,RightEdge.Common.IAccountInfo)">
            <summary>
            Calculates the value of this position.
            </summary>
            <param name="stats">The <see cref="T:RightEdge.Common.PositionStats" /> object corresponding to the
            most recent trade at the time you want to calculate the value of this position.</param>
            <param name="currentPrice">The current price of the instrument that is being traded.</param>
            <param name="accountInfo">An object which provides account information.</param>
            <returns>The current value of this position.</returns>
            <remarks>
            The current value is effectively the amount that would be added to your account if
            the position were closed at <paramref name="currentPrice" />, not including commissions
            paid for the closing trade.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetTargetPrice(System.Double,RightEdge.Common.TargetPriceType,RightEdge.Common.TradeType)">
            <summary>
            Gets the price at which the position will hit a stop loss or profit target
            </summary>
            <param name="amount">The amount of the profit target or stop loss.  How this is interpreted depends on the <paramref name="targetType" /> parameter.</param>
            <param name="targetType">The type of profit target or stop loss.</param>
            <param name="tradeType">The trade type, which should be either <see cref="F:RightEdge.Common.TradeType.ProfitTarget" /> or <see cref="F:RightEdge.Common.TradeType.StopLoss" />.</param>
            <returns>The price at which the position will hit the profit target or stop loss.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.Clone">
            <summary>
            Creates a copy of this position.
            </summary>
            <returns>A copy of this position.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.ToString">
            <summary>
            Returns a string representation of this position.
            </summary>
            <returns>A string representation of this position.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private constructor used for deserialization
            </summary>
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionInfo.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionInfo.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionInfo.PosID">
            <summary>
            The unique ID for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.Symbol">
            <summary>
            The symbol this position was established for.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.Description">
            <summary>
            A description for the position.  This can be specified in the open position order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.BarsHeld">
            <summary>
            The number of bars the position has been or was open for.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.CustomString">
            <summary>
            A string that can be used to store additional user-defined data related to the position.  
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.StatList">
            <summary>
            A list of <see cref="T:RightEdge.Common.PositionStats" /> objects corresponding to the statistics
            after each trade in <see cref="F:RightEdge.Common.PositionInfo.Trades" />.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.CurrentStats">
            <summary>
            The <see cref="T:RightEdge.Common.PositionStats" /> object representing the current state of the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.EntryTransType">
            <summary>
            The <see cref="T:RightEdge.Common.TransactionType" /> used to open or add to this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.ExitTransType">
            <summary>
            The <see cref="T:RightEdge.Common.TransactionType" /> used to close this position or reduce its size.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.OpenDate">
            <summary>
            The date of the first trade for the position, or <see cref="F:System.DateTime.MaxValue" />
            if there are no trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionInfo.CloseDate">
            <summary>
            The date of the last trade for the position, or <see cref="F:System.DateTime.MaxValue" />
            if the position is not closed, or there are no trades.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionAction">
            <summary>
            Specifies the action to take when a position is overfilled.
            </summary>
            <seealso cref="P:RightEdge.Common.PositionManager.PositionOverfilledAction" />
        </member>
        <member name="F:RightEdge.Common.PositionAction.DoNothing">
            <summary>
            Take no special action.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionAction.ThrowException">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionAction.SendError">
            <summary>
            Send an error to the output pane.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionAction.SendWarning">
            <summary>
            Send a warning to the output pane.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionAction.CloseAtMarket">
            <summary>
            Submit a market order to close the position.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionOverfilledEventArgs">
            <summary>
            EventArgs class used when a position is overfilled.
            </summary>
            <seealso cref="E:RightEdge.Common.PositionManager.PositionOverfilled" />
        </member>
        <member name="P:RightEdge.Common.PositionOverfilledEventArgs.OverfilledPosition">
            <summary>
            The overfilled position
            </summary>
            <remarks>This is the position which the order was originally submitted for.</remarks>
        </member>
        <member name="P:RightEdge.Common.PositionOverfilledEventArgs.ExistingAffectedPositions">
            <summary>
            Existing positions which were affected by the overfill.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionOverfilledEventArgs.OpenedPosition">
            <summary>
            The newly opened position.
            </summary>
            <remarks>The position that was opened as a result of the order being filled.</remarks>
        </member>
        <member name="P:RightEdge.Common.PositionOverfilledEventArgs.Order">
            <summary>
            The order which was filled.
            </summary>
        </member>
        <member name="T:RightEdge.Common.OrderFilledEventArgs">
            <summary>
            EventArgs class used when an order is filled.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderFilledEventArgs.Trade">
            <summary>
            The trade that represents the filled order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderFilledEventArgs.Position">
            <summary>
            The Position to which the order applied.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderFilledEventArgs.BrokerPosition">
            <summary>
            The broker position for the corresponding symbol and direction.
            </summary>
            <remarks>The position manager allows you to have multiple open positions for a single symbol.
            The broker will treat all of them as a single position.  The BrokerPosition property represents
            the broker's view of your position.</remarks>
        </member>
        <member name="T:RightEdge.Common.OrderUpdatedEventArgs">
            <summary>
            EventArgs class used when an order is updated.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderUpdatedEventArgs.Position">
            <summary>
            The position to which the order applies.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderUpdatedEventArgs.Order">
            <summary>
            The order which was updated.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderUpdatedEventArgs.Information">
            <summary>
            Additional information sent by the broker.  For example, if the order was rejected, this property may tell why.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionManager">
            <summary>
            Manages positions and orders.
            </summary>
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetTradeTypeName(RightEdge.Common.TradeType)">
            <summary>
            Gets the name of this trade type.
            </summary>
            <param name="tradeType">TradeType name to retrieve. </param>
            <returns>string containing the name.</returns>
            <remarks>
            This is a textual representation of the TradeType enumeration.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.PositionManager._pendingPositions">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.PositionManager._openPositions">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.PositionManager._closedPosions">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.PositionManager._orderMap">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.PositionManager._pendingOrderCache">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.PositionManager._broker">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.PositionManager._systemData">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.#ctor">
            <summary>
            For serialization
            </summary>
        </member>
        <member name="M:RightEdge.Common.PositionManager.#ctor(RightEdge.Common.SystemData)">
            <summary>
            Constructs a new position manager.
            </summary>
            <param name="systemData">The SystemData object for this system.</param>
        </member>
        <member name="M:RightEdge.Common.PositionManager.#ctor(RightEdge.Common.SystemData,RightEdge.Common.IBroker)">
            <summary>
            Constructs a new position manager.
            </summary>
            <param name="systemData">The SystemData object for this system.</param>
            <param name="broker">A reference to a broker to use.</param>
        </member>
        <member name="M:RightEdge.Common.PositionManager.SetBroker(RightEdge.Common.IBroker)">
            <summary>
            Sets the broker that the position manager should use.
            </summary>
            <param name="broker">A reference to a broker to use.</param>
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetNextID">
            <summary>
            Gets a new unique identifier for use with a position.
            </summary>
            <returns>string representation of the unique identifier.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.InternalSubmitOrder(RightEdge.Common.Position,RightEdge.Common.Order,RightEdge.Common.PositionManager.TradeOrder,RightEdge.Common.BrokerOrder)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.InternalCancelOrder(System.String)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetPositionData(System.String)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetPositionData(System.String,RightEdge.Common.PositionState@)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetPosition(System.String)">
            <summary>
            Gets the position with the specified ID.
            </summary>
            <param name="id">The ID of the position to return</param>
            <returns>The position with the specified ID, or null if it was not found.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetProfitTarget(System.String)">
            <summary>
            Returns the profit target for a position.
            </summary>
            <param name="id">The ID of the position.</param>
            <returns>The profit target for the position.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetStopLoss(System.String)">
            <summary>
            Returns the stop loss for a position.
            </summary>
            <param name="id">The ID of the position.</param>
            <returns>The stop loss for the position.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.SetOpenPositions(RightEdge.Common.Internal.PortfolioXml)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetPendingPositions">
            <summary>
            Gets a list of pending positions.
            </summary>
            <returns>A list of the currently pending positions</returns>
            <remarks>Pending positions are positions that have been submitted to the broker
            but have not yet been filled or rejected.</remarks>
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetOpenPositions">
            <summary>
            Gets a list of open positions for all symbols.
            </summary>
            <returns>A list of the currently open positions</returns>
            <remarks>This version of GetOpenPositions returns a list of open positions across all symbols.</remarks>
            <example>
            The following code example demonstrates how to retrieve all open positions for the specified symbol.
            <code lang="C#">
            public override void NewSymbolBar(Symbol symbol, BarData bar)
            {
                // Get all open positions regardless of symbol
                IList&lt;Position&gt; openPositions = PositionManager.GetOpenPositions();
            
                // Check to see if we have any open positions for this symbol.
                if (openPositions.Count &gt; 0)
                {
                    // Do desired actions when there are positions open
                }
            }
            </code>
            <code lang="VB" title="Visual Basic.Net">
            Public Overloads Overrides Sub NewSymbolBar(ByVal symbol As Symbol, ByVal bar As BarData) 
                ' Get all open positions regardless of symbol 
                Dim openPositions As IList(Of Position) = PositionManager.GetOpenPositions() 
            
                ' Check to see if we have any open positions for this symbol.
                If openPositions.Count &gt; 0 Then 
                    ' Do specified actions when there are positions open
                End If 
            End Sub 
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetClosedPositions">
            <summary>
            Gets a list of closed positions.
            </summary>
            <returns>A list of positions that have been closed.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetPendingPositions(RightEdge.Common.Symbol)">
            <summary>
            Gets a list of pending positions for the specified symbol
            </summary>
            <param name="symbol">A symbol to retrieve the pending positions for.</param>
            <returns>A list of pending positions for the specified symbol.</returns>
            <remarks>Pending positions are positions that have been submitted to the broker
            but have not yet been filled or rejected.</remarks>        
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetOpenPositions(RightEdge.Common.Symbol)">
            <summary>
            Gets a list of the currently open positions for a given symbol.
            </summary>
            <param name="symbol">A symbol to retrieve the open positions for.</param>
            <returns>A list of open positions for the specified symbol.</returns>
            <example>
            The following code example demonstrates how to retrieve all open positions for the specified symbol.
            <code lang="C#">
            public override void NewSymbolBar(Symbol symbol, BarData bar)
            {
                // Get all open positions for this symbol
                IList&lt;Position&gt; openPositions = PositionManager.GetOpenPositions(symbol);
            
                // Check to see if we have any open positions for this symbol.
                if (openPositions.Count &gt; 0)
                {
                    // Do desired actions when there are positions open
                }
            }
            </code>
            <code lang="VB" title="Visual Basic.Net">
            Public Overloads Overrides Sub NewSymbolBar(ByVal symbol As Symbol, ByVal bar As BarData) 
                ' Get all open positions for this symbol 
                Dim openPositions As IList(Of Position) = PositionManager.GetOpenPositions(symbol) 
            
                ' Check to see if we have any open positions for this symbol.
                If openPositions.Count &gt; 0 Then 
                    ' Do specified actions when there are positions open
                End If 
            End Sub 
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.PositionManager.CloseAllPositions(RightEdge.Common.Symbol)">
            <summary>
            Closes all open positions for the specified symbol.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.Symbol">Symbol</see> instance.</param>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether the positions could be closed.</returns>
            <example>
            The following code example demonstrates how to close all open positions if the number of open positions exceeds 2.
            <code lang="C#">
            public override void NewSymbolBar(Symbol symbol, BarData bar)
            {
                // Get all open positions for this symbol
                IList&lt;Position&gt; openPositions = PositionManager.GetOpenPositions(symbol);
            
                // Check to see if we have more than 2 open positions.  If so, that's too
                // much exposure and we'd like to close them all.
                if (openPositions.Count &gt; 2)
                {
                    // Exit out of all positions for this symbol.
                    CloseAllPositions(symbol);
                }
            }
            </code>
            <code lang="VB" title="Visual Basic.Net">
            Public Overloads Overrides Sub NewSymbolBar(ByVal symbol As Symbol, ByVal bar As BarData) 
                ' Get all open positions for this symbol 
                Dim openPositions As IList(Of Position) = PositionManager.GetOpenPositions(symbol) 
            
                ' Check to see if we have more than 2 open positions. If so, that's too 
                ' much exposure and we'd like to close them all. 
                If openPositions.Count &gt; 2 Then 
                    ' Exit out of all positions for this symbol. 
                    CloseAllPositions(symbol) 
                End If 
            End Sub 
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.PositionManager.CloseAllPositions">
            <summary>
            Indiscriminately closes all open positions
            </summary>
            <remarks>
            This will close <b>all</b> positions regardless of any factor.  Use this with caution.
            </remarks>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether the positions could be closed.</returns>
            <example>
            This example closes all positions regardless of symbol when a condition is triggered.
            <code lang="C#">
            public override void NewSymbolBar(Symbol symbol, BarData bar)
            {
                // Get all open positions regardless of symbol
                IList&lt;Position&gt; openPositions = PositionManager.GetOpenPositions();
            
                // Check to see if we have more than 10 positions open
                if (openPositions.Count &gt; 10)
                {
                    // Close all positions, we have too much exposure.
                    PositionManager.CloseAllPositions();
                }
            }
            </code>
            <code lang="VB" title="Visual Basic.Net">
            Public Overloads Overrides Sub NewSymbolBar(ByVal symbol As Symbol, ByVal bar As BarData) 
                ' Get all open positions regardless of symbol
                Dim openPositions As IList(Of Position) = PositionManager.GetOpenPositions() 
            
                ' Check to see if we have more than 10 positions open.
                If openPositions.Count &gt; 10 Then 
                    ' Close all positions, we have too much exposure.
                    CloseAllPositions() 
                End If 
            End Sub 
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetPendingOrdersForPosition(System.String)">
            <summary>
            Gets the orders that are currently pending for a position.
            </summary>
            <param name="PosID">The ID of a position to retrieve the pending orders for</param>
            <returns>A list of pending orders for the position.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.CanOpenPosition(RightEdge.Common.Symbol)">
            <summary>
            Checks if a position can be opened based on the maximum number of open positions.
            </summary>
            <param name="symbol">The symbol to open a position for</param>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether a new position can be opened.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.OpenPosition(RightEdge.Common.Symbol,RightEdge.Common.PositionType,RightEdge.Common.OrderType,System.Double,System.Int64,System.String)">
            <summary>
            Submits an order to open a position.
            </summary>
            <param name="symbol">Symbol to open this position for.</param>
            <param name="positionType">The PositionType.  See the PositionType enumeration</param>
            <param name="orderType">The type of order.  See the OrderType enumeration</param>
            <param name="price">Limit or Stop price (if applicable).</param>
            <param name="size">The number of shares or contracts to establish this position with.  If this is
            zero, the position will be sized based on the settings in <see cref="P:RightEdge.Common.PositionManager.AllocationType" />,
            <see cref="P:RightEdge.Common.PositionManager.Allocation" />.</param>
            <param name="description">An optional user-defined description for the position.</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="T:RightEdge.Common.PositionState" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionManager.OpenPosition(RightEdge.Common.PositionSettings)">
            <summary>
            Submits an order to open a position.
            </summary>
            <param name="options">Position options specifying the parameters of the position to open</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="T:RightEdge.Common.PositionState" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionManager.AddToPosition(System.String,System.Int64,RightEdge.Common.OrderType,System.Double,System.String)">
            <summary>
            Submits an order to add the specified number of shares or contracts to an existing position.
            </summary>
            <param name="PosID">The existing position's unique identifier.</param>
            <param name="shares">Number of shares or contracts to add to an existing position.</param>
            <param name="orderType">The type of order.  See the OrderType enumeration</param>
            <param name="price">Limit or Stop price, if applicable</param>
            <param name="description">User-defined description for the trade.</param>
            <returns>An <see cref="T:RightEdge.Common.Order" /> object representing the order that was submitted.</returns>
            <remarks>If there is an error which prevents the order from being submitted, then the Error property of the
            returned object will contain the error message.  If the order was successfully submitted, the Error property
            will be null.</remarks>
            <seealso cref="M:RightEdge.Common.PositionManager.SubmitOrder(System.String,RightEdge.Common.OrderSettings)" />
        </member>
        <member name="M:RightEdge.Common.PositionManager.RemoveFromPosition(System.String,System.Int64,RightEdge.Common.OrderType,System.Double,System.String)">
            <summary>
            Submits an order to removes the specified number of shares or contracts from an existing position.
            </summary>
            <param name="PosID">The existing position's unique identifier.</param>
            <param name="shares">Number of shares or contracts to remove from an existing position.</param>
            <param name="orderType">The type of order.  See the OrderType enumeration</param>
            <param name="price">Limit or Stop price, if applicable</param>
            <param name="description">User-defined description for the trade.</param>
            <returns>An <see cref="T:RightEdge.Common.Order" /> object representing the order that was submitted.</returns>
            <remarks>If there is an error which prevents the order from being submitted, then the Error property of the
            returned object will contain the error message.  If the order was successfully submitted, the Error property
            will be null.</remarks>
            <seealso cref="M:RightEdge.Common.PositionManager.SubmitOrder(System.String,RightEdge.Common.OrderSettings)" />
        </member>
        <member name="M:RightEdge.Common.PositionManager.SubmitOrder(System.String,RightEdge.Common.OrderSettings)">
            <summary>
            Submits an order to modify an open position.
            </summary>
            <param name="PosID">The ID of the open position.</param>
            <param name="orderSettings">An OrderSettings object which contains information about the order to be submitted.</param>
            <returns>An <see cref="T:RightEdge.Common.Order" /> object representing the order that was submitted.</returns>
            <remarks>If there is an error which prevents the order from being submitted, then the Error property of the
            returned object will contain the error message.  If the order was successfully submitted, the Error property
            will be null.</remarks>
        </member>
        <member name="M:RightEdge.Common.PositionManager.CancelOrder(System.String,System.String)">
            <summary>
            Cancels a pending order.
            </summary>
            <param name="PosID">The ID of the position with which the order is associated.</param>
            <param name="orderID">The ID of the order to cancel.</param>
            <returns>A ReturnCode indicating whether the operation succeeded.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.ClosePosition(System.String)">
            <summary>
            Closes a position with a market order.
            </summary>
            <param name="PosID">The ID of the position to close.</param>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether the order to close the position was successfully submitted.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.ClosePosition(System.String,System.String)">
            <summary>
            Closes a position with a market order.
            </summary>
            <param name="PosID">The ID of the position to close.</param>
            <param name="description">A description for the close position order.</param>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether the order to close the position was successfully submitted.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.SetProfitTarget(System.String,System.Double,RightEdge.Common.TargetPriceType)">
            <summary>
            Sets a profit target for the position with the specified ID.
            </summary>
            <param name="PosID">string containing the unique ID for this <see cref="T:RightEdge.Common.Position">Position</see></param>
            <param name="target">The profit target value.</param>
            <param name="targetType">The type of profit target.</param>
        </member>
        <member name="M:RightEdge.Common.PositionManager.SetStopLoss(System.String,System.Double,RightEdge.Common.TargetPriceType)">
            <summary>
            Sets a stop loss for the position with the specified ID.
            </summary>
            <param name="PosID">string containing the unique ID for this <see cref="T:RightEdge.Common.Position">Position</see></param>
            <param name="target">The stop loss value.</param>
            <param name="targetType">The stop loss type.</param>
        </member>
        <member name="M:RightEdge.Common.PositionManager.SetTrailingStop(System.String,System.Double,RightEdge.Common.TargetPriceType)">
            <summary>
            Sets a trailing stop for the position with the specified ID.
            </summary>
            <param name="PosID">string containing the unique ID for this <see cref="T:RightEdge.Common.Position">Position</see></param>
            <param name="trailingStop">The value for the trailing stop</param>
            <param name="trailingStopType">The trailing stop type.</param>
            <remarks>
            If the trailing stop type is set to <see cref="F:RightEdge.Common.TargetPriceType.RelativeRatio" />, the trailing stop is
            represented as a decimal.  A 5% trailing stop would be specified as 0.05.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionManager.SaveOpenPositions(System.String)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.LoadOpenPositions(System.String)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.OnOrderFilled(RightEdge.Common.BrokerOrder,RightEdge.Common.Fill,RightEdge.Common.PositionManager.PositionData,RightEdge.Common.PositionState,RightEdge.Common.PositionManager.TradeOrder)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.PositionOrderFilled(RightEdge.Common.PositionManager.PositionData,RightEdge.Common.PositionState,RightEdge.Common.BrokerOrder,RightEdge.Common.Fill,RightEdge.Common.TradeType,System.String,System.Boolean)">
            <summary>
            Processes a fill for a position.
            </summary>
            <param name="pos">The position to which the fill applies.</param>
            <param name="posState">The state of the position.</param>
            <param name="order">The order which was filled.</param>
            <param name="fill">Information on the fill.</param>
            <param name="tradeType">The type of the trade that was filled.</param>
            <param name="description">A user-definable descrsiption.</param>
            <param name="sendUpdate">Indicates whether the OrderFilled event should be raised</param>
        </member>
        <member name="M:RightEdge.Common.PositionManager.OrderCancelled(RightEdge.Common.BrokerOrder,RightEdge.Common.PositionManager.PositionData,RightEdge.Common.PositionState,RightEdge.Common.PositionManager.TradeOrder,System.String)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.UpdateSpecialOrders(RightEdge.Common.PositionManager.PositionData)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.UpdateSpecialOrder(RightEdge.Common.PositionManager.PositionData,RightEdge.Common.TradeType)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.CreateSpecialOrder(RightEdge.Common.PositionManager.PositionData,RightEdge.Common.TradeType)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.GetSpecialOrderDesc(RightEdge.Common.TradeType)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionOverfilledAction">
            <summary>
            Specifies the action to take when a position is overfilled.
            </summary>
            <remarks>
            <para>A position is considered overfilled when an order is filled which
            would result in the position reversing direction, or when an order is filled on a closed
            position.  If this occurs, it is probably the result of an exceptional situation or an
            error in your system.  This property lets you control what happens when a position
            overfill does occur.  The position manager can throw an exception, stopping system
            execution, report an error or warning to the output pane, place a market order to close
            the position, or do nothing at all.  The <see cref="E:RightEdge.Common.PositionManager.PositionOverfilled" /> event can also
            be used to add custom logic.</para>
            </remarks>
            <seealso cref="E:RightEdge.Common.PositionManager.PositionOverfilled" />
        </member>
        <member name="E:RightEdge.Common.PositionManager.PositionOverfilled">
            <summary>
            An event that is raised when a position is overfilled.
            </summary>
            <remarks>
            <para>A position is considered overfilled when an order is filled which
            would result in the position reversing direction, or when an order is filled on a closed
            position.  This event allows you to respond to this situation in your system code.  If a 
            handler for this event sets the <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />
            property of the <see cref="T:RightEdge.Common.PositionOverfilledEventArgs" /> to true, then the action specified
            in the <see cref="P:RightEdge.Common.PositionManager.PositionOverfilledAction" /> property will not be taken.</para>
            <para>The fill may be partially applied to several different positions.  It is first applied
            to the position that the order was originally submitted for (if that position is still open).  
            The remaining shares will then be applied to existing positions for the same direction and
            symbol.  If there are no such positions, or all of them are closed and shares still remain
            to be applied, then a new position will be created in the opposite direction, using whatever
            shares remain to be applied.</para>
            <para>An <see cref="E:RightEdge.Common.PositionManager.OrderFilled" /> event will be raised for each position that the fill is applied
            to.  However, the <see cref="E:RightEdge.Common.PositionManager.PositionOverfilled" /> event is raised before the corresponding
            <see cref="E:RightEdge.Common.PositionManager.OrderFilled" /> event(s).</para>
            </remarks>
            <see cref="P:RightEdge.Common.PositionManager.PositionOverfilledAction" />
        </member>
        <member name="E:RightEdge.Common.PositionManager.OrderSubmitted">
            <summary>
            Event raised when an order has been submitted.  This is nothing more than a notification
            that the broker received the order.
            </summary>
        </member>
        <member name="E:RightEdge.Common.PositionManager.OrderUpdated">
            <summary>
            Event raised when an order is updated (ie filled, canceled, etc.)
            </summary>
        </member>
        <member name="E:RightEdge.Common.PositionManager.OrderFilled">
            <summary>
            Event raised when an order is filled.
            </summary>
        </member>
        <member name="E:RightEdge.Common.PositionManager.SpecialOrderFailed">
            <summary>
            Event raised if there is an error submitting a profit target, stop loss, or trailing stop order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.BarCountExit">
            <summary>
            The default bar count exit value for positions, or zero for none.
            </summary>
            <remarks>
            This property specifies the number of bars after which a position should be automatically closed.
            This value can be set on a per-position basis with the <see cref="P:RightEdge.Common.PositionSettings.BarCountExit" />
            and <see cref="P:RightEdge.Common.Position.BarCountExit" /> properties.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionManager.ProfitTarget">
            <summary>
            The default profit target value for new positions.  How this is interpreted is controlled by the <see cref="P:RightEdge.Common.PositionManager.ProfitTargetType" /> property.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.ProfitTargetType">
            <summary>
            The default type of profit target to use for new positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.StopLoss">
            <summary>
            The default stop loss value for new positions.  How this is interpreted is controlled by the <see cref="P:RightEdge.Common.PositionManager.StopLossType" /> property.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.StopLossType">
            <summary>
            The default type of stop loss to use for new positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.ForceRoundLots">
            <summary>
            Get or set whether or not orders sent to the broker around rounded to the nearest 100 shares.
            </summary>
            <remarks>
            Note: If orders are rounded up, there may be insufficient capital to fill the order.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionManager.AllocationType">
            <summary>
            Specifies how position size should be determined (if not specified otherwise).
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.Allocation">
            <summary>
            Specifies the position size if not specified.  This may represent a percentage of account value, a fixed value,
            or a fixed number of shares depending on the value of <see cref="P:RightEdge.Common.PositionManager.AllocationType" />.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.MaxOpenPositions">
            <summary>
            Gets or sets the maximum number of open positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.MaxOpenPositionsPerSymbol">
            <summary>
            Gets or sets the maximum number of open positions per symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.RestrictOpenOrders">
            <summary>
            Specifies whether the Max Open Positions settings should limit the number of position open orders submitted.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.UpdateSpecialOrdersForPartialFills">
            <summary>
            Specifies whether the profit target and stop loss orders for a position should be resized when an order is partially filled.  The default value is true.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionManager.OrderSubmittedDelegate">
            <summary>
            Delegate used when an order is submitted to a broker.
            </summary>
            <param name="order">Order submitted.</param>
            <param name="orderId">Order Id created by the broker for this order.</param>
        </member>
        <member name="T:RightEdge.Common.PositionManager.TradeOrder">
            <summary>
            For internal use.  Stores information about an order that has been submitted for a position.
            </summary>
            <remarks>
            Systems should generally use the <see cref="T:RightEdge.Common.Order" /> class to access order information.  It
            is easier to use and provides access to information which is stored in both the TradeOrder
            and <see cref="T:RightEdge.Common.BrokerOrder" /> classes.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionManager.TradeOrder.#ctor">
            <summary>
            Constructs a new TradeOrder object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.PositionManager.TradeOrder.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.TradeOrder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.TradeOrder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.TradeOrder.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.TradeOrder.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.TradeOrder.OrderID">
            <summary>
            The id of the corresponding <see cref="T:RightEdge.Common.BrokerOrder" />.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.TradeOrder.PosID">
            <summary>
            The id of the corresponding <see cref="T:RightEdge.Common.Position" />.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.TradeOrder.TradeType">
            <summary>
            The type of trade.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.TradeOrder.Description">
            <summary>
            A user-definable description for the trade.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.TradeOrder.Error">
            <summary>
            Error information for the order.  This will be null if the order was
            successfully submitted.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.TradeOrder.BarsValid">
            <summary>
            The number of bars after which the order will be cancelled if it has not been filled.
            </summary>
            <remarks>
            If this number is negative, the order is valid until manually cancelled or until the position is closed.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionManager.TradeOrder.CountdownStarted">
            <summary>
            Indicates that BarsValid should decrease when a NewBar is received
            </summary>
            <remarks>
            The default value for BarsValid is 1.  When running a simulation, orders submitted in order updated
            event handlers won't be processed in the paper broker the same bar they are submitted.  However, when
            the bar completes, the position manager would normally decrement the BarsValid property and then cancel
            the orders.  To prevent this, it will only do this if the CountdownStarted property is true, and this
            property will be set to true on all pending orders immediately after the system's NewBar is called
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionManager.TradeOrder.CancelPending">
            <summary>
            Indicates that a cancel request for this order has been sent to the broker.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionManager.TradeOrderAndOrder">
            <summary>
            Stores an <see cref="F:RightEdge.Common.PositionManager.TradeOrderAndOrder.Order" /> along with a <see cref="F:RightEdge.Common.PositionManager.TradeOrderAndOrder.TradeOrder" />.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionManager.TradeOrderAndOrder.TradeOrder">
            <summary>
            A TradeOrder.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionManager.TradeOrderAndOrder.Order">
            <summary>
            An Order.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionManager.PositionData">
            <summary>
            Stores information about a position for the position manager.
            </summary>
            <remarks>
            This class includes a <see cref="T:RightEdge.Common.Position" />, which is the external
            representation of a position, as well as information that the position manager needs
            to keep track of, such as the pending orders for a position, profit targets/stop losses,
            and the time to expiration.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.PositionManager.PositionData.#ctor">
            <summary>
            Constructs a new PositionData object.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionManager.PositionData.PendingOrders">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.PositionData.ToString">
            <summary>
            Returns a string representation of this position.
            </summary>
            <returns>A string representation of this position.</returns>
        </member>
        <member name="M:RightEdge.Common.PositionManager.PositionData.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.PositionManager.PositionData.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.PositionInfo">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.PosID">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.Symbol">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.PositionType">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.Trades">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.Error">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.ProfitTarget">
            <summary>
            The profit target for the position.
            </summary>
            <remarks>This value may represent a fixed price or a percentage gain, depending on the
            value of the <see cref="P:RightEdge.Common.PositionManager.PositionData.ProfitTargetType" /> property.  To change the profit target,
            use the <see cref="M:RightEdge.Common.PositionManager.SetProfitTarget(System.String,System.Double,RightEdge.Common.TargetPriceType)" /> method.</remarks>
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.ProfitTargetType">
            <summary>
            The type of profit target for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.StopLoss">
            <summary>
            The stop loss for the position.
            </summary>
            <remarks>This value may represent a fixed price or a percentage loss, depending on the
            value of the <see cref="P:RightEdge.Common.PositionManager.PositionData.StopLossType" /> property.  To change the stop loss,
            use the <see cref="M:RightEdge.Common.PositionManager.SetStopLoss(System.String,System.Double,RightEdge.Common.TargetPriceType)" /> method.</remarks>
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.StopLossType">
            <summary>
            The type of stop loss for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.TrailingStop">
            <summary>
            Gets the current trailing stop for this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.TrailingStopType">
            <summary>
            Indicates whether the trailing stop is specified as a percentage or a fixed price offset for a trailing stop order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionManager.PositionData.BarCountExit">
            <summary>
            The number of bars before this position will be closed automatically.
            If this value is less than zero, the position will not be automatically closed.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionStats">
            <summary>
            Provides access to various position-related statistics.
            </summary>
            <remarks>
            There are other statistics which can be retrieved by calling
            various functions in the <see cref="T:RightEdge.Common.Position" />
            class.
            </remarks>
            <seealso cref="M:RightEdge.Common.PositionInfo.GetUnrealizedProfit(RightEdge.Common.PositionStats,System.Double,RightEdge.Common.IAccountInfo)" />
            <seealso cref="M:RightEdge.Common.PositionInfo.GetExposure(RightEdge.Common.PositionStats,RightEdge.Common.IAccountInfo)" />
            <seealso cref="M:RightEdge.Common.PositionInfo.GetCurrentValue(RightEdge.Common.PositionStats,System.Double,RightEdge.Common.IAccountInfo)" />
        </member>
        <member name="P:RightEdge.Common.PositionStats.CurrentSize">
            <summary>
            The current size (in shares or contracts) of a position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionStats.MaxSize">
            <summary>
            The maximum size of a position.
            </summary>
            <remarks>
            Positions can be resized.  This value is the largest size a position achieved.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionStats.GrossSize">
            <summary>
            The gross size of a position.
            </summary>
            <remarks>
            This value is the total number of shares or contracts bought (for a long position),
            or shorted (for a short position).  It may be larger than the <see cref="P:RightEdge.Common.PositionStats.MaxSize" />.
            For example, if a position was opened with 200 shares, 100 shares were sold, and then
            100 more shares were bought, the <see cref="P:RightEdge.Common.PositionStats.MaxSize" /> would be 200, but the
            gross size would be 300.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionStats.GrossEntryPrice">
            <summary>
            The position gross entry price, as a weighted average.
            </summary>
            <remarks>
            This is the average price of all the trades which added to the
            position, weighted by the size of each trade.
            </remarks>
            <seealso cref="P:RightEdge.Common.PositionStats.EntryPrice" />
        </member>
        <member name="P:RightEdge.Common.PositionStats.ExitPrice">
            <summary>
            The position exit price, as a weighted average.
            </summary>
            <remarks>
            This is the average price of all the trades which decreased the position
            size, weighted by the size of each trade.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionStats.EntryPrice">
            <summary>
            The weighted average of the entry price for the shares or contracts that
            currently make up this position.
            </summary>
            <remarks>
            <para>This value is the average price per share or contract for the shares or
            contracts that currently make up the position.  If the position is closed,
            this value will be zero.</para>
            <para>This value differs from the <see cref="P:RightEdge.Common.PositionStats.GrossEntryPrice" /> in that
            trades which reduce the position size can have an effect on this value.
            For example, consider a position where 200 shares are bought for $10 each.
            Then, 100 shares are sold at $11 each.  Finally, 100 shares are bought at
            $12 each.  In this case, the gross entry price would be $10.67, while the
            entry price would be $11.00.
            </para>
            </remarks>
            <seealso cref="P:RightEdge.Common.PositionStats.GrossEntryPrice" />
        </member>
        <member name="P:RightEdge.Common.PositionStats.RealizedProfit">
            <summary>
            The realized profit for this position.
            </summary>
            <remarks>
            This value can be negative to indicate a loss.  This value takes the
            commission paid into account, so it will generally be negative on a
            position which was just opened.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionStats.Commission">
            <summary>
            The commission costs paid so far for a position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionStats.Interest">
            <summary>
            The amount of interest earned or paid on this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionStats.RealizedEntryPrice">
            <summary>
            The weighted average of the entry price on the portion of this position which has been exited.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionUpdate">
            <summary>
            This class contains information about an updated position that is returned
            from a broker.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.Symbol">
            <summary>
            <see cref="T:RightEdge.Common.Symbol">Symbol</see> contained within this Position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.AssetType">
            <summary>
            <see cref="T:RightEdge.Common.AssetClass">AssetClass enumeration setting for this update.</see>
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.Expiration">
            <summary>
            Expiration date.
            </summary>
            <remarks>
            Set to DateTime.MinValue if not used.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.Call">
            <summary>
            True if this is a call option contract, false if it's a put.
            </summary>
            <remarks>
            Only set if the AssetClass is an options asset type.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.Shares">
            <summary>
            Gets or sets the number of shares.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.CurrentPrice">
            <summary>
            Gets or sets the current price of the asset.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.AverageCost">
            <summary>
            Gets or sets the average cost, which is calculated by dividing the price + commissions by the quantity of the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.UnrealizedPnL">
            <summary>
            Gets or sets the cost of this position if it is currently open.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionUpdate.RealizedPnL">
            <summary>
            Gets or sets the actual profit or loss of this position.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ReturnCode">
            <summary>
            Contains information that indicates whether an operation succeeded or failed.  If the
            operation failed, contains information that indicates why.
            </summary>
            <remarks>
            This class can be used as the return type of a method which may succeed or fail.  For a method
            that returns a value on success, use the <see cref="T:RightEdge.Common.ReturnValue`1" /> class.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.ReturnCode._failureMessage">
            <summary>
            A message which describes the reason the operation failed.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ReturnCode._innerFailure">
            <summary>
            The failure code of the inner operation that failed.
            </summary>
            <remarks>
            This can be used to create a "stack trace" of failures.  For example, operation A
            failed because operation B failed because operation C failed.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.ReturnCode._exception">
            <summary>
            An exception that caused the operation to fail.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ReturnCode.ThrowFailure">
            <summary>
            Throws an exception if <see cref="P:RightEdge.Common.ReturnCode.Success" /> is false.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ReturnCode.Fail(System.String)">
            <summary>
            Creates an unsuccessful ReturnCode.
            </summary>
            <param name="message">A message describing the reason for the failure.</param>
            <returns>An unsuccessful ReturnCode</returns>
        </member>
        <member name="M:RightEdge.Common.ReturnCode.Fail(System.String,RightEdge.Common.ReturnCode)">
            <summary>
            Creates an unsuccessful ReturnCode.
            </summary>
            <param name="message">A message describing the reason for the failure.</param>
            <param name="innerFailure">The ReturnCode for an inner operation that caused the failure.</param>
            <returns>An unsuccessful ReturnCode</returns>
        </member>
        <member name="M:RightEdge.Common.ReturnCode.Fail(System.String,System.Exception)">
            <summary>
            Creates an unsuccessful ReturnCode.
            </summary>
            <param name="message">A message describing the reason for the failure.</param>
            <param name="ex">An exception that caused the failure.</param>
            <returns>An unsuccessful ReturnCode</returns>
        </member>
        <member name="M:RightEdge.Common.ReturnCode.Fail(RightEdge.Common.ReturnCode)">
            <summary>
            Creates an unsuccessful ReturnCode.
            </summary>
            <param name="innerFailure">The ReturnCode for an inner operation that caused the failure.</param>
            <returns>An unsuccessful ReturnCode</returns>
        </member>
        <member name="M:RightEdge.Common.ReturnCode.Fail(System.Exception)">
            <summary>
            Creates an unsuccessful ReturnCode.
            </summary>
            <param name="ex">An exception that caused the failure.</param>
            <returns>An unsuccessful ReturnCode</returns>
        </member>
        <member name="P:RightEdge.Common.ReturnCode.Success">
            <summary>
            Indicates whether the operation was successful.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ReturnCode.Message">
            <summary>
            A message that describes why the operation failed.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ReturnCode.Succeed">
            <summary>
            Creates a successful ReturnCode.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ReturnValue`1">
            <summary>
            Allows a method to return a value if it was successful, or return
            failure information if the operation was not successful.
            </summary>
            <typeparam name="T">The type of the value to be returned.</typeparam>
            <remarks>
            <para>This class allows a method to return a value if it was successful, or return
            failure information if the operation was not successful.  If it was successful,
            the <see cref="P:RightEdge.Common.ReturnValue`1.Value" /> property will contain the return value.  If it was
            not successful, the <see cref="P:RightEdge.Common.ReturnValue`1.ReturnCode" /> property will contain information
            about the failure.  In this case, attempting to access the <see cref="P:RightEdge.Common.ReturnValue`1.Value" />
            will cause an exception to be thrown.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ReturnValue`1.op_Implicit(RightEdge.Common.ReturnValue{`0})~`0">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ReturnValue`1.op_Implicit(`0)~RightEdge.Common.ReturnValue{`0}">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ReturnValue`1.op_Implicit(RightEdge.Common.ReturnCode)~RightEdge.Common.ReturnValue{`0}">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ReturnValue`1.#ctor(`0)">
            <summary>
            Creates a successful ReturnValue.
            </summary>
            <param name="val">The value to be returned.</param>
        </member>
        <member name="M:RightEdge.Common.ReturnValue`1.#ctor(RightEdge.Common.ReturnCode)">
            <summary>
            Creates an unsuccessful ReturnValue
            </summary>
            <param name="innerFailure">The ReturnCode that indicates the reason for the failure.</param>
        </member>
        <member name="P:RightEdge.Common.ReturnValue`1.ReturnCode">
            <summary>
            Indicates whether the operation succeeded, and if not, includes failure information.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ReturnValue`1.Value">
            <summary>
            The result of the operation, if it was successful.  Accessing this property will
            throw an exception if the operation failed.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ReturnValue`1.Success">
            <summary>
            Indicates whether the operation succeeded or not.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SerializableDictionary`2">
            <summary>
            Generic serializable dictionary.
            </summary>
            <typeparam name="TKey">key type</typeparam>
            <typeparam name="TValue">value type</typeparam>
            <remarks>
            The Serializable Dictionary is used when a dictionary collection needs to be serialized.
            This is required if the dictionary is going to saved to disk via XML serialization or
            marshaled across app domains.  Typically a RightEdge system developer need not be
            concerned with the inner workings of this class as it behaves like a normal Dictionary
            collection.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SerializableDictionary`2.#ctor">
            <summary>
            SerializableDictionary constructor.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SerializableDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            SerializableDictionary constructor.
            </summary>
            <param name="other">key/value pair.</param>
        </member>
        <member name="M:RightEdge.Common.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Needed for deserialization
            </summary>
            <param name="info">SerializationInfo instance.</param>
            <param name="context">StreamingContext instance.</param>
        </member>
        <member name="M:RightEdge.Common.SerializableDictionary`2.GetSchema">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SerializationUtils">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SystemData">
            <summary>
            System class instance created by RightEdge.  All systems run within this context.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemData.SetBuyAndHoldSymbolWeight(RightEdge.Common.Symbol,System.Double)">
            <summary>
            Sets the allocation weight for a symbol for the buy and hold statistics
            </summary>
            <param name="symbol">The symbol to set the weight for</param>
            <param name="weight">The allocation weight for the symbol</param>
            <seealso cref="P:RightEdge.Common.SystemData.BuyAndHoldWeights" />
        </member>
        <member name="M:RightEdge.Common.SystemData.SetBuyAndHoldSymbolWeight(System.String,System.Double)">
            <summary>
            Sets the allocation weight for a symbol for the buy and hold statistics
            </summary>
            <param name="symbolName">The name of the symbol to set the weight for</param>
            <param name="weight">The allocation weight for the symbol</param>
            <seealso cref="P:RightEdge.Common.SystemData.BuyAndHoldWeights" />
        </member>
        <member name="M:RightEdge.Common.SystemData.GetPricePane(RightEdge.Common.Symbol)">
            <summary>
            Gets the price chart pane
            </summary>
            <param name="symbol">Symbol to get the price pane for.</param>
            <returns>Price ChartPane instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetVolumePane(RightEdge.Common.Symbol)">
            <summary>
            Gets the volume chart pane
            </summary>
            <param name="symbol">Symbol tog et the volume pane for.</param>
            <returns>Volume ChartPane instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetBarElementSeries(RightEdge.Common.Symbol,RightEdge.Common.BarElement,System.Boolean)">
            <summary>
            Gets a series of values corresponding to a specified bar element.
            </summary>
            <param name="symbol">A symbol to get values from.</param>
            <param name="barElement">The bar element to retrieve.</param>
            <param name="ignoreEmptyBars">Specifies whether the series should include items for empty bars or not.</param>
            <returns>A series containing the specified bar element for each bar for the specified symbol.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetAccountInfoForDate(System.DateTime)">
            <summary>
            Retrieves the <see cref="T:RightEdge.Common.IAccountInfo" /> instance for the specified date.
            </summary>
            <param name="date">DateTime to retrieve.</param>
            <returns>IAccountInfo instance, or a new instance if one doesn't already exist.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemData.#ctor">
            <summary>
            Constructs a SystemData object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetSymbolByName(System.String)">
            <summary>
            Gets a symbol with the specified name.  Throws an exception if there is no symbol with the specified name, or if there is more than one.
            </summary>
            <param name="name">The name of the symbol to return.</param>
            <returns>The Symbol with the specified name.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetBarConstruction(RightEdge.Common.Symbol)">
            <summary>
            Gets the <see cref="T:RightEdge.Common.BarConstructionType" /> associated with this symbol.
            </summary>
            <param name="symbol">The <see cref="T:RightEdge.Common.Symbol" /> object to query.</param>
            <returns><see cref="T:RightEdge.Common.BarConstructionType" /> associated with the input symbol.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetFrequency(RightEdge.Common.Symbol,RightEdge.Common.BarFrequency)">
            <summary>
            Gets the <see cref="T:RightEdge.Common.Frequency" /> object for a given symbol and bar length.
            </summary>
            <param name="symbol">The <see cref="T:RightEdge.Common.Symbol" />.</param>
            <param name="frequency"><see cref="T:RightEdge.Common.BarFrequency" /> representing the bar length desired.</param>
            <returns><see cref="T:RightEdge.Common.Frequency" /> object.</returns>
            <remarks>This overload takes a <see cref="T:RightEdge.Common.BarFrequency" /> parameter.  The time-based frequency plugin (<see cref="T:RightEdge.Common.TimeFrequency" /> will be used.</remarks>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetFrequency(RightEdge.Common.Symbol,System.TimeSpan)">
            <summary>
            Gets the <see cref="T:RightEdge.Common.Frequency" /> object for a given symbol and bar length.
            </summary>
            <param name="symbol">The <see cref="T:RightEdge.Common.Symbol" />.</param>
            <param name="barLength">TimeSpan representing the desired bar length.</param>
            <returns><see cref="T:RightEdge.Common.Frequency" /> object.</returns>
            <remarks>This overload takes a BarLength parameter.  The time-based frequency plugin (<see cref="T:RightEdge.Common.TimeFrequency" /> will be used.</remarks>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetFrequency(RightEdge.Common.Symbol,RightEdge.Common.FrequencyPlugin)">
            <summary>
            Gets the <see cref="T:RightEdge.Common.Frequency" /> object for a given symbol and frequency.
            </summary>
            <param name="symbol">The <see cref="T:RightEdge.Common.Symbol" />.</param>
            <param name="plugin"><see cref="T:RightEdge.Common.FrequencyPlugin" /> object which specifies the frequency to be returned.</param>
            <returns><see cref="T:RightEdge.Common.Frequency" /> object.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetCurrentPrice(RightEdge.Common.Symbol)">
            <summary>
            Gets the most recent price for a symbol.
            </summary>
            <param name="symbol">A symbol to get the last price for.</param>
            <returns>The most recent price for the specified symbol, or a failure.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private constructor used for deserialization
            </summary>
            <param name="info">SerializationInfo instance.</param>
            <param name="context">StreamingContext instance.</param>
        </member>
        <member name="M:RightEdge.Common.SystemData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemData.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemData.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemData.SystemHistory">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.BaseSystemHistory">BaseSystemHistory</see> class.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.StartingCapital">
            <summary>
            Gets the starting capital amount to be used for trading.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.CurrentCapital">
            <summary>
            Gets the current amount of available capital.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.CurrentEquity">
            <summary>
            Gets the current amount tied up in positions, long and short.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.CurrentValueShort">
            <summary>
            Gets the current amount tied up in short positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.CurrentValueLong">
            <summary>
            Gets the current amount tied up in long positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.AccountValue">
            <summary>
            Gets the current account value, which is current cash plus current equity.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.UseBrokerAccountBalance">
            <summary>
            Indicates that in live mode, the system should use account balance reported by the broker, instead of
            basing the account balance on the starting capital.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.AccountCurrency">
            <summary>
            Gets the currency type for the account.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.AppliesForexInterest">
            <summary>
            Indicates whether the account charges and pays interest on open forex positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.ForexRolloverTime">
            <summary>
            The time of day at which forex positions are rolled over and interest is charged.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.DataStartDate">
            <summary>
            Gets the date that the system or simulation began.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.TradeStartDate">
            <summary>
            Gets the date that trading starts.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.EndDate">
            <summary>
            Gets the end date of this system or simulation.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.CurrentDate">
            <summary>
            Gets the current date/time for the system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.Symbols">
            <summary>
            Gets a list of symbols that are associated with this system instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.IgnoreSystemWarnings">
            <summary>
            Gets or sets the system warnings flag.
            </summary>
            <remarks>
            System warnings are messages that RightEdge sends to the output pane when a non-critical error is encountered.
            Set this flag to true to turn off the notification or false to receive the warning notifications.  User generated
            messages to the output window will always be enabled and are not affected.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.SystemData.CreateTicksFromBars">
            <summary>
            Controls whether bars are broken into separate ticks for the Open, Low, High, and Close prices in a simulation.
            </summary>
            <remarks><para>If set to true (which is default), then each bar from the data store will be split up into 4 ticks
            for the Open, Low, High, and Close prices. These ticks will be processed separately, which means that if a position
            is filled on the open, the profit target or stop could be hit on the high or low (or close).</para>
            <para>If set to false, then the bar is not converted to ticks. It is processed all at once in the paper trader,
            and there is no opportunity to submit orders between the different bar prices.</para>
            </remarks>
        </member>
        <member name="P:RightEdge.Common.SystemData.AllowDuplicateBars">
            <summary>
            Specifies whether multiple bars with the same <see cref="!:BarData.BarEndTime" /> should be allowed for the system
            frequency.  If set to false, an exception will be thrown if they are encountered.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.EnableTradeOnClose">
            <summary>
            Enables trading on the bar close, via the <see cref="E:RightEdge.Common.SystemData.BarClosing" /> event.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.BuyAndHoldWeights">
            <summary>
            The symbol allocation weights to use for the buy and hold statistics.
            </summary>
            <remarks>
            If this dictionary is null or empty, then the buy and hold statistics will be calculated by evenly
            dividing the starting capital among the symbols.  Otherwise, the allocation ratio for each symbol will
            be the weight for that symbol divided by the sum of the weights for all the symbols.
            </remarks>
        </member>
        <member name="E:RightEdge.Common.SystemData.BarClosing">
            <summary>
            An event raised in simulation just before a bar closes, if the <see cref="P:RightEdge.Common.SystemData.EnableTradeOnClose" /> property is set to true.
            </summary>
            <remarks>
            You should be aware that using the <see cref="E:RightEdge.Common.SystemData.BarClosing" /> event may produce unrealistic results.
            This is because you are provided with the close price of the bar, but if you submit a market order
            it will be filled at the close price.  In real trading it is not possible to know the exact price at
            which you will be filled when you submit a market order, and it is not possible to know the exact
            close price until after trading has closed.
            </remarks>
            <seealso cref="P:RightEdge.Common.SystemData.EnableTradeOnClose" />
        </member>
        <member name="P:RightEdge.Common.SystemData.BarCollections">
            <summary>
            Gets or sets BarData list for the specified symbol.
            </summary>
            <remarks>This property is obsolete.  Use <see cref="P:RightEdge.Common.SystemData.SystemBars" /> instead.</remarks>
        </member>
        <member name="P:RightEdge.Common.SystemData.ChartPaneCollections">
            <summary>
            Gets a ChartPaneList.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.LiveMode">
            <summary>
            Indicates if the system is running in live mode.
            </summary>
            <remarks>
            This flag is set to true when a system is executing in a live
            state.  It is set to false when the system is in simulation
            (backtesting) mode.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.SystemData.BrokerConnected">
            <summary>
            Indicates whether the broker service is connected.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.DataConnected">
            <summary>
            Indicates whether the data service is connected.
            </summary>
        </member>
        <member name="E:RightEdge.Common.SystemData.ConnectionStateChanged">
            <summary>
            An event raised when the broker or data service is disconnected or reconnected.
            </summary>
            <remarks>You can use the <see cref="P:RightEdge.Common.SystemData.BrokerConnected" /> and <see cref="P:RightEdge.Common.SystemData.DataConnected" /> properties
            to determine which services are connected.</remarks>
        </member>
        <member name="P:RightEdge.Common.SystemData.InLeadBars">
            <summary>
            Indicates whether the system is currently processing lead bars.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.SystemStarted">
            <summary>
            Indicates whether the system has started running.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.Indicators">
            <summary>
            Gets the instance of the <see cref="T:RightEdge.Common.IndicatorCollections">IndicatorCollections</see> associated with this system run.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.IndicatorManager">
            <summary>
            The indicator manager for the system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.Triggers">
            <summary>
            Gets the <see cref="T:RightEdge.Common.TriggerManager">TriggerManager</see> instance associated with this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.Actions">
            <summary>
            Gets the <see cref="T:RightEdge.Common.ActionManager">ActionManager</see> instance associated with this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.SystemParameters">
            <summary>
            Gets the optimization parameters collection for this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.BarElementSeries">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemData.Bars">
            <summary>
            The list of bars for each symbol.
            </summary>
            <remarks>The empty bars are not included in these lists, so the indices
            for the different symbols will not necessarily match up.</remarks>
            <seealso cref="P:RightEdge.Common.SystemData.SystemBars" />
        </member>
        <member name="P:RightEdge.Common.SystemData.AccountInfo">
            <summary>
            Provides access to information about the account, such as the account currency, and interest and exchange rates.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.PositionManager">
            <summary>
            Gets the <see cref="P:RightEdge.Common.SystemData.PositionManager">PositionManager</see> instance for this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.Series">
            <summary>
            Gets the instance of the SeriesManager associated with this system run.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.ChartObjects">
            <summary>
            Gets the <see cref="T:RightEdge.Common.ChartObjectManager">ChartObjectManager</see> instance for this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.Output">
            <summary>
            Gets the <see cref="T:RightEdge.Common.OutputManager">OutputManager</see> instance for this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.SynchronizationContext">
            <summary>
            A synchronization context which allows you to run code in the system thread.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.SystemThread">
            <summary>
            The thread on which the system is running.  This can change when the system goes from processing the lead bars to live trading.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.TradingSystemProjectPath">
            <summary>
            The path for the RightEdge project file (.rep) for the currently running system
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.RunNumber">
            <summary>
            When running an optimization, the number of the current run within the optimization.  Otherwise, zero.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.SystemStatistics">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> class for both long and short statistics.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.LongStatistics">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> class for long statistics only.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.ShortStatistics">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> class for short statistics only.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.BuyAndHoldStatistics">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> class for the Buy and Hold only.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.CustomString">
            <summary>
            A user-definable string.  Can be used to pass data to the system from the command line or an optimization plugin, or from the trading system to a custom system results plugin.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemData.Broker">
            <summary>
            Gets or sets the broker interface associated with this running system.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartPaneList">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.BaseSystemHistory">
            <summary>
            BaseSystemHistory object.
            </summary>
            <remarks>
            BaseSystemHistory contains system wide settings and historical information
            about items that are known up to the current bar.  BaseSystemHistory holds
            the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> collections
            for long, short, long &amp; short and buy &amp; hold.  There are shortcuts provided
            in BaseSystem for frequently used items.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.#ctor">
            <summary>
            For serialization
            </summary>
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.#ctor(System.Double,RightEdge.Common.SystemData)">
            <summary>
            Constructs an instance of BaseSystemHistory.
            </summary>
            <remarks>
            System writers do not need to instantiate a copy of this object.  Use
            the instance that exists in <see cref="T:RightEdge.Common.SystemData">SystemData</see>.
            </remarks>
            <param name="startingCapital">Starting capital.</param>
            <param name="systemData">SystemData instance associated with this class.</param>
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.SetPositionManagerDelegates">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.SimNewBar(RightEdge.Common.NewBarEventArgs)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.GetFinalStatistics(RightEdge.Common.SystemStatistics)">
            <summary>
            Gets the final statistics
            </summary>
            <param name="statistics">SystemStatistics instance.</param>
            <returns>Final BarStatistic</returns>
            <remarks>
            GetFinalStatistics emulates a final bar.  For example, if a simulation
            ends and there are open positions, GetFinalStatistics will simulate
            a close of those positions so that final results can be calculated.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.GetOpenPositions">
            <summary>
            Retrieves a list of open positions.
            </summary>
            <returns>List containing open positions.</returns>
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for deserialization
            </summary>
            <param name="info">SerializationInfo instance.</param>
            <param name="context">StreamingContext instance.</param>
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BaseSystemHistory.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.StartingCapital">
            <summary>
            Gets or sets the starting capital to be used for trading
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.CurrentCapital">
            <summary>
            Gets the current amount of available capital.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.CurrentEquity">
            <summary>
            Gets the current amount tied up in positions, long and short.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.CurrentValueShort">
            <summary>
            Gets the current amount tied up in short positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.CurrentValueLong">
            <summary>
            Gets the current amount tied up in long positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.AccountValue">
            <summary>
            Gets the current account value.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.Broker">
            <summary>
            Gets or sets the broker interface associated with this running system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.BuyAndHoldPositions">
            <summary>
            Retrieves a list of buy and hold positions.
            </summary>
            <remarks>
            These positions are theoretical and are to be used for
            informational purposes only.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.SystemStatistics">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> class for both long and short statistics.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.LongStatistics">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> class for long statistics only.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.ShortStatistics">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> class for short statistics only.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.BuyAndHoldStatistics">
            <summary>
            Gets an instance of the <see cref="T:RightEdge.Common.SystemStatistics">SystemStatistics</see> class for the Buy and Hold only.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.PositionManager">
            <summary>
            Gets the <see cref="P:RightEdge.Common.SystemData.PositionManager">PositionManager</see> instance for this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BaseSystemHistory.ThrowIfMismatchBetweenBrokerAndStatistics">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ChartData">
            <summary>
            ChartData contains data specific to this chart instance.
            Each chart pane will contain its own ChartData.
            </summary>
            <remarks>
            Not to be constructed on its own, use the instance
            contained within <see cref="T:RightEdge.Common.ChartPane">ChartPane</see>.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ChartData.#ctor">
            <summary>
            Constructs a ChartData object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartData.SetBarText(RightEdge.Common.BarData,System.String)">
            <summary>
            Creates a text object at the specified bar.
            </summary>
            <param name="bar">Bar where the text begins.</param>
            <param name="text">String containing the text to draw.</param>
        </member>
        <member name="M:RightEdge.Common.ChartData.SetBarText(RightEdge.Common.BarData,System.String,System.Drawing.Font)">
            <summary>
            Creates a text object at the specified bar using the specified font.
            </summary>
            <param name="bar">Bar where the text begins.</param>
            <param name="text">String containing the text to draw.</param>
            <param name="font">Font instance to draw this text in.</param>
        </member>
        <member name="M:RightEdge.Common.ChartData.SetBarColor(RightEdge.Common.BarData,RightEdge.Common.BarData,System.Drawing.Color)">
            <summary>
            Sets the bar color for the specified start and end bars inclusively.
            </summary>
            <param name="barStart">BarData instance to start at.</param>
            <param name="barEnd">BarData instance to end at.</param>
            <param name="color">Color to draw the bar.</param>
        </member>
        <member name="M:RightEdge.Common.ChartData.SetBarBackgroundColor(RightEdge.Common.BarData,RightEdge.Common.BarData,System.Drawing.Color)">
            <summary>
            Sets the background color behind the bar for the specified start and end bars inclusively.
            </summary>
            <param name="barStart">BarData instance to start at.</param>
            <param name="barEnd">BarData instance to end at.</param>
            <param name="color">Color to draw the bar.</param>
        </member>
        <member name="P:RightEdge.Common.ChartData.ChartSeriesCollection">
            <summary>
            Gets or set the collection of series to be plotted on this chart
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartData.LinkedIndicators">
            <summary>
            Gets or sets the list of linked indicators.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartData.BackgroundColor">
            <summary>
            Gets or sets the default background color for this chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartData.BackgroundAttributes">
            <summary>
            Gets the background attributes for this chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartData.ForegroundAttributes">
            <summary>
            Gets the foreground attributes for this chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartData.TextAttributes">
            <summary>
            Gets the text attributes for this chart.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjectManager">
            <summary>
            Class that manages the list of chart objects.
            </summary>
            <remarks>
            There is an instance of this class created with
            every trading system.  This instance is global
            across all symbols.  <B>There is no need to create an instance of this.</B>
            Once a chart object is created,
            it must be added to one or many charts identified
            by their symbols.
            </remarks>
            <example>Add a ChartLine object to the ChartObjectManager (C#)
            <code>
            // Setup our X coordinates.
            DateTime startDate = DateTime.Now;
            DateTime lastWeek = startDate.AddDays(-7);
            
            // Create the line object
            ChartLine line = new ChartLine(new ChartPoint(startDate, 20.00), new ChartPoint(lastWeek, 25.00), Color.RoyalBlue, 3);
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, line);
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.#ctor(RightEdge.Common.SystemData)">
            <summary>
            Constructs a ChartObjectManager instance.
            </summary>
            <param name="baseSystem">A constructed BaseSystem object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.#ctor">
            <summary>
            Constructs a ChartObjectManager instance.
            This parameterless constructor is used for deserialization.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.SetSystemData(RightEdge.Common.SystemData)">
            <summary>
            Sets the <see cref="T:RightEdge.Common.SystemData">SystemData</see> instance used in this class.
            </summary>
            <param name="systemData"><see cref="T:RightEdge.Common.SystemData">SystemData</see> instance.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.Add(RightEdge.Common.Symbol,System.String,RightEdge.Common.ChartObjects.IChartObject)">
            <summary>
            Adds a ChartObject to the specified symbol using the specified name.
            This is useful for retrieving the created chart object at a later
            time.  Use the GetNamedChartObject function to retrieve the instance.
            </summary>
            <param name="symbol">Symbol to identify chart.</param>
            <param name="name">Friendly name given to this chart object.</param>
            <param name="chartObject">Instantiated ChartObject to add.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.Add(RightEdge.Common.Symbol,RightEdge.Common.ChartObjects.IChartObject)">
            <summary>
            Adds a ChartObject to the specified symbol's chart.
            </summary>
            <param name="symbol">Symbol to identify chart.</param>
            <param name="chartObject">Instantiated ChartObject to add.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.GetNamedChartObject(RightEdge.Common.Symbol,System.String)">
            <summary>
            Retrieves a friendly named chart object from the ChartObjectManager.
            </summary>
            <param name="symbol">Symbol for this chart object.</param>
            <param name="name">Friendly name of this chart object.</param>
            <returns>IChartObject instance if found, otherwise null or Nothing.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.GetChanges">
            <summary>
            Gets a list of chart objects that have changed for all symbols.
            </summary>
            <returns>Dictionary of chart object changes broken down by <see cref="T:RightEdge.Common.Symbol">Symbol</see>.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.ClearChanges">
            <summary>
            Marks all changes as received and clears the dirty flag.
            </summary>
            <remarks>
            This is used internally and should not be set by a system.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for deserialization
            </summary>
            <param name="info">SerializationInfo instance.</param>
            <param name="context">StreamingContext instance.</param>
            <remarks>
            User instances of this object should not use this constructor.  This is
            for serialization only.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ChartObjectManager.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.ChartObjectManager.Item(RightEdge.Common.Symbol)">
            <summary>
            Gets a list of ChartObjects for the specified Symbol.
            </summary>
            <param name="symbol">Symbol to retrieve the chart objects for.</param>
            <returns>List containing the chart objects.</returns>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartArchimedesSpiral">
             <summary>
             Archimedes Spiral
             </summary>
             <remarks>
             This Archimedes spiral is distinguished from the
             <see cref="T:RightEdge.Common.ChartObjects.ChartLogarithmicSpiral">logarithmic spiral</see>
             by the fact that successive turnings of the spiral have a constant
             separation distance, while in a logarithmic spiral these distances form a
             geometric progression.
             </remarks>
             <example>Create an Archimedes spiral programmatically (C#)
             <code>
             // Setup our X coordinates.
             DateTime startDate = DateTime.Now;
             DateTime lastWeek = startDate.AddDays(-7);
            
             // Create the Archimedes Spiral object
             ChartArchimedesSpiral spiral = new ChartArchimedesSpiral(new ChartPoint(startDate, 20.00), new ChartPoint(lastWeek, 25.00));
             
             // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
             ChartObjects.Add(symbol, spiral);
             </code>
             </example>
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartHyperbolicSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartLituusSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartLogarithmicSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartParabolicSpiral" />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartSpiralObjectBase">
            <summary>
            Base class for chart objects that utilizes spirals.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartObjectBase">
            <summary>
            The abstract base class that implements the
            IChartObject interface.  Derive all chart objects
            from this class.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.IChartObject">
            <summary>
            IChartObject interface.  Implement this interface to
            create your own chart objects.  It is recommended
            that you do this by deriving from ChartObjectBase.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetPoints(System.Collections.Generic.List{RightEdge.Common.ChartPoint})">
            <summary>
            Sets the number of points for this object.
            </summary>
            <param name="points">A list containing the points.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetWidth(System.Int32)">
            <summary>
            Sets the width of the pen line for this object.
            </summary>
            <param name="width">Positive integer that specifies the width.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color of the pen to draw this object.
            </summary>
            <param name="color">Specifies the color.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetAlpha(System.Byte)">
            <summary>
            Sets the alpha or transparency for this object.
            </summary>
            <param name="alpha">Alpha channel value, 0=transparent, 255=completely filled.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetDashStyle(System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Sets the dash style for this object.
            </summary>
            <param name="dashStyle">Standard dash style constant to set for this object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetDashPattern(System.Single[])">
            <summary>
            Sets a dash pattern for this object.
            </summary>
            <param name="pattern">Dash pattern</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetSmoothingMode(RightEdge.Common.ChartObjectSmoothingMode)">
            <summary>
            Sets the smoothing or drawing mode.  Default is faster, AntiAliased is aesthetically pleasing.
            </summary>
            <param name="smoothingMode">Smoothing mode constant.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetChartPane(System.String)">
            <summary>
            Set the pane to draw this object on.
            </summary>
            <param name="chartPaneName">Text containing the pane name.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetStartCap(RightEdge.Common.ChartObjects.ChartCap)">
            <summary>
            Sets the start cap parameter on this object.
            </summary>
            <param name="chartCap">Configured ChartCap object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.SetEndCap(RightEdge.Common.ChartObjects.ChartCap)">
            <summary>
            Sets the end cap parameter on this object.
            </summary>
            <param name="chartCap">Configured ChartCap object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.Refresh">
            <summary>
            Called to force a chart object to redraw itself.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetPoints">
            <summary>
            Retrieves the ChartPoint list.
            </summary>
            <returns>List containing the chart points.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetWidth">
            <summary>
            Retrieves the width of this object.
            </summary>
            <returns>Integer containing the width.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetColor">
            <summary>
            Retrieves the color value for this object.
            </summary>
            <returns>Color containing the color value.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetObjectId">
            <summary>
            Retrieves the unique identifier for this object.
            </summary>
            <returns>Guid representing the unique object identifier for this object.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetAlpha">
            <summary>
            Retrieves the alpha value for this object.
            </summary>
            <returns>Byte containing the alpha value.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetDashStyle">
            <summary>
            Retrieves the dash style for this object.
            </summary>
            <returns>DashStyle enum containing the dash style.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetDashPattern">
            <summary>
            Retrieves the dash pattern for this object.
            </summary>
            <returns>float array containing the dash pattern.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetSmoothingMode">
            <summary>
            Retrieves the smoothing mode for this object.
            </summary>
            <returns>ChartObjectSmoothingMode enum setting for this object.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetChartPane">
            <summary>
            Retrieves the chart pane name where this object resides.
            </summary>
            <returns>string containing the chart pane name.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetStartCap">
            <summary>
            Retrieves the ChartCap start for this chart object.
            </summary>
            <returns>ChartCap instance, can be null.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.IChartObject.GetEndCap">
            <summary>
            Retrieves the ChartCap end for this chart object.
            </summary>
            <returns>ChartCap instance, can be null.</returns>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.IChartObject.Locked">
            <summary>
            Specifies whether the user can modify the chart object on the chart.
            </summary>
        </member>
        <member name="E:RightEdge.Common.ChartObjects.IChartObject.ChartObjectChanged">
            <summary>
            Event called when a setting of a chart object has changed.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.points">
            <summary>
            Raw collection of chart points.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.width">
            <summary>
            Access to the raw with property.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.color">
            <summary>
            Access to the raw color property.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.alpha">
            <summary>
            Alpha setting this object.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.dashStyle">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.Refresh">
            <summary>
            Called to force a chart object to redraw itself.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.smoothingMode">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.pattern">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.chartPaneName">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.startCap">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartObjectBase.endCap">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetPoints(System.Collections.Generic.List{RightEdge.Common.ChartPoint})">
            <summary>
            Sets the number of points for this object.
            </summary>
            <param name="points">A list containing the points.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetWidth(System.Int32)">
            <summary>
            Sets the width of the pen line for this object.
            </summary>
            <param name="width">Positive integer that specifies the width.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetColor(System.Drawing.Color)">
            <summary>
            Sets the color of the pen to draw this object.
            </summary>
            <param name="color">Specifies the color.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetAlpha(System.Byte)">
            <summary>
            Sets the alpha or transparency for this object.
            </summary>
            <param name="alpha">Alpha channel value, 0=transparent, 255=completely filled.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetDashStyle(System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Sets the dash style for this object.
            </summary>
            <param name="dashStyle">Standard dash style constant to set for this object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetDashPattern(System.Single[])">
            <summary>
            Sets a dash pattern for this object.
            </summary>
            <param name="pattern">Dash pattern</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetSmoothingMode(RightEdge.Common.ChartObjectSmoothingMode)">
            <summary>
            Sets the smoothing or drawing mode.  Default is faster, AntiAliased is aesthetically pleasing.
            </summary>
            <param name="smoothingMode">Smoothing mode constant.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetChartPane(System.String)">
            <summary>
            Set the pane to draw this object on.
            </summary>
            <param name="chartPaneName">Text containing the pane name.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetStartCap(RightEdge.Common.ChartObjects.ChartCap)">
            <summary>
            Sets the start cap parameter on this object.
            </summary>
            <param name="chartCap">Configured ChartCap object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.SetEndCap(RightEdge.Common.ChartObjects.ChartCap)">
            <summary>
            Sets the end cap parameter on this object.
            </summary>
            <param name="chartCap">Configured ChartCap object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetPoints">
            <summary>
            Retrieves the ChartPoint list.
            </summary>
            <returns>List containing the chart points.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetWidth">
            <summary>
            Retrieves the width of this object.
            </summary>
            <returns>Integer containing the width.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetColor">
            <summary>
            Retrieves the color value for this object.
            </summary>
            <returns>Color containing the color value.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetAlpha">
            <summary>
            Retrieves the alpha value for this object.
            </summary>
            <returns>Byte containing the alpha value.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetDashStyle">
            <summary>
            Retrieves the dash style for this object.
            </summary>
            <returns>DashStyle enum containing the dash style.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetDashPattern">
            <summary>
            Retrieves the dash pattern for this object.
            </summary>
            <returns>float array containing the dash pattern.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetSmoothingMode">
            <summary>
            Retrieves the smoothing mode for this object.
            </summary>
            <returns>ChartObjectSmoothingMode enum setting for this object.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetChartPane">
            <summary>
            Retrieves the chart pane name where this object resides.
            </summary>
            <returns>string containing the chart pane name.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetObjectId">
            <summary>
            Retrieves the unique identifier for this object.
            </summary>
            <returns>Guid representing the unique object identifier for this object.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetStartCap">
            <summary>
            Retrieves the ChartCap start for this chart object.
            </summary>
            <returns>ChartCap instance, can be null.</returns>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartObjectBase.GetEndCap">
            <summary>
            Retrieves the ChartCap end for this chart object.
            </summary>
            <returns>ChartCap instance, can be null.</returns>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartObjectBase.Points">
            <summary>
            The raw collection of points for this object.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartObjectBase.Width">
            <summary>
            Gets or sets the outline width of this object.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartObjectBase.Color">
            <summary>
            Gets or sets the pen color of this object.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartObjectBase.Alpha">
            <summary>
            Gets or sets the tranparency level for this object.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartObjectBase.SmoothingMode">
            <summary>
            Gets or sets the smoothing mode.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartObjectBase.Locked">
            <summary>
            Specifies whether the user can modify the chart object on the chart.
            </summary>
        </member>
        <member name="E:RightEdge.Common.ChartObjects.ChartObjectBase.ChartObjectChanged">
            <summary>
            Event called when a setting of a chart object has changed.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartSpiralObjectBase.sweepAngle">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSpiralObjectBase.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs ChartSpiralObjectBase object
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral.</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the outer point of the spiral.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSpiralObjectBase.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Int32)">
            <summary>
            Constructs ChartSpiralObjectBase object with an option to specify the sweep angle
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral.</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the outer point of the spiral.</param>
            <param name="sweepAngle">Set the sweep angle.</param>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSpiralObjectBase.SweepAngle">
            <summary>
            Gets or sets the sweep angle.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartArchimedesSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartArchimedesSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartArchimedesSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Int32)">
            <summary>
            Constructs a ChartArchimedesSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
            <param name="sweepAngle">sweep angle value</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartArrowLine">
            <summary>
            A line with an arrow head.
            </summary>
            <remarks>
            This object is simply a line that can be drawn in any direction.  The end
            of the line has an arrow cap.  The line can be rotated so that the arrow
            points in any direction.
            </remarks>
            <example>Create an arrow line programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime startDate = DateTime.Now;
            DateTime lastWeek = startDate.AddDays(-7);
            
            // Create the arrow object
            ChartArrowLine arrowLine = new ChartArrowLine(new ChartPoint(startDate, 20.00), new ChartPoint(lastWeek, 25.00), Color.RoyalBlue, 3);
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, arrowLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartHorizontalLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartVerticalLine" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartArrowLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartArrowLine object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the arrow line.</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the arrow line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartArrowLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            ChartArrowLine constructor that allows for a line color to be specified.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the arrow line.</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the arrow line.</param>
            <param name="lineColor">Color of the line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartArrowLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color,System.Int32)">
            <summary>
            ChartArrowLine constructor that allows for a line color and width to be specified.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the arrow line.</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the arrow line.</param>
            <param name="lineColor">Color of the line.</param>
            <param name="width">Width of the line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartArrowLine.InitializeCaps">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartAsynChannelLRegression">
            <summary>
            An Asyn Linear Regression line.
            </summary>
            <remarks>
            A classic statistical problem is to try to determine the relationship between two random 
            variables.  The Linear Regression line displays the statistically predicted price value.
            </remarks>
            <example>Create an asyn linear regression line programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-21);
            DateTime rightPoint = DateTime.Now;
            
            // Create the asyn linear regression object with the default color.
            // Note, the price (Y) portion of the ChartPoint is not used.
            ChartAsynChannelLRegression lrAsynLine = new ChartAsynChannelLRegression(new ChartPoint(leftPoint, 20.00), new ChartPoint(rightPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, lrAsynLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLRegression" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLRegressionChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartOpenLRegression" />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartRegressionBase">
            <summary>
            Base class for chart objects that utilize linear regression calculations.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRegressionBase.#ctor">
            <summary>
            Default constructor for ChartRegressionBase
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRegressionBase.OpenStart">
            <summary>
            Gets or sets the OpenStart property.  Set this to try to extend the line to the beginning of the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRegressionBase.OpenEnd">
            <summary>
            Gets or sets the OpenEnd property.  Set this to try to extend the line to the end of the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRegressionBase.ShowAuxLine">
            <summary>
            Gets or sets the AuxLine drawing.  Set this to true to draw the vertical lines at either end of the channel.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRegressionBase.ShowUpLine">
            <summary>
            Get or set the up line property.  When true, the up line in the channel is drawn.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRegressionBase.ShowDownLine">
            <summary>
            Get or set the down line property.  When true, the down line in the channel is drawn.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRegressionBase.ShowCenterLine">
            <summary>
            Get or set the center line property.  When true, the center line in the channel is drawn.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRegressionBase.Percentage">
            <summary>
            Gets or sets the percentage of spacing between the channel lines.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartAsynChannelLRegression.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartLRegression object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the linear regression line.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the linear regression line.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartCap">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartCircle">
            <summary>
            Draw a filled or transparent circle on a chart.
            </summary>
            <example>Create a circle object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime startDate = DateTime.Now;
            DateTime lastWeek = startDate.AddDays(-7);
            
            // Create the circle object
            ChartCircle circle = new ChartCircle(new ChartPoint(lastWeek, 20.00), new ChartPoint(startDate, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, circle);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartEllipse" />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartFilledObjectBase">
            <summary>
            Base class for shapes that have "filled" characteristics
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartFilledObjectBase.Filled">
            <summary>
            Get or set the filled state.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartFilledObjectBase.FillColor">
            <summary>
            Gets or sets the fill color.  The Filled attribute must be set to True.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartFilledObjectBase.FillTransparency">
            <summary>
            Get or set the transparency level.  0 = completely transparent, 255 = completely filled.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartCircle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartCircle object.
            </summary>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the center point of the circle.</param>
            <param name="outerPoint">A non-empty, valid ChartPoint object that represents the outer point of the circle.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartCircle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            ChartCircle constructor that allows for a circle color to be specified.
            </summary>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the center point of the circle.</param>
            <param name="outerPoint">A non-empty, valid ChartPoint object that represents the outer point of the circle.</param>
            <param name="color">Color of the circle.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartCircle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color,System.Int32)">
            <summary>
            ChartCircle constructor that allows for a circle color and width to be specified.
            </summary>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the center point of the circle.</param>
            <param name="outerPoint">A non-empty, valid ChartPoint object that represents the outer point of the circle.</param>
            <param name="color">Color of the circle.</param>
            <param name="width">Width of the circle.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartCrossChannel">
            <summary>
            A line with several equidistant channel lines drawn from the base.
            </summary>
            <remarks>
            This object is a free form channel that does not take any
            chart data into consideration.  The anchor point (the first point)
            controls the direction of the channel lines.  The second and third
            points control the width of the channels in relation to one another.
            </remarks>
            <example>Create a cross channel object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime anchorPoint = DateTime.Now.AddDays(-14);
            DateTime channelPoints = DateTime.Today;
            
            // Create the cross channel object
            ChartCrossChannel channel = new ChartCrossChannel(new ChartPoint(anchorPoint, 25.00),
            												new ChartPoint(channelPoints, 30.00),
            												new ChartPoint(channelPoints, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, channel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartEqualChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartFibChannel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartCrossChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartCrossChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the anchor point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the upper channel point.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents the lower channel point.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartCrossChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Int32)">
            <summary>
            Constructs a ChartCrossChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the anchor point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the upper channel point.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents the lower channel point.</param>
            <param name="lineCount">Specifies the number of lines extending from each channel point.  The default is 2.</param>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartCrossChannel.LineCount">
            <summary>
            Get or set the number of lines extending from each channel point.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartCycleLineBase">
            <summary>
            Base class cycle line based objects.  Do not
            create an instance of this object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartCycleLineBase.#ctor">
            <summary>
            ChartCycleLineBase default constructor.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartCycleLineBase.MaxLines">
            <summary>
            Gets or sets the maximum lines.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartCycleLineBase.LineText">
            <summary>
            Gets or sets the line text.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartCycleLineBase.TextFont">
            <summary>
            Gets or sets the text font.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartCycleLineBase.TextColor">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartCycleLineBase.ShowText">
            <summary>
            Gets or sets the flag to show the cycle line text.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartCycleLineBase.TextAlignment">
            <summary>
            Gets or sets the line text alignment.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartCycleLineBase.LineAlignment">
            <summary>
            Gets or sets the text line alignment.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartDownTrendChannel">
            <summary>
            An object that draws channel lines based on the price values on the chart.
            </summary>
            <remarks>
            This object is not a free form channel.  It uses the
            price data on the chart to determine the direction of the lines.
            The first point is the left point.  The second point 
            specifies the right point of the channels.
            </remarks>
            <example>Create a downtrend channel object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-14);
            DateTime rightPoint = DateTime.Today;
            
            // Create the downtrend channel object
            ChartDownTrendChannel channel = new ChartDownTrendChannel(new ChartPoint(leftPoint, 25.00),
            												new ChartPoint(rightPoint, 25.00),
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, channel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdErrorChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpDownTrendChannel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartDownTrendChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartDownTrendChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the channel.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartEllipse">
            <summary>
            Draw a filled or transparent ellipse on a chart.
            </summary>
            <example>Create an ellipse object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime startDate = DateTime.Now;
            DateTime lastWeek = startDate.AddDays(-7);
            
            // Create the ellipse object
            ChartEllipse ellipse = new ChartEllipse(new ChartPoint(lastWeek, 20.00), new ChartPoint(startDate, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, ellipse);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartCircle" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartEllipse.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartEllipse object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the circle.</param>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the center point of the circle.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartEllipse.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            Construct a ChartEllipse object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the circle.</param>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the center point of the circle.</param>
            <param name="color">Color of the ellipse.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartEllipse.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color,System.Int32)">
            <summary>
            Construct a ChartEllipse object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the circle.</param>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the center point of the circle.</param>
            <param name="color">Color of the ellipse.</param>
            <param name="width">Width of the ellipse.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartEqualChannel">
            <summary>
            A line with several equidistant channel lines drawn.
            </summary>
            <remarks>
            This object is a free form channel that does not take any
            chart data into consideration.  The first point is the
            anchor point.  The second point controls the horizontal
            orientation of the channels.  The final point specifies
            the vertical span of the channels.
            </remarks>
            <example>Create an equal channel object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime anchorPoint = DateTime.Now.AddDays(-14);
            DateTime orientationPoint = DateTime.Today;
            
            // Create the equal channel object
            ChartEqualChannel channel = new ChartEqualChannel(new ChartPoint(anchorPoint, 25.00),
            												new ChartPoint(orientationPoint, 25.00),
            												new ChartPoint(orientationPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, channel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartCrossChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartFibChannel" />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartSplitObjectBase">
            What is a "split object"??  Explanation below.
            Derive your chart object from this when it
            supports "split" values such as a multi arc
            or fibonacci circle.  A "split" seems to indicate
            an additional circle or arc drawn from the base
            Ex: If I say I want a circle with a size of 10
            bars.  Then I add a "split" value of 0.5, an
            additional circle will be draw 5 bars out.  If
            I add another split with a value of 2, a circle
            will be drawn 20 bars out.  Split values
            cannot be negative.
            <summary>
            Base class for chart objects that use split values.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSplitObjectBase.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            ChartSplitObjectBase default constructor.
            </summary>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the center point of the object.</param>
            <param name="outerPoint">A non-empty, valid ChartPoint object that represents the outer point of the object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSplitObjectBase.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            ChartSplitObjectBase constructor for objects that require 3 points.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents point 1 of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents point 2 of the object.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents point 3 of the object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSplitObjectBase.AllocSplitValues(System.Int32)">
            <summary>
            Allocates space to store the split values.
            </summary>
            <param name="size">Size of the array.</param>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSplitObjectBase.SplitValues">
            <summary>
            Gets the split values
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSplitObjectBase.ValueCount">
            <summary>
            Gets the number of split values.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartEqualChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartEqualChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the anchor point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the upper channel point.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents the lower channel point.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartEqualCycleLine">
            <summary>
            Equal Cycle Line
            </summary>
            <remarks>
            Draws a set of lines that are the same distance from each other vertically.
            The distance is set by the initial two points.  For example, if the distance
            between point 1 and point 2 is 5, there will be lines drawn at position 0,
            5, 10, 15, 20, 25, etc.
            </remarks>
            <example>Create an equal cycle line object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point1 = DateTime.Now.AddDays(-5);
            DateTime point2 = DateTime.Now;
            
            // Create the equal cycle line object.
            ChartEqualCycleLine cycleLine = new ChartEqualCycleLine(new ChartPoint(point1, 25.00), new ChartPoint(point2, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, cycleLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartFibCycleLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartSquareCycleLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartSymmetryLine" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartEqualCycleLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            ChartEqualCycleLine default constructor.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the object.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartFan">
            <summary>
            Fan object
            </summary>
            <remarks>
            Draws three lines in a "fan" formation.  Point 1 is the anchor point.
            Point 2 dictates the top most fan line.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartFan.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartFan object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the fan</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the fan</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartFibChannel">
            <summary>
            An object that draws channel lines based on Fibonacci sequences.
            </summary>
            <remarks>
            This object is a free form channel that does not take any
            chart data into consideration.  The first point is the
            anchor point.  The second point controls the horizontal
            orientation of the channels.  The final point specifies
            the vertical span of the channels.  The channel lines are
            calculated using Fibonacci sequences.
            </remarks>
            <example>Create a fibonacci channel object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime anchorPoint = DateTime.Now.AddDays(-14);
            DateTime orientationPoint = DateTime.Today;
            
            // Create the fibonacci channel object
            ChartFibChannel channel = new ChartFibChannel(new ChartPoint(anchorPoint, 25.00),
            												new ChartPoint(orientationPoint, 25.00),
            												new ChartPoint(orientationPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, channel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartCrossChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartEqualChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdErrorChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartDownTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpDownTrendChannel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartFibChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartFibChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the anchor point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the upper channel point.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents the lower channel point.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartFibCircle">
            <summary>
            Fibonacci Circle object
            </summary>
            <remarks>
            Draws eleven lines in a circle formation from the anchor point.  Point 1 is the anchor point.
            Point 2 dictates the inner most circle.  Subsequent circles are plotted at
            significant fibonacci values.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartFibCircle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartFibCircle object.
            </summary>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the anchor point of the circle.</param>
            <param name="outerPoint">A non-empty, valid ChartPoint object that represents the inner most point of the circle.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartFibCycleLine">
            <summary>
            Fibonacci Cycle Line
            </summary>
            <example>Create a fibonacci cycle line object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point1 = DateTime.Now.AddDays(-21);
            
            // Create the fibonacci cycle line object.
            ChartFibCycleLine cycleLine = new ChartFibCycleLine(new ChartPoint(point1, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, cycleLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartEqualCycleLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartSquareCycleLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartSymmetryLine" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartFibCycleLine.#ctor(RightEdge.Common.ChartPoint)">
            <summary>
            ChartFibCycleLine default constructor.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the left point of the object.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartFibFan">
            <summary>
            Fibonacci Fan object
            </summary>
            <remarks>
            Draws six lines in a "fan" formation from the anchor point.  Point 1 is the anchor point.
            Point 2 dictates the top most fan line.  Subsequent lines of the fan are plotted at
            significant fibonacci values.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartFibFan.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartFibFan object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the fan</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the fan</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartFibLine">
            <summary>
            Fibonacci Line or Fibonacci Levels
            </summary>
            <remarks>
            Fibonacci was an Italian mathematician born in the 12th century.  He is known to have discovered the "Fibonacci numbers," which are a sequence of numbers where each successive number is the sum of the two previous numbers. 
            <para>
            e.g. 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, etc. 
            </para>
            These levels are created by drawing a trendline between two extreme points and then dividing the vertical distance by the key Fibonacci ratios of 23.6%, 38.2%, 50%, 61.8% and 100%.
            </remarks>
            <example>Create Fibonacci Levels (Lines) programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-21);
            DateTime rightPoint = DateTime.Now;
            
            // Create the fib line object.
            ChartFibLine fibLine = new ChartFibLine(new ChartPoint(leftPoint, 25.00), new ChartPoint(rightPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, fibLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartPercentLine" />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartSplitObjectFont">
            <summary>
            Base class for chart objects that use split values and manipulate fonts.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSplitObjectFont.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            ChartSplitObjectFont default constructor.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSplitObjectFont.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.String)">
            <summary>
            ChartSplitObjectFont default constructor.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the object.</param>
            <param name="text">Specifies the text for this object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSplitObjectFont.Initialize">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSplitObjectFont.LineText">
            <summary>
            Gets or sets the line text.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSplitObjectFont.TextAlignment">
            <summary>
            Gets or sets the line text alignment.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSplitObjectFont.OpenStart">
            <summary>
            Gets or sets the OpenStart property.  Set this to try to extend the line to the beginning of the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSplitObjectFont.OpenEnd">
            <summary>
            Gets or sets the OpenEnd property.  Set this to try to extend the line to the end of the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSplitObjectFont.TextFont">
            <summary>
            Gets or sets the font used for this object's text.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartFibLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            ChartFibLine default constructor.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the object.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartHorizontalLine">
            <summary>
            A horizontal line.
            </summary>
            <remarks>
            This object is a horizontal line that can be moved vertically.
            </remarks>
            <example>Create a horizontal line programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime lastWeek = startDate.AddDays(-7);
            
            // Create the horizontal line object draw at last week's bar
            ChartHorizontalLine line = new ChartHorizontalLine(new ChartPoint(lastWeek, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, line);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartArrowLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartVerticalLine" />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartSingleLineBase">
            <summary>
            Base class for all single line objects such
            as <see cref="T:RightEdge.Common.ChartObjects.ChartHorizontalLine">horizontal</see> or
            <see cref="T:RightEdge.Common.ChartObjects.ChartVerticalLine">vertical</see> line.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSingleLineBase.#ctor">
            <summary>
            ChartSingleLineBase default constructor.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSingleLineBase.LineText">
            <summary>
            Gets or sets the line text.  Line text can contain date parameters, ex: yyyy-MM-dd would print 2006-01-01 if the line was placed on January 1st, 2006.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSingleLineBase.TextFont">
            <summary>
            Gets of sets the font used for the line text.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSingleLineBase.TextColor">
            <summary>
            Gets or sets the text color for the line text.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSingleLineBase.OpenEnd">
            <summary>
            Gets or sets the OpenEnd property.  Set this to try to extend the line to the end of the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSingleLineBase.OpenStart">
            <summary>
            Gets or sets the OpenStart property.  Set this to try to extend the line to the beginning of the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSingleLineBase.TextAlignment">
            <summary>
            Gets or sets the line text alignment.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartSingleLineBase.LineAlignment">
            <summary>
            Gets or sets the text line alignment.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartHorizontalLine.#ctor(RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartHorizontalLine object.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the point of the line.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartHyperbolicSpiral">
             <summary>
             Hyperbolic Spiral
             </summary>
             <remarks>
             The hyperbolic spiral, also called the inverse spiral,
             originated with Pierre Varignon in 1704 and was studied
             by Johann Bernoulli between 1710 and 1713.  It begins at
             an infinite distance from the pole in the center, it
             winds faster and faster around as it approaches the
             pole, the distance from any point to the pole, following
             the curve, is infinite.
             </remarks>
             <example>Create a Hyperbolic spiral programmatically (C#)
             <code>
             // Setup our X coordinates.
             DateTime startDate = DateTime.Now;
             DateTime lastWeek = startDate.AddDays(-7);
            
             // Create the Hyperbolic Spiral object
             ChartHyperbolicSpiral spiral = new ChartHyperbolicSpiral(new ChartPoint(startDate, 20.00), new ChartPoint(lastWeek, 25.00));
             
             // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
             ChartObjects.Add(symbol, spiral);
             </code>
             </example>
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartArchimedesSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartLituusSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartLogarithmicSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartParabolicSpiral" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartHyperbolicSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartHyperbolicSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartHyperbolicSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Int32)">
            <summary>
            Constructs a ChartHyperbolicSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
            <param name="sweepAngle">sweep angle value</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartImage">
            <summary>
            Image Object
            </summary>
            <remarks>
            Draws a image on the chart.
            </remarks>
            <example>Create an image on the chart programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point = DateTime.Now.AddDays(-10);
            
            // Create the image object.
            ChartImage image = new ChartImage(new ChartPoint(point, 25.00), "GreenArrowUp.png");
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, image);
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartImage.#ctor(RightEdge.Common.ChartPoint,System.String)">
            <summary>
            ChartImage default constructor.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the start of the text.</param>
            <param name="imageFile">String of containing the image file to load from disk.</param>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartImage.ImageAlpha">
            <summary>
            Gets or sets the image alpha.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartImage.ImageFile">
            <summary>
            Gets or sets the image filename.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartImage.Resizable">
            <summary>
            Gets or sets the resizable flag.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartLabel">
            <summary>
            Label Object
            </summary>
            <remarks>
            Draws a text label on the chart.
            </remarks>
            <example>Create a label on the chart programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point = DateTime.Now.AddDays(-10);
            
            // Create the label object.
            ChartLabel label = new ChartLabel(new ChartPoint(point, 25.00), "Hello World");
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, label);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartText" />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartTextBase">
            <summary>
            Base class for text type chart objects.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartTextBase.labelText">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartTextBase.textColor">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartTextBase.labelFont">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartTextBase.LabelText">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartTextBase.TextColor">
            <summary>
            Gets or sets the text color.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartTextBase.LabelFont">
            <summary>
            Gets or sets the text label font.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLabel.#ctor(RightEdge.Common.ChartPoint,System.String)">
            <summary>
            ChartLabel default constructor.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the start of the label.</param>
            <param name="text">String of text to display in the label.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLabel.#ctor(RightEdge.Common.ChartPoint,System.String,System.Drawing.Color)">
            <summary>
            ChartLabel default constructor.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the start of the label.</param>
            <param name="text">String of text to display in the label.</param>
            <param name="textColor">Sets the color of the text.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLabel.#ctor(RightEdge.Common.ChartPoint,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            ChartLabel default constructor.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the start of the label.</param>
            <param name="text">String of text to display in the label.</param>
            <param name="textColor">Sets the color of the label.</param>
            <param name="backgroundColor">Sets the background color of the label text.</param>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartLabel.TextBackgroundColor">
            <summary>
            Gets or sets text background color.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartLabel.LabelTransparency">
            <summary>
            Gets or sets the label transparency.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartLabel.RoundWidth">
            <summary>
            Gets or sets the roundness of the label rectangle.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartLabel.ShadowWidth">
            <summary>
            Gets or sets the label shadow width.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartLabel.StickLength">
            <summary>
            Gets or sets the label's "stick" length.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartLabel.LabelAlignment">
            <summary>
            Gets or sets the label alignment.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartLituusSpiral">
             <summary>
             Lituus Spiral
             </summary>
             <remarks>
             According to Robert C. Yates 1952, the Lituus curve is
             studied by Roger Cotes in 1722. It is named after an
             ancient Roman trumpet called lituus.  The curve is
             asymptotic to the positive x-axis, and the other
             end spiral in towards the pole. As theta approachs infinity,
             the curve approaches the origin.
             </remarks>
             <example>Create a Lituus spiral programmatically (C#)
             <code>
             // Setup our X coordinates.
             DateTime startDate = DateTime.Now;
             DateTime lastWeek = startDate.AddDays(-7);
            
             // Create the Lituus Spiral object
             ChartLituusSpiral spiral = new ChartLituusSpiral(new ChartPoint(startDate, 20.00), new ChartPoint(lastWeek, 25.00));
             
             // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
             ChartObjects.Add(symbol, spiral);
             </code>
             </example>
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartArchimedesSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartHyperbolicSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartLogarithmicSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartParabolicSpiral" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLituusSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartLituusSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLituusSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Int32)">
            <summary>
            Constructs a ChartLituusSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
            <param name="sweepAngle">sweep angle value</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartLogarithmicSpiral">
             <summary>
             Logarithmic Spiral
             </summary>
             <remarks>
             The logarithmic spiral, also known as the growth spiral,
             was first studied by Descartes in 1638 and Jakob Bernoulli.
             This spiral often appears in nature.  Probably the most
             important aspect of the logarithmic spiral is that
             if we increase the angle ø by equal amounts, the distance
             r from the poles increases in equal ratios.
             </remarks>
             <example>Create a Logarithmic spiral programmatically (C#)
             <code>
             // Setup our X coordinates.
             DateTime startDate = DateTime.Now;
             DateTime lastWeek = startDate.AddDays(-7);
            
             // Create the Logarithmic Spiral object
             ChartLogarithmicSpiral spiral = new ChartLogarithmicSpiral(new ChartPoint(startDate, 20.00), new ChartPoint(lastWeek, 25.00));
             
             // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
             ChartObjects.Add(symbol, spiral);
             </code>
             </example>
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartArchimedesSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartHyperbolicSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartLituusSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartParabolicSpiral" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLogarithmicSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartLogarithmicSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLogarithmicSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Int32)">
            <summary>
            Constructs a ChartLogarithmicSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
            <param name="sweepAngle">sweep angle value</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartLRegression">
            <summary>
            A Linear Regression line.
            </summary>
            <remarks>
            A classic statistical problem is to try to determine the relationship between two random 
            variables.  The Linear Regression line displays the statistically predicted price value.
            </remarks>
            <example>Create a linear regression line programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-21);
            DateTime rightPoint = DateTime.Now;
            
            // Create the linear regression object with the default color.
            // Note, the price (Y) portion of the ChartPoint is not used.
            ChartLRegression lrLine = new ChartLRegression(new ChartPoint(leftPoint, 20.00), new ChartPoint(rightPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, lrLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartAsynChannelLRegression" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLRegressionChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartOpenLRegression" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLRegression.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartLRegression object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the linear regression line.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the linear regression line.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartLRegressionChannel">
            <summary>
            A Linear Regression channel.
            </summary>
            <remarks>
            A classic statistical problem is to try to determine the relationship between two random 
            variables.  The Linear Regression channel displays the statistically predicted price value.
            </remarks>
            <example>Create a linear regression channel programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-21);
            DateTime rightPoint = DateTime.Now;
            
            // Create the linear regression channel object with the default color.
            // Note, the price (Y) portion of the ChartPoint is not used.
            ChartLRegressionChannel lrChannel = new ChartLRegressionChannel(new ChartPoint(leftPoint, 20.00), new ChartPoint(rightPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, lrChannel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartAsynChannelLRegression" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLRegression" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartOpenLRegression" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLRegressionChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartLRegressionChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the linear regression line.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the linear regression line.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartMultiArc">
            <summary>
            Multi Arc Object
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartMultiArc.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartMultiArc object.
            </summary>
            <param name="centerPoint">A non-empty, valid ChartPoint object that represents the center point of the arc.</param>
            <param name="outerPoint">A non-empty, valid ChartPoint object that represents the outer point of the arc.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartOpenLRegression">
            <summary>
            An Open Linear Regression channel.
            </summary>
            <remarks>
            A classic statistical problem is to try to determine the relationship between two random 
            variables.  The Linear Regression channel displays the statistically predicted price value.
            </remarks>
            <example>Create an open linear regression channel programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-21);
            DateTime rightPoint = DateTime.Now;
            
            // Create the open linear regression channel object with the default color.
            // Note, the price (Y) portion of the ChartPoint is not used.
            ChartOpenLRegression lrOpenChannel = new ChartOpenLRegression(new ChartPoint(leftPoint, 20.00), new ChartPoint(rightPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, lrOpenChannel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartAsynChannelLRegression" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLRegression" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLRegressionChannel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartOpenLRegression.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartLRegressionChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the linear regression line.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the linear regression line.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartParabolicSpiral">
             <summary>
             Parabolic Spiral
             </summary>
             <remarks>
             A parabolic spiral can be represented by the mathematical
             equation r2 = a2. This spiral discovered by Bonaventura
             Cavalieri creates a curve commonly known as a parabola.
             </remarks>
             <example>Create a Parabolic spiral programmatically (C#)
             <code>
             // Setup our X coordinates.
             DateTime startDate = DateTime.Now;
             DateTime lastWeek = startDate.AddDays(-7);
            
             // Create the Parabolic Spiral object
             ChartParabolicSpiral spiral = new ChartParabolicSpiral(new ChartPoint(startDate, 20.00), new ChartPoint(lastWeek, 25.00));
             
             // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
             ChartObjects.Add(symbol, spiral);
             </code>
             </example>
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartArchimedesSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartHyperbolicSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartLituusSpiral" />
             <seealso cref="T:RightEdge.Common.ChartObjects.ChartParabolicSpiral" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartParabolicSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartParabolicSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartParabolicSpiral.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Int32)">
            <summary>
            Constructs a ChartParabolicSpiral object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the spiral</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the spiral</param>
            <param name="sweepAngle">sweep angle value</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartParallelogram">
            <summary>
            A Parallelogram chart object
            </summary>
            <remarks>
            This object plots a parallelogram or a quadrilateral with opposite sides parallel.
            </remarks>
            <example>Create a parallelogram object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point1 = DateTime.Now.AddDays(-14);
            DateTime point2 = DateTime.Now.AddDays(-7);
            DateTime point3 = DateTime.Now;
            
            // Create the parallelogram object
            ChartParallelogram parallelogram = new ChartParallelogram(new ChartPoint(point1, 25.00),
            														new ChartPoint(point2, 20.00),
            														new ChartPoint(point3, 30.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, parallelogram);
            </code>
            </example>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartTriangle">
            <summary>
            A Parallelogram chart object
            </summary>
            <remarks>
            This object plots a triangle on the chart.
            </remarks>
            <example>Create a triangle object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point1 = DateTime.Now.AddDays(-14);
            DateTime point2 = DateTime.Now.AddDays(-7);
            DateTime point3 = DateTime.Now;
            
            // Create the triangle object
            ChartTriangle triangle = new ChartTriangle(new ChartPoint(point1, 25.00),
            											new ChartPoint(point2, 20.00),
            											new ChartPoint(point3, 30.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, triangle);
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartTriangle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartTriangle object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the first point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the second point of the object.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents the third point of the point.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartTriangle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            Constructs a ChartTriangle object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the first point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the second point of the object.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents the third point of the point.</param>
            <param name="color">Specifies the color of this object.</param>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartTriangle.Filled">
            <summary>
            Gets or sets the filled property.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartTriangle.FillColor">
            <summary>
            Gets or sets the filled color.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartTriangle.FillTransparency">
            <summary>
            Gets or sets the transparency level.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartParallelogram.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartParallelogram object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the first point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the second point of the object.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents the third point of the point.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartParallelogram.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            Constructs a ChartParallelogram object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the first point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the second point of the object.</param>
            <param name="point3">A non-empty, valid ChartPoint object that represents the third point of the point.</param>
            <param name="color">Specifies the color of this object.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartPercentLine">
            <summary>
            Percent Line or Percent Levels
            </summary>
            <remarks>
            These levels are created by drawing a trendline between two extreme points and then dividing the vertical distance by round percentage values of 25%, 50%, 75% and 100%.
            </remarks>
            <example>Create Percent Lines programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-21);
            DateTime rightPoint = DateTime.Now;
            
            // Create the percent line object.
            ChartPercentLine percentLine = new ChartPercentLine(new ChartPoint(leftPoint, 25.00), new ChartPoint(rightPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, percentLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartFibLine" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartPercentLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            ChartPercentLine default constructor.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the object.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartRectangle">
            <summary>
            A Rectangle object
            </summary>
            <remarks>
            This object will create a rectangle on the chart.  The
            rectangle can be filled or transparent.
            </remarks>
            <example>Create a rectangle programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-7);
            DateTime rightPoint = DateTime.Now;
            
            // Create the rectangle object
            ChartRectangle rectangle = new ChartRectangle(new ChartPoint(leftPoint, 20.00), new ChartPoint(rightPoint, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, rectangle);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectangleBand" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectanglePrice" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRoundedRectangle" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectangle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartRectangle object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectangle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            Construct a ChartRectangle object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
            <param name="color">Specify the color of the rectangle line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectangle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color,System.Int32)">
            <summary>
            Construct a ChartRectangle object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
            <param name="color">Specify the color of the rectangle line.</param>
            <param name="width">Specify the width of the rectangle line.</param>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRectangle.Filled">
            <summary>
            Specifies whether or not to fill this rectangle.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRectangle.FillColor">
            <summary>
            Specifies the fill color of this rectangle.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRectangle.FillTransparency">
            <summary>
            Specifies the level of transparency for this fill.  0 = completely transparent, 255 = completely filled.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartRectangleBand">
            <summary>
            A Rectangle "band" or background object
            </summary>
            <remarks>
            This object will create a background rectangle on the chart.
            The rectangle consumes the entire vertical portion of the pane
            with the specified color over the specified period of time.
            </remarks>
            <example>Create a band rectangle programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-7);
            DateTime rightPoint = DateTime.Now;
            
            // Create the rectangle band object with the default color.
            ChartRectangleBand rectangle = new ChartRectangleBand(new ChartPoint(leftPoint, 20.00), new ChartPoint(rightPoint, 25.00), Color.RoyalBlue, 3);
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, rectangle);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectangle" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectanglePrice" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRoundedRectangle" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectangleBand.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartRectangleBand object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectangleBand.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            Construct a ChartRectangleBand object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
            <param name="color">Specify the color of the rectangle line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectangleBand.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color,System.Int32)">
            <summary>
            Construct a ChartRectangleBand object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
            <param name="color">Specify the color of the rectangle line.</param>
            <param name="width">Specify the width of the rectangle line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectangleBand.Initialize">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartRectanglePrice">
            <summary>
            A Price Rectangle
            </summary>
            <remarks>
            This object will create a rectangle that snaps to the price
            data on the chart.  The rectangle auto-sizes itself based
            on the price data and that cannot be changed by the
            developer or user.
            </remarks>
            <example>Create a price rectangle programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-7);
            DateTime rightPoint = DateTime.Now;
            
            // Create the rectangle price object with the default color.
            ChartRectanglePrice rectangle = new ChartRectanglePrice(new ChartPoint(leftPoint, 20.00), new ChartPoint(rightPoint, 25.00), Color.RoyalBlue, 3);
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, line);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectangle" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectangleBand" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRoundedRectangle" />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartRoundedRectangle">
            <summary>
            A Rounded Rectangle
            </summary>
            <remarks>
            This object will create a rectangle on the chart.  The
            rectangle can be filled or transparent.  This rectangle
            also adds the ability to have rounded edges.  This is
            controlled using the RoundWidth property.
            </remarks>
            <example>Create a rounded rectangle programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-7);
            DateTime rightPoint = DateTime.Now;
            
            // Create the rectangle object with the default color.
            ChartRoundedRectangle rectangle = new ChartRoundedRectangle(new ChartPoint(leftPoint, 20.00), new ChartPoint(rightPoint, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, rectangle);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectangle" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectangleBand" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartRectanglePrice" />
        </member>
        <member name="F:RightEdge.Common.ChartObjects.ChartRoundedRectangle.roundWidth">
            <summary>
            Access to raw RoundWith value.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRoundedRectangle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartRoundedRectangle object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRoundedRectangle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            Construct a ChartRoundedRectangle object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
            <param name="color">Specify the color of the rectangle line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRoundedRectangle.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Construct a ChartRoundedRectangle object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
            <param name="color">Specify the color of the rectangle line.</param>
            <param name="width">Specify the width of the rectangle line.</param>
            <param name="roundWidth">Number of pixels used to perform edge rounding.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRoundedRectangle.Initialize">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.ChartObjects.ChartRoundedRectangle.RoundWidth">
            <summary>
            Specifies the number of pixels used in the rounding of the rectangle.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectanglePrice.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartRectanglePrice object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectanglePrice.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            Construct a ChartRectanglePrice object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
            <param name="color">Specify the color of the rectangle line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectanglePrice.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Construct a ChartRectanglePrice object.
            </summary>
            <param name="leftPoint">A non-empty, valid ChartPoint object that represents the left point of the rectangle.</param>
            <param name="rightPoint">A non-empty, valid ChartPoint object that represents the right point of the rectangle.</param>
            <param name="color">Specify the color of the rectangle line.</param>
            <param name="width">Specify the width of the rectangle line.</param>
            <param name="roundWidth">Specify the rounded width of the rectangle edges.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartRectanglePrice.Initialize">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartSineObject">
            <summary>
            Sine Object
            </summary>
            <remarks>
            A geometric waveform that oscillates
            (moves up, down or side-to-side) periodically,
            and is defined by the function y = sin x.
            It is an s-shaped, smooth wave that oscillates above
            and below zero.
            <para>
            The two points that are used for the sine wave object
            specify the top portion of the wave and the bottom
            portion of the wave.
            </para>
            </remarks>
            <example>Create a sine wave programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime topPoint = DateTime.Now.AddDays(-7);
            DateTime bottomPoint = DateTime.Now;
            
            // Create the sine wave object.
            ChartSineObject wave = new ChartSineObject(new ChartPoint(topPoint, 25.00), new ChartPoint(bottomPoint, 20.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, wave);
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSineObject.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartSineObject object.
            </summary>
            <param name="topPoint">A non-empty, valid ChartPoint object that represents the top point of the sine wave.</param>
            <param name="bottomPoint">A non-empty, valid ChartPoint object that represents the bottom point of the sine wave.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSineObject.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            Construct a ChartSineObject object.
            </summary>
            <param name="topPoint">A non-empty, valid ChartPoint object that represents the top point of the sine wave.</param>
            <param name="bottomPoint">A non-empty, valid ChartPoint object that represents the bottom point of the sine wave.</param>
            <param name="color">Specify the color of the sine wave line.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartSquareCycleLine">
            <summary>
            Square Cycle Line
            </summary>
            <example>Create a square cycle line object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point1 = DateTime.Now.AddDays(-21);
            
            // Create the square cycle line object.
            ChartSquareCycleLine cycleLine = new ChartSquareCycleLine(new ChartPoint(point1, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, cycleLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartFibCycleLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartSquareCycleLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartSymmetryLine" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSquareCycleLine.#ctor(RightEdge.Common.ChartPoint)">
            <summary>
            ChartFibCycleLine default constructor.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the left point of the object.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartStdChannel">
            <summary>
            An object that draws channel lines based on Standard calculation.
            </summary>
            <remarks>
            This object is not a free form channel.  It uses the
            standard calculation to determine the direction of the lines.
            The first point is the left point.  The second point 
            specifies the right point of the channels.
            </remarks>
            <example>Create a std channel object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-14);
            DateTime rightPoint = DateTime.Today;
            
            // Create the std channel object
            ChartStdChannel channel = new ChartStdChannel(new ChartPoint(leftPoint, 25.00),
            												new ChartPoint(rightPoint, 25.00),
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, channel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdErrorChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartDownTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpDownTrendChannel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartStdChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartStdChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the channel.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartStdErrorChannel">
            <summary>
            An object that draws channel lines based on the Standard Error calculation.
            </summary>
            <remarks>
            This object is not a free form channel.  It uses the
            standard error calculation to determine the direction of the lines.
            The first point is the left point.  The second point 
            specifies the right point of the channels.
            </remarks>
            <example>Create a std error channel object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-14);
            DateTime rightPoint = DateTime.Today;
            
            // Create the std error channel object
            ChartStdErrorChannel channel = new ChartStdErrorChannel(new ChartPoint(leftPoint, 25.00),
            												new ChartPoint(rightPoint, 25.00),
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, channel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartDownTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpDownTrendChannel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartStdErrorChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartStdErrorChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the channel.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartSymmetryLine">
            <summary>
            Symmetry Line
            </summary>
            <remarks>
            Draws three vertical lines that are all equidistant from each other.
            Point 1 is the center line.  Point 2 describes the distance between
            the remaining lines.  For example, if the distance between point 1
            and point 2 is 10, lines would be drawn at -10, 0, and 10.
            </remarks>
            <example>Create symmetry line object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point1 = DateTime.Now.AddDays(-10);
            DateTime point2 = DateTime.Now.AddDays(-5);
            
            // Create the symmetry line object.
            ChartSymmetryLine symmetryLine = new ChartSymmetryLine(new ChartPoint(point1, 25.00), new ChartPoint(point2, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, symmetryLine);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartEqualCycleLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartFibCycleLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartSquareCycleLine" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartSymmetryLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            ChartSymmetryLine default constructor.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the object.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the object.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartText">
            <summary>
            Text Object
            </summary>
            <remarks>
            Draws text on the chart.
            </remarks>
            <example>Create text on the chart programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime point = DateTime.Now.AddDays(-10);
            
            // Create the text object.
            ChartText text = new ChartText(new ChartPoint(point, 25.00), "Hello World");
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, text);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLabel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartText.#ctor(RightEdge.Common.ChartPoint,System.String)">
            <summary>
            ChartText default constructor.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the start of the text.</param>
            <param name="text">String of text to display on the chart.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartText.#ctor(RightEdge.Common.ChartPoint,System.String,System.Drawing.Color)">
            <summary>
            ChartText default constructor.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the start of the text.</param>
            <param name="text">String of text to display on the chart.</param>
            <param name="textColor">Specifies the color of the text</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartUpDownTrendChannel">
            <summary>
            An object that draws channel lines based on the price values on the chart.
            </summary>
            <remarks>
            This object is not a free form channel.  It uses the
            price data on the chart to determine the direction of the lines.
            The first point is the left point.  The second point 
            specifies the right point of the channels.
            </remarks>
            <example>Create an updown trend channel line object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-14);
            DateTime rightPoint = DateTime.Today;
            
            // Create the up/down trend channel object
            ChartUpDownTrendChannel channel = new ChartUpDownTrendChannel(new ChartPoint(leftPoint, 25.00),
            												new ChartPoint(rightPoint, 25.00),
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, channel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdErrorChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartDownTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpTrendChannel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartUpDownTrendChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartUpDownTrendChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the channel.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartUpTrendChannel">
            <summary>
            An object that draws channel lines based on the price values on the chart.
            </summary>
            <remarks>
            This object is not a free form channel.  It uses the
            price data on the chart to determine the direction of the lines.
            The first point is the left point.  The second point 
            specifies the right point of the channels.
            </remarks>
            <example>Create an uptrend channel line object programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime leftPoint = DateTime.Now.AddDays(-14);
            DateTime rightPoint = DateTime.Today;
            
            // Create the uptrend channel object
            ChartUpTrendChannel channel = new ChartUpTrendChannel(new ChartPoint(leftPoint, 25.00),
            												new ChartPoint(rightPoint, 25.00),
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, channel);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartStdErrorChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartDownTrendChannel" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartUpDownTrendChannel" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartUpTrendChannel.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Constructs a ChartUpTrendChannel object.
            </summary>
            <param name="point1">A non-empty, valid ChartPoint object that represents the left point of the channel.</param>
            <param name="point2">A non-empty, valid ChartPoint object that represents the right point of the channel.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartVerticalLine">
            <summary>
            A vertical line.
            </summary>
            <remarks>
            This object is a vertical line that can be moved horizontally.
            </remarks>
            <example>Create a vertical line programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime lastWeek = startDate.AddDays(-7);
            
            // Create the vertical line object draw at last week's bar
            ChartVerticalLine line = new ChartVerticalLine(new ChartPoint(lastWeek, 25.00));
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, line);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartArrowLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartHorizontalLine" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartVerticalLine.#ctor(RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartHorizontalLine object.
            </summary>
            <param name="point">A non-empty, valid ChartPoint object that represents the point of the line.</param>
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartObjectChangedDelegate">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ChartObjects.ChartLine">
            <summary>
            A simple line.
            </summary>
            <remarks>
            This object is simply a line that can be drawn in any direction.
            </remarks>
            <example>Create a line programmatically (C#)
            <code>
            // Setup our X coordinates.
            DateTime startDate = DateTime.Now;
            DateTime lastWeek = startDate.AddDays(-7);
            
            // Create the line object
            ChartLine line = new ChartLine(new ChartPoint(startDate, 20.00), new ChartPoint(lastWeek, 25.00), Color.RoyalBlue, 3);
            
            // Add this object to the chart.  "symbol" would equal the current symbol object in the system.
            ChartObjects.Add(symbol, line);
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartArrowLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartHorizontalLine" />
            <seealso cref="T:RightEdge.Common.ChartObjects.ChartVerticalLine" />
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint)">
            <summary>
            Construct a ChartLine object.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the line.</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color)">
            <summary>
            ChartLine constructor that allows for a line color to be specified.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the line.</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the line.</param>
            <param name="lineColor">Color of the line.</param>
        </member>
        <member name="M:RightEdge.Common.ChartObjects.ChartLine.#ctor(RightEdge.Common.ChartPoint,RightEdge.Common.ChartPoint,System.Drawing.Color,System.Int32)">
            <summary>
            ChartLine constructor that allows for a line color and width to be specified.
            </summary>
            <param name="startPoint">A non-empty, valid ChartPoint object that represents the start point of the line.</param>
            <param name="endPoint">A non-empty, valid ChartPoint object that represents the end point of the line.</param>
            <param name="lineColor">Color of the line.</param>
            <param name="width">Width of the line.</param>
        </member>
        <member name="T:RightEdge.Common.SeriesChartType">
            <summary>
            SeriesChartType enumeration.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesChartType.BarChart">
            <summary>
            Specifies a bar chart.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesChartType.LineChart">
            <summary>
            Specifies a line chart.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesChartType.PriceChart">
            <summary>
            Specifies a price chart.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SeriesLineType">
            <summary>
            Line type enumeration.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesLineType.Solid">
            <summary>
            Draw using a solid line.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesLineType.Dashed">
            <summary>
            Draw using a dashed line.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesLineType.Dots">
            <summary>
            Draw using a dotted line.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesLineType.Histogram">
            <summary>
            Draws the points as a histogram.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesLineType.Filled">
            <summary>
            Draws the points as a filled region.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartPaneEnum">
            <summary>
            Chart pane description.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartPaneEnum.PricePane">
            <summary>
            Price pane on the chart.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartPaneEnum.VolumePane">
            <summary>
            Volume pane on the chart.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartPaneEnum.UserPane">
            <summary>
            User defined pane on the chart.
            </summary>
            <remarks>
            This is any pane that was created for an indicator or series that was not plotted on the price or volume panes.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.ChartPane">
            <summary>
            A class containing information about a chart pane.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartPane.#ctor">
            <summary>
            Constructs a ChartPane object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartPane.#ctor(System.Boolean)">
            <summary>
            Constructs a ChartPane object.
            </summary>
            <param name="abovePrices">bool indicating whether or not the pane should be placed above the price pane.  The default is false.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.#ctor(System.Boolean,System.Int32)">
            <summary>
            Constructs a ChartPane object.
            </summary>
            <param name="abovePrices">bool indicating whether or not the pane should be placed above the price pane.  The default is false.</param>
            <param name="size">integer containing a value that recommends a size for this pane.  The chart pane manager will ultimately determine the size based on the other chart panes that exist.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.SetChartName(System.String)">
            <summary>
            Sets a friendly name for this chart.
            </summary>
            <param name="name">string containing the name.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.AddSeries(System.String,RightEdge.Common.ChartSeries)">
            <summary>
            Adds a previously constructed ChartSeries object to this chart pane.
            </summary>
            <param name="name">string containing the name of the series.</param>
            <param name="series">construction ChartSeries object.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.RemoveSeries(System.String)">
            <summary>
            Removes series from the chart pane.
            </summary>
            <param name="name">string containing the name of the series to remove.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.SetPriceSeries(RightEdge.Common.ChartPriceSeries,System.String)">
            <summary>
            Sets a price series to this chart pane.
            </summary>
            <param name="series">An instance of ChartPriceSeries to assign to this chart.</param>
            <param name="name">Friendly name of the series.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.SetBarColor(RightEdge.Common.BarData,RightEdge.Common.BarData,System.Drawing.Color)">
            <summary>
            Sets the bar color for the specified start and end bars inclusively.
            </summary>
            <param name="barStart">BarData instance to start at.</param>
            <param name="barEnd">BarData instance to end at.</param>
            <param name="barColor">Color to draw the bar.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.SetBarBackgroundColor(RightEdge.Common.BarData,RightEdge.Common.BarData,System.Drawing.Color)">
            <summary>
            Sets the background color behind the bar for the specified start and end bars inclusively.
            </summary>
            <param name="barStart">BarData instance to start at.</param>
            <param name="barEnd">BarData instance to end at.</param>
            <param name="barColor">Color to draw the bar.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.SetBarText(RightEdge.Common.BarData,System.String)">
            <summary>
            Creates a text object at the specified bar.
            </summary>
            <param name="bar">Bar where the text begins.</param>
            <param name="barText">String containing the text to draw.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPane.SetBarText(RightEdge.Common.BarData,System.String,System.Drawing.Font)">
            <summary>
            Creates a text object at the specified bar using the specified font.
            </summary>
            <param name="bar">Bar where the text begins.</param>
            <param name="barText">String containing the text to draw.</param>
            <param name="font">Font instance to draw this text in.</param>
        </member>
        <member name="P:RightEdge.Common.ChartPane.Size">
            <summary>
            Gets or sets the size of the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartPane.Name">
            <summary>
            Gets or sets the name of the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartPane.AbovePrices">
            <summary>
            Indicates whether this pane should be
            above or below the price chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartPane.ChartData">
            <summary>
            Gets the ChartData instance for this ChartPane.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartPointAttributes">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ChartSeries">
            <summary>
            Contains chart series information and related settings
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartSeries.LookBack(System.Int32)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ChartSeries.Clone">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ChartSeries.#ctor">
            <summary>
            Constructs a ChartSeries instance.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ChartSeries.#ctor(RightEdge.Common.SeriesChartType)">
            <summary>
            Create a ChartSeries object of the specified type.
            </summary>
            <param name="chartType">SeriesChartType that this ChartSeries object will be created as.</param>
        </member>
        <member name="P:RightEdge.Common.ChartSeries.Count">
            <summary>
            Gets the number of items in the series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartSeries.SeriesColor">
            <summary>
            Gets or sets the color of this series as it will be plotted on the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartSeries.SeriesBorderColor">
            <summary>
            Gets or sets the Color of the plotted series border color.  This is
            mostly used for bar charts as opposed to line charts
            which would just use the "SeriesColor" property
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartSeries.seriesColorName">
            <summary>
            Internal use.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartSeries.ChartType">
            <summary>
            Gets or sets the ChartType for this series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartSeries.SeriesLineType">
            <summary>
            Gets or sets the line type that is plotted for this chart series.  Only valid if the chart type is LineChart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartSeries.SeriesName">
            <summary>
            Gets or sets the user defined name of this chart series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartSeries.LineSize">
            <summary>
            Gets or sets the size of the line plotted on the chart.  Only valid if the chart type is LineChart.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartDataSeries">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ChartIndicatorSeries">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.BarElement">
            <summary>
            Constants that define a price type within a list of bars.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarElement.Open">
            <summary>
            Open price for this bar
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarElement.High">
            <summary>
            High price for this bar
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarElement.Low">
            <summary>
            Low price for this bar
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarElement.Close">
            <summary>
            Close price for this bar
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarElement.Volume">
            <summary>
            Volume figure for this bar
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarElement.Bid">
            <summary>
            Last Bid value for this bar
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarElement.Ask">
            <summary>
            Last Ask value for this bar
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarElement.BarDate">
            <summary>
            Retrieves the date for this bar.
            </summary>
            <remarks>
            The date is represented as a decimal and
            can be converted into a DateTime structure
            using DateTime.FromOADate()
            </remarks>
        </member>
        <member name="F:RightEdge.Common.BarElement.OpenInterest">
            <summary>
            Retrieves the open interest value for this bar.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionAllocationType">
            <summary>
            Specifies how position size should be determined (if not specified otherwise).
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionAllocationType.Percentage">
            <summary>
            Positions should be sized according to a percentage of the total account value.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionAllocationType.FixedValue">
            <summary>
            Positions should be sized based on a fixed position value.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionAllocationType.FixedSize">
            <summary>
            Positions should be sized based on a fixed number of shares or contracts.
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionType">
            <summary>
            Represents whether a position is long or short.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionType.Long">
            <summary>
            Represents a long position
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionType.Short">
            <summary>
            Represents a short position
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionType.None">
            <summary>
            Represents the lack of a position (ie flat)
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionState">
            <summary>
            Represents whether a position is open or not.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionState.None">
            <summary>
            No position state.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionState.Pending">
            <summary>
            An order has been submitted to open the position, but has not been filled.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionState.Open">
            <summary>
            The position is currently open.
            </summary>
        </member>
        <member name="F:RightEdge.Common.PositionState.Closed">
            <summary>
            The position was previously open, but is now closed.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BarFrequency">
            <summary>
            The frequency in which a bar occurs or the time scope of a bar.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.Tick">
            <summary>
            Tick or real-time.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.OneMinute">
            <summary>
            A frequency of one minute.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.FiveMinute">
            <summary>
            A frequency of five minutes.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.TenMinute">
            <summary>
            A frequency of ten minutes.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.FifteenMinute">
            <summary>
            A frequency of fifteen minutes.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.ThirtyMinute">
            <summary>
            A frequency of thirty minutes.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.SixtyMinute">
            <summary>
            A frequency of sixty minutes.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.Daily">
            <summary>
            A frequency of one day.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.Weekly">
            <summary>
            A frequency of one week.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.Monthly">
            <summary>
            A frequency of one month.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarFrequency.Yearly">
            <summary>
            A frequency of one year.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartObjectSmoothingMode">
            <summary>
            The method used to draw a chart object.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjectSmoothingMode.Default">
            <summary>
            Draw object using the default drawing method.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartObjectSmoothingMode.AntiAlias">
            <summary>
            Draw object anti-aliased.  This allows for smoother, but slower drawing.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartLabelAlignment">
            <summary>
            Specify the way a chart label is aligned.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.LeftTop">
            <summary>
            Align the label to the left and top of the rectangle
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.LeftCenter">
            <summary>
            Align the label to the left and center of the rectangle
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.LeftBottom">
            <summary>
            Align the label to the left and bottom of the rectangle
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.CenterTop">
            <summary>
            Align the label to the center and top of the rectangle
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.CenterCenter">
            <summary>
            Align the label to the center for both the vertical and horizontal positions of the rectangle
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.CenterBottom">
            <summary>
            Align the label to the center and bottom of the rectangle
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.RightTop">
            <summary>
            Align the label to the right and top of the rectangle
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.RightCenter">
            <summary>
            Align the label to the right and center of the rectangle
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLabelAlignment.RightBottom">
            <summary>
            Align the label to the right and bottom of the rectangle
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartLineTextAlignment">
            <summary>
            Specifies the line text alignment
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLineTextAlignment.Left">
            <summary>
            Left align the text.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLineTextAlignment.Middle">
            <summary>
            Align the text in the middle.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartLineTextAlignment.Right">
            <summary>
            Align the text to the right.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartTextLineAlignment">
            <summary>
            Specifies the line alignment in relation to the text.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartTextLineAlignment.Top">
            <summary>
            Align the line on top of the text.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartTextLineAlignment.Middle">
            <summary>
            Align the line in the middle of the text.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ChartTextLineAlignment.Bottom">
            <summary>
            Align the line below the text.
            </summary>
        </member>
        <member name="T:RightEdge.Common.AssetClass">
            <summary>
            Defines the type of asset for the specified symbol.
            </summary>
        </member>
        <member name="F:RightEdge.Common.AssetClass.Stock">
            <summary>
            The capital raised by a corporation through the issue of shares entitling holders to an ownership interest (equity).
            </summary>
        </member>
        <member name="F:RightEdge.Common.AssetClass.Bond">
            <summary>
            A certificate of debt (usually interest-bearing or discounted) that is issued by a corporation in order to raise money.
            </summary>
        </member>
        <member name="F:RightEdge.Common.AssetClass.Option">
            <summary>
            Gives the buyer the right, but not the obligation, to buy or sell stock at a set price on or before a given date.
            </summary>
        </member>
        <member name="F:RightEdge.Common.AssetClass.Future">
            <summary>
            Exchange-traded contracts. They are firm agreements to deliver (or take delivery of) a standardized amount of something on a certain date at a predetermined price.
            </summary>
        </member>
        <member name="F:RightEdge.Common.AssetClass.Forex">
            <summary>
            Forex is short for foreign exchange.  The simultaneous buying of one currency and selling of another.
            </summary>
        </member>
        <member name="F:RightEdge.Common.AssetClass.FuturesOption">
            <summary>
            Options on futures contracts.
            </summary>
        </member>
        <member name="F:RightEdge.Common.AssetClass.Index">
            <summary>
            Represents a broad based index of individual components.
            </summary>
        </member>
        <member name="F:RightEdge.Common.AssetClass.InterestRate">
            <summary>
            Represents the interest rate paid for a specified currency.  This is not meant to be traded directly,
            but can be used to calculate the interest earned or owed for a forex position.
            </summary>
        </member>
        <member name="T:RightEdge.Common.CurrencyType">
            <summary>
            Enumeration of currencies.
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.None">
            <summary>
            Unknown or invalid currency
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.USD">
            <summary>
            United States Dollar
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.GBP">
            <summary>
            British Pound
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.EUR">
            <summary>
            Euro
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.AUD">
            <summary>
            Australian Dollar
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.CAD">
            <summary>
            Canadian Dollar
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.NZD">
            <summary>
            New Zealand Dollar
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.JPY">
            <summary>
            Japanese Yen
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.CHF">
            <summary>
            Swiss Franc
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.BRL">
            <summary>
            Brazilian Real
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.HKD">
            <summary>
            Hong Kong Dollar
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.SEK">
            <summary>
            Swedish Krona
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.NOK">
            <summary>
            Norwegian Krone
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.KRW">
            <summary>
            South Korean Won
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.SGD">
            <summary>
            Singapore Dollar
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.CNY">
            <summary>
            Chinese Yuan
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.MXN">
            <summary>
            Mexican Peso
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.RUB">
            <summary>
            Russian Ruble
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.INR">
            <summary>
            Indian Rupee
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.TRY">
            <summary>
            Turkish Lira
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.CYP">
            <summary>
            Cyprus Pound
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.CZK">
            <summary>
            Czech Koruna
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.DKK">
            <summary>
            Danish Krone
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.EEK">
            <summary>
            Estonian Kroon
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.HRK">
            <summary>
            Croatian Kuna
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.HUF">
            <summary>
            Hungarian Forint
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.LTL">
            <summary>
            Lithuanian Litas
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.LVL">
            <summary>
            Latvian Lats
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.MTL">
            <summary>
            Maltese Lira
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.PLN">
            <summary>
            Polish Zloty
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.RON">
            <summary>
            Romanian Lei
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.SIT">
            <summary>
            Slovenian Tolar
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.SKK">
            <summary>
            Slovak Koruna
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.TWD">
            <summary>
            Taiwan Dollar
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.ISK">
            <summary>
            Icelandic Kronur
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.MYR">
            <summary>
            Malaysian Ringgit
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.IDR">
            <summary>
            Indonesian Rupiah
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.PHP">
            <summary>
            Philippine Peso
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.MAD">
            <summary>
            Moroccan Dirham
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.THB">
            <summary>
            Thai Baht
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.COB">
            <summary>
            Colombian Peso
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.CLP">
            <summary>
            Chilean Peso
            </summary>
        </member>
        <member name="F:RightEdge.Common.CurrencyType.EGP">
            <summary>
            Egyptian Pound
            </summary>
        </member>
        <member name="T:RightEdge.Common.ContractType">
            <summary>
            Defines the option contract type.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ContractType.NoContract">
            <summary>
            Default contract type where a contract type may not be applicable.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ContractType.Call">
            <summary>
            The option to buy a given stock at a given price before a given date.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ContractType.Put">
            <summary>
            The option to sell a given stock at a given price before a given date.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BarConstructionType">
            <summary>
            Defines the tick data used to construct a bar.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarConstructionType.Default">
            <summary>
            Let RightEdge choose the bar construction method.  This will generally be <see cref="F:RightEdge.Common.BarConstructionType.Mid" /> for Forex
            and <see cref="F:RightEdge.Common.BarConstructionType.Trades" /> for other asset types.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarConstructionType.Bid">
            <summary>
            Construct bar data from bid.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarConstructionType.Ask">
            <summary>
            Construct bar data from ask.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarConstructionType.Mid">
            <summary>
            Uses the midpoint of the bid and ask.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarConstructionType.Trades">
            <summary>
            Construct bar data from trades.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BarConstructionType.Last">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.DateElement">
            <summary>
            Enumerations for pieces of date structures.
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.Year">
            <summary>
            Year portion of the date
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.Month">
            <summary>
            Month portion of the date
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.Day">
            <summary>
            Month portion of the date
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.Hour">
            <summary>
            Hour portion of the date
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.Minute">
            <summary>
            Minute portion of the date
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.Second">
            <summary>
            Second portion of the date
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.Millisecond">
            <summary>
            Millisecond portion of the date
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.DayWeek">
            <summary>
            Day of the week field of the date
            </summary>
        </member>
        <member name="F:RightEdge.Common.DateElement.DayYear">
            <summary>
            Day of the year field of the date
            </summary>
        </member>
        <member name="T:RightEdge.Common.OutputSeverityLevel">
            <summary>
            Severity levels attached to system output messages.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OutputSeverityLevel.Error">
            <summary>
            Generates a message with a severity type of Error.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OutputSeverityLevel.Warning">
            <summary>
            Generates a message with a severity type of Warning.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OutputSeverityLevel.Informational">
            <summary>
            Generates a message with a severity type of Informational.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OutputSeverityLevel.NoSeverity">
            <summary>
            Generates a message without a severity assignment.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SystemOutputLocation">
            <summary>
            Enumeration to direct the output text.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SystemOutputLocation.OutputWindow">
            <summary>
            Send output text to the output pane only.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SystemOutputLocation.StatusBar">
            <summary>
            Send output text to the status bar only.
            </summary>
            <remarks>
            Note: Only the text of the output will be displayed in the status bar.  Timestamps, severity and module
            will not be displayed.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.SystemOutputLocation.OutputWindowAndStatusBar">
            <summary>
            Send output text to the status bar and output pane.
            </summary>
        </member>
        <member name="T:RightEdge.Indicators.ConstantSeries">
            <summary>
            A series that always has the same value.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SeriesCalculatorBaseSimple">
            <summary>
            Implements base functionality for an <see cref="T:RightEdge.Common.ISeriesCalculator" /> indicator that does not need
            to save its values.
            </summary>
            <remarks>
            If an indicator is doing a simple calculation on its inputs, you may simply want to calculate the
            value from the inputs every time the value is requested, instead of storing the entire series of
            values.  If this is the case, you can derive from this class and implement your calculation in the
            <see cref="P:Item" /> indexer.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.SeriesCalculatorBase">
            <summary>
            Implements input management functionality from the <see cref="T:RightEdge.Common.ISeriesCalculator" /> interface.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ISeriesCalculator">
            <summary>
            Calculates indicator values using other series as inputs.
            </summary>
            <remarks>
            <para>
            This interface is used to calculate indicator values using other series as inputs.  If
            you are writing an indicator that bases its calculation on more than one
            <see cref="T:RightEdge.Common.BarElement" />, you should consider using the <see cref="T:RightEdge.Common.IIndicator" />
            interface.  In either case, you will also need to write a class implementing the
            <see cref="T:RightEdge.Common.IIndicatorPlugin" /> interface for your indicator to show up in the RightEdge indicator list.
            </para>
            <para>
            Generally, you will want to derive from the <see cref="T:RightEdge.Common.SeriesCalculatorBase" />, 
            <see cref="T:RightEdge.Common.SeriesCalculatorBaseSimple" />, or <see cref="T:RightEdge.Common.SeriesCalculatorBaseWithValues" /> classes
            when implementing this interface.  These classes handle most of the base functionality for this
            interface.
            </para>
            <note type="implementnotes">
            You should add an <see cref="T:RightEdge.Common.ConstructorArgument" /> attribute to your indicator constructor
            for each argument the constructor takes.  You also should add a <see cref="T:RightEdge.Common.SeriesInputAttribute" />
            attribute to your class for each input your indicator takes.  This is used to let the users set
            up the indicator from the user interface.
            </note>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ISeriesCalculator.SetInputs(RightEdge.Common.ISeries[])">
            <summary>
            Sets the input series for a <see cref="T:RightEdge.Common.ISeriesCalculator" /> indicator.
            </summary>
            <param name="inputs">A list of series to use in calculating the indicator values.</param>
        </member>
        <member name="M:RightEdge.Common.ISeriesCalculator.GetInputs">
            <summary>
            Gets a list of the inputs this indicator uses.
            </summary>
            <returns>A list of the inputs this indicator uses.</returns>
        </member>
        <member name="M:RightEdge.Common.ISeriesCalculator.NewBar">
            <summary>
            Updates the series for a new bar.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ISeriesCalculator.NewSeries(System.Int32)">
            <summary>
            Resets the series and recalculates it (if necessary) based on the inputs.
            </summary>
            <param name="count">The length of the series.</param>
        </member>
        <member name="F:RightEdge.Common.SeriesCalculatorBase.inputs">
            <summary>
            An array of the inputs for this indicator.
            </summary>
            <remarks>
            Derived classes can use this array to access the input values in their calculations.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.SeriesCalculatorBase.numberOfInputs">
            <summary>
            </summary>
        </member>
        <member name="F:RightEdge.Common.SeriesCalculatorBase.VARIABLE_NUM_INPUTS">
            <summary>
            Indicates that this series can accept any number of inputs.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBase.#ctor(System.Int32)">
             <summary>
             Constructor for the <see cref="T:RightEdge.Common.SeriesCalculatorBase" /> class.
             </summary>
             <param name="numberOfInputs">
             The number of input series that this indicator requires.  If <see cref="M:RightEdge.Common.SeriesCalculatorBase.SetInputs(RightEdge.Common.ISeries[])" /> is called with
             a number of inputs that does not match this value, it will throw an Exception.  May be
             <see cref="F:RightEdge.Common.SeriesCalculatorBase.VARIABLE_NUM_INPUTS" /> if the indicator can take a variable number of inputs.
            </param>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBase.SetInputs(RightEdge.Common.ISeries[])">
            <summary>
            Sets the input series for a <see cref="T:RightEdge.Common.ISeriesCalculator" /> indicator.
            </summary>
            <param name="newInputs">A list of series to use in calculating the indicator values.</param>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBase.GetInputs">
            <summary>
            Gets a list of the inputs this indicator uses.
            </summary>
            <returns>A list of the inputs this indicator uses.</returns>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBase.NewBar">
            <summary>
            Updates the series for a new bar.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBase.NewSeries(System.Int32)">
            <summary>
            Resets the series and recalculates it (if necessary) based on the inputs.
            </summary>
            <param name="count">The length of the series.</param>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBase.LookBack(System.Int32)">
            <summary>
            Looks back within the series for the specified value.  A value of 0 represents the most recent value.
            </summary>
            <param name="nBars">Number of bars to lookback in the series.</param>
            <returns>The value contained at the specified index.</returns>
            <remarks>
            A series is a collection of values.  The values within series can be referenced using the Lookback method.
            Use 0 to get the most recent value in the series.  To reference values further back in time, pass a value
            greater than 0.  For example, if the series is created against daily bars, to reference yesterday's value
            use Lookback(1).  To reference the day before yesterday, use Lookback(2) and so on.  Use the
            <see cref="P:RightEdge.Common.SeriesCalculatorBase.Count">Count</see> method to determine how many values are contained
            within the series.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.SeriesCalculatorBase.ChartSettings">
            <summary>
            Contains settings for how the series should be displayed on a chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesCalculatorBase.Current">
            <summary>
            The current value of the series.  Using this property is the same as calling LookBack(0).
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesCalculatorBase.Count">
            <summary>
            The number of values in the series value collection.
            </summary>
            <value>The number of values in the series value collection.</value>
        </member>
        <member name="P:RightEdge.Common.SeriesCalculatorBase.OldValuesChange">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseSimple.#ctor(System.Int32)">
             <summary>
             Constructor for the <see cref="T:RightEdge.Common.SeriesCalculatorBaseSimple" /> class.
             </summary>
             <param name="numberOfInputs">
             The number of input series that this indicator requires.  If <see cref="M:RightEdge.Common.SeriesCalculatorBase.SetInputs(RightEdge.Common.ISeries[])" /> is called with
             a number of inputs that does not match this value, it will throw an Exception.  May be
             <see cref="F:RightEdge.Common.SeriesCalculatorBase.VARIABLE_NUM_INPUTS" /> if the indicator can take a variable
             number of inputs.
            </param>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseSimple.NewBar">
            <summary>
            Updates the series for a new bar.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseSimple.NewSeries(System.Int32)">
            <summary>
            Resets the series and recalculates it (if necessary) based on the inputs.
            </summary>
            <param name="count">The length of the series.</param>
        </member>
        <member name="P:RightEdge.Common.SeriesCalculatorBaseSimple.Count">
            <summary>
            Gets the number of items in the series.
            </summary>
        </member>
        <member name="M:RightEdge.Indicators.ConstantSeries.#ctor(System.Double)">
            <summary>
            Creates a new constant series.
            </summary>
            <param name="value">The value of the series.</param>
        </member>
        <member name="M:RightEdge.Indicators.ConstantSeries.LookBack(System.Int32)">
            <summary>
            Looks back within the series for the specified value.  A value of 0 represents the most recent value.
            </summary><param name="nBars">Number of bars to lookback in the series.</param><returns>The value contained at the specified index.</returns><remarks>
            A series is a collection of values.  The values within series can be referenced using the Lookback method.
            Use 0 to get the most recent value in the series.  To reference values further back in time, pass a value
            greater than 0.  For example, if the series is created against daily bars, to reference yesterday's value
            use Lookback(1).  To reference the day before yesterday, use Lookback(2) and so on.  Use the
            <see cref="P:RightEdge.Common.ISeries.Count">Count</see> method to determine how many values are contained
            within the series.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.FilePickUITypeEditor">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IBarDataStorage">
            <exclude />
            <summary>
            This is an older plugin interface for data storage.  New plugins should use the <see cref="T:RightEdge.Common.IDataStore" /> interface.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.LoadBars(RightEdge.Common.SymbolFreq,System.DateTime,System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Loads bar data for the specified symbol and frequency.
            </summary>
            <param name="symbol">SymbolFreq instance to request data for.</param>
            <param name="startDateTime">The date of the first bar to load.</param>
            <param name="endDateTime">The date of the last bar to load.</param>
            <param name="maxLoadBars">The maximum number of bars to load from the store.</param>
            <param name="loadFromEnd">True if the loading should start from the "end", or the most recent data.</param>
            <returns>A collection of BarData.</returns>
            <remarks>If you don't want to specify a specific start date, use <see cref="F:System.DateTime.MinValue" /> for the
            <paramref name="startDateTime" /> parameter.  Likewise, use <see cref="F:System.DateTime.MaxValue" /> for the
            <paramref name="endDateTime" /> parameter if you don't want to specify an end date.</remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.GetBarCount(RightEdge.Common.SymbolFreq,System.DateTime,System.DateTime)">
            <summary>
            Returns the number of bars available for the specified
            symbol at the specified frequency.
            </summary>
            <param name="symbol">SymbolFreq instance to request data for.</param>
            <param name="startDateTime">The date of the first bar to load.</param>
            <param name="endDateTime">The date of the last bar to load.</param>
            <returns>Integer containing the number of bars available.</returns>
            <remarks>If you don't want to limit the bar count to a specific start date, use <see cref="F:System.DateTime.MinValue" /> for the
            <paramref name="startDateTime" /> parameter.  Likewise, use <see cref="F:System.DateTime.MaxValue" /> for the
            <paramref name="endDateTime" /> parameter if you don't want to specify an end date.</remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.SaveBars(RightEdge.Common.SymbolFreq,System.Collections.Generic.List{RightEdge.Common.BarData})">
            <summary>
            Saves bars to the store.
            </summary>
            <param name="symbol">SymbolFreq instance to request data for.</param>
            <param name="bars">List of bars to save</param>
            <returns>Number of bars saved.</returns>
            <remarks>
            If there is any data for the specified symbol and frequency in the bar data store
            for the date range of <paramref name="bars" />, it will be replaced.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.DeleteBars(RightEdge.Common.SymbolFreq)">
            <summary>
            Delete or remove a BarData collection from the data store.
            </summary>
            <param name="symbol">SymbolFreq instance to delete data for.</param>
            <returns>bool indicating success.  True on success, false on failure.</returns>
            <remarks>On failure, see error message for details.</remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.SaveTicks(RightEdge.Common.Symbol,System.Collections.Generic.List{RightEdge.Common.TickData})">
            <summary>
            Saves a collection of TickData to the data store.
            </summary>
            <param name="symbol">SymbolFreq instance to request data for.</param>
            <param name="ticks">Collection of TickData</param>
            <returns>Number of ticks saved.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.SaveTick(RightEdge.Common.Symbol,RightEdge.Common.TickData)">
            <summary>
            Saves a single tick to the data store.
            </summary>
            <param name="symbol">SymbolFreq instance to request data for.</param>
            <param name="tick">TickData instance.</param>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.UpdateTicks(RightEdge.Common.Symbol,System.Collections.Generic.List{RightEdge.Common.TickData})">
            <summary>
            Updates a collection of TickData in the data store.
            </summary>
            <param name="symbol">SymbolFreq instance to request data for.</param>
            <param name="newTicks">Collection of TickData</param>
            <returns>Number of ticks updated.</returns>
            <remarks>newTicks should not have any gaps in the data</remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.LoadTicks(RightEdge.Common.Symbol,System.DateTime)">
            <summary>
            Loads a collection of ticks from the data store for the specified symbol and frequency beginning at the specified date.
            </summary>
            <param name="symbol">SymbolFreq instance to request data for.</param>
            <param name="startDate">Load tick data starting at the specified date.  To load all tick data, specify a start date of DateTime.MinValue.</param>
            <returns>A collection of TickData.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.LoadTicks(RightEdge.Common.Symbol,System.DateTime,System.DateTime)">
            <summary>
            Loads a collection of ticks from the data store for the specified symbol and frequency for the specified date range.
            </summary>
            <param name="symbol">SymbolFreq instance to request data for.</param>
            <param name="startDate">Load tick data starting at the specified date.  To load all tick data, specify a start date of DateTime.MinValue.</param>
            <param name="endDate">Load ticks up to and including the specified date.</param>
            <returns>A collection of TickData.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.DeleteTicks(RightEdge.Common.Symbol)">
            <summary>
            Delete or removes a TickData collection from the data store.
            </summary>
            <param name="symbol">Symbol instance to delete data for.</param>
            <returns>bool indicating success.  True on success, false on failure.</returns>
            <remarks>On failure, see error message for details.</remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.RequiresSetup">
            <summary>
            Determines if this data store requires additional setup
            through the user interface.
            </summary>
            <returns>True if setup is required, otherwise, false.</returns>
            <remarks>For example, a simple file based data store may not need
            to know anything additional to store and retrieve data.  However,
            a database would require a database name, server, user name
            and password to successfully store and retrieve data.</remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.IsProperlyConfigured">
            <summary>
            Query to the data store to find out if this data store
            is properly configured.
            </summary>
            <returns>True if properly configured, otherwise, false.</returns>
            <remarks>Some data stores will need to be configured before they are
            used.  If this function returns false, the user cannot
            proceed until the data store is properly configured.</remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.DoSettings">
            <summary>
            The user interface will call this function when settings
            are required.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.ForceDefaultSettings">
            <summary>
            The user interface will call this function when it is not
            possible to bring up dialogs or screens.  This is an
            opportunity for the data store to force the bare
            minimum options for it to operate.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.LastError">
            <summary>
            Retrieves the last error stored in the data store.
            </summary>
            <returns>string containing an error message.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.GetName">
            <summary>
            Retrieves the friendly name of this data store.
            </summary>
            <returns>string containing the name.</returns>
            <remarks>This is how the data store will appear
            to the user.</remarks>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.GetDescription">
            <summary>
            Retrieves the description for this data store.
            </summary>
            <returns>string containing the description.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.CompanyName">
            <summary>
            Retrieves the company name of the company that built
            this data store.
            </summary>
            <returns>string containing a company name.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.Version">
            <summary>
            Retrieves the version number of this data store.
            </summary>
            <returns>string containing the version number.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.id">
            <summary>
            Retrieves the unique identifier of this data store.
            </summary>
            <returns>string containing the unique identifier.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataStorage.Flush">
            <summary>
            Forces the data store to flush the contents of its cache into
            persistent storage.
            </summary>
            <remarks>
            This is typically used in a file based data store where data may not
            be immediately saved to disk for performance reasons.  Most data stores
            may simply do nothing here.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.DataStorageUtil">
            <summary>
            Utility class that handles bar loading.
            </summary>
            <remarks>
            This class will interact with the data store to load bars.
            </remarks>
            <exclude />
        </member>
        <member name="T:RightEdge.Common.OrderUpdatedDelegate">
            <summary>
            Delegate used for updated orders.
            </summary>
            <param name="order">Order that was updated.</param>
            <param name="fill">If the order update was caused by the fill, holds the fill information.  Otherwise should be null.</param>
            <param name="information">Contains additional, broker supplied information.  For example, if the order was rejected, it may contain information as to why.</param>
        </member>
        <member name="T:RightEdge.Common.PositionUpdatedDelegate">
            <summary>
            Delegate used for updated positions.
            </summary>
            <param name="positionUpdate">Position that was updated</param>
        </member>
        <member name="T:RightEdge.Common.PositionAvailableDelegate">
            <summary>
            Called when the position is available.
            </summary>
            <param name="symbol">Symbol of the position.</param>
            <param name="shares">Number of shares.</param>
        </member>
        <member name="T:RightEdge.Common.IBroker">
            <summary>
            The base interface for all broker plugins.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IBroker.SetAccountState(RightEdge.Common.BrokerAccountState)">
            <summary>
            Called before <see cref="M:RightEdge.Common.IService.Connect(RightEdge.Common.ServiceConnectOptions)" /> to notify the broker of the list of orders that the system expects are pending,
            and the positions it expects are open.
            </summary>
            <param name="state">The account state when the system last shut down.</param>
            <remarks>
            <para>The broker can override the account state by setting <see cref="P:RightEdge.Common.BrokerAccountState.BrokerOverride" /> to true.
            It can then modify the <see cref="P:RightEdge.Common.BrokerAccountState.Positions" /> and <see cref="P:RightEdge.Common.BrokerAccountState.PendingOrders" />
            lists and RightEdge will use the modified account state.
            </para>
            <para>Note that if the broker sets this option to true, the positions created for your system will not have all
            of the information that the saved positions would have had.  Multiple positions per symbol will be combined into
            a single position.  There will be no profit target or stop loss on the positions (although the orders that were
            submitted as profit targets or stop losses may still be pending as UserSubmitted orders).  The orders and
            positions will have no timeout / bar count exit value.  Also, the open positions will only contain one trade in 
            their history instead of whatever history of fills may have occured.
            </para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IBroker.SyncAccountState">
            <summary>
            Called when the broker plugin should try to sync its orders with the orders at the broker.  Called by RightEdge after
            <see cref="M:RightEdge.Common.IService.Connect(RightEdge.Common.ServiceConnectOptions)" /> or after a reconnection.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IBroker.SubmitOrder(RightEdge.Common.BrokerOrder,System.String@)">
            <summary>
            Submits an order to the broker.
            </summary>
            <param name="order">Fully populated order.</param>
            <param name="orderId">out parameter to hold the unique ID generated by the broker plugin.</param>
            <returns>true if the order was submitted to the broker, false if not.</returns>
            <remarks>
            A true return value does not mean that the order was filled.  Listen on the OrderUpdatedDelegate to
            determine the status of the order as it is changed.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IBroker.CancelOrder(System.String)">
            <summary>
            Cancels an order that is submitted.
            </summary>
            <param name="orderId">Unique Id of this order as given in the SubmitOrder function.</param>
            <returns>True if the cancel request was successfully sent.</returns>
            <remarks>
            <para>
            A true return value does not mean that the order was cancelled.  Listen on the OrderUpdatedDelegate to
            determine if the cancellation was successful.
            </para><para>
            Only orders with a submitted or pending status can be cancelled.  Orders that are filled or
            rejected cannot be cancelled.
            </para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IBroker.CancelAllOrders">
            <summary>
            Cancels all orders currently submitted.
            </summary>
            <returns>True if cancellation requests were successfully sent, or there were no orders to cancel.</returns>
            <remarks>
            Only orders with a submitted or pending status can be cancelled.  Orders that are filled or
            rejected cannot be cancelled.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IBroker.GetBuyingPower">
            <summary>
            Retrieves the amount of buying power available as reported by the broker.
            </summary>
            <returns>Current buying power.</returns>
        </member>
        <member name="M:RightEdge.Common.IBroker.GetAccountBalance">
            <summary>
            Retrieves the current cash balance of the account.  This will be the same as <see cref="M:RightEdge.Common.IBroker.GetBuyingPower" /> unless there is an account margin factor.
            </summary>
            <returns>The current cash balance of the account.</returns>
        </member>
        <member name="M:RightEdge.Common.IBroker.GetOpenOrders">
            <summary>
            Retrieves orders that are currently open.
            </summary>
            <returns>A collection of <see cref="T:RightEdge.Common.BrokerOrder">BrokerOrder</see> classes.</returns>
        </member>
        <member name="M:RightEdge.Common.IBroker.GetOpenOrder(System.String)">
            <summary>
            Gets a single open order by unique Id.
            </summary>
            <param name="id">Unique Id of this order as given in the SubmitOrder function.</param>
            <returns>Returns the order assigned to this Id.  Return null or Nothing if no order is found with this Id.</returns>
        </member>
        <member name="M:RightEdge.Common.IBroker.GetShares(RightEdge.Common.Symbol)">
            <summary>
            Gets the number of shares currently held by this broker for the specified symbol.
            </summary>
            <param name="symbol">Symbol to query the number of shares for.</param>
            <returns>Number of shares held.</returns>
        </member>
        <member name="M:RightEdge.Common.IBroker.AddOrderUpdatedDelegate(RightEdge.Common.OrderUpdatedDelegate)">
            <summary>
            Used to subscribe to the OrderUpdatedDelegate.
            </summary>
            <param name="orderUpdated">OrderUpdatedDelegate instance</param>
        </member>
        <member name="M:RightEdge.Common.IBroker.RemoveOrderUpdatedDelegate(RightEdge.Common.OrderUpdatedDelegate)">
            <summary>
            Used to unsubscribe to the OrderUpdatedDelegate.
            </summary>
            <param name="orderUpdated">OrderUpdatedDelegate instance</param>
        </member>
        <member name="M:RightEdge.Common.IBroker.AddPositionAvailableDelegate(RightEdge.Common.PositionAvailableDelegate)">
            <summary>
            Used to subscribe to the PositionAvailableDelegate.
            </summary>
            <param name="positionAvailable">PositionAvailableDelegate instance</param>
        </member>
        <member name="M:RightEdge.Common.IBroker.RemovePositionAvailableDelegate(RightEdge.Common.PositionAvailableDelegate)">
            <summary>
            Used to unsubscribe to the PositionAvailableDelegate.
            </summary>
            <param name="positionAvailable">PositionAvailableDelegate instance</param>
        </member>
        <member name="M:RightEdge.Common.IBroker.GetService">
            <summary>
            Retrieves the <see cref="T:RightEdge.Common.IService">IService</see> instance associated with this broker.
            </summary>
            <returns>IService instance.</returns>
        </member>
        <member name="M:RightEdge.Common.IBroker.IsLiveBroker">
            <summary>
            Determines whether or not this is a live broker.  Simulated brokers should implement the <see cref="T:RightEdge.Common.ISimBroker" /> interface.
            </summary>
            <returns>True if this is a live broker, false if this is a simulated broker.</returns>
        </member>
        <member name="M:RightEdge.Common.IBroker.CustomMessage(System.String,System.Object)">
            <summary>
            Sends a custom message to the broker.  This can allow direct integration between a trading system and a broker plugin.
            </summary>
            <param name="type">A name for the type of message being sent.</param>
            <param name="value">User-defined data for the message.</param>
            <returns>User-defined data to return from the broker to the trading system.</returns>
        </member>
        <member name="T:RightEdge.Common.ISimBroker">
            <summary>
            Interface for paper trade brokers.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ISimBroker.SimBar(RightEdge.Common.NewBarEventArgs)">
            <summary>
            Called by the framework to indicate that a new simulated bar has arrived.
            </summary>
            <param name="newBars">Current bar information.</param>
        </member>
        <member name="M:RightEdge.Common.ISimBroker.SimClose(RightEdge.Common.NewBarEventArgs)">
            <summary>
            Fills orders based on the close prices of a bar.
            </summary>
            <param name="bars">Current bar information.</param>
        </member>
        <member name="M:RightEdge.Common.ISimBroker.SimTick(RightEdge.Common.Symbol,RightEdge.Common.TickData)">
            <summary>
            Called by the framework to indicate that a new simulated tick has arrived.
            </summary>
            <param name="symbol">Symbol of the tick.</param>
            <param name="tick">Tick data, including the type, price, and size.</param>
        </member>
        <member name="M:RightEdge.Common.ISimBroker.SetAccountBalance(System.Double)">
            <summary>
            Sets the available buying power.
            </summary>
            <param name="value">Buying power in local currency.</param>
            <remarks>
            Only used for simulated brokers.  Live brokers will ignore this function.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ISimBroker.SetAccountInfo(RightEdge.Common.IAccountInfo)">
            <summary>
            Sets the <see cref="T:RightEdge.Common.IAccountInfo" /> instance.
            </summary>
            <param name="accountInfo">IAccountInfo instance to set.</param>
        </member>
        <member name="M:RightEdge.Common.ISimBroker.Deposit(System.Double)">
            <summary>
            Deposits the specified amount into the account.
            </summary>
            <param name="amount">Amount in the account's currency.</param>
            <returns>Standard <see cref="T:RightEdge.Common.ReturnCode" /></returns>
        </member>
        <member name="M:RightEdge.Common.ISimBroker.Withdraw(System.Double)">
            <summary>
            Withdrawals the specified amount into the account.
            </summary>
            <param name="amount">Amount in the account's currency.</param>
            <returns>Standard <see cref="T:RightEdge.Common.ReturnCode" /></returns>
        </member>
        <member name="T:RightEdge.Common.IBarDataRetrieval">
            <summary>
            Implement this interface to create a bar data retrieval
            plugin.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IBarDataRetrieval.RetrieveData(RightEdge.Common.Symbol,System.Int32,System.DateTime,System.DateTime,RightEdge.Common.BarConstructionType)">
            <summary>
            This function is called to perform the bar data retrieval.
            </summary>
            <param name="symbol">Symbol requested</param>
            <param name="frequency">Data frequency requested</param>
            <param name="startDate">Get data starting at the specified date.</param>
            <param name="endDate">Get data up to this date.</param>
            <param name="barConstruction">The bar construction type to use.</param>
            <returns>A list of bar data retrieved, in ascending date order.</returns>
        </member>
        <member name="M:RightEdge.Common.IBarDataRetrieval.GetService">
            <summary>
            Returns an instance of this service.
            </summary>
            <returns>IService instance.</returns>
        </member>
        <member name="T:RightEdge.Common.IIndicator">
            <summary>
            Calculates indicator values from Bar Data.
            </summary>
            <remarks>
            <para>
            This interface is used to calculate indicators values from Bar Data.  If you have an
            indicator where you generally select one <see cref="T:RightEdge.Common.BarElement" /> to run the calculation
            on, that you would like to be able to run on the output of another indicator, you should
            consider using the <see cref="T:RightEdge.Common.ISeriesCalculator" /> interface.
            </para>
            <para>
            When writing indicators, it may be convenient to derive from the <see cref="T:RightEdge.Common.IndicatorBase" />
            class, which implements some of the functionality of the <see cref="T:RightEdge.Common.IIndicator" /> interface.
            </para>
            <note type="implementnotes">
            You should add an <see cref="T:RightEdge.Common.IndicatorAttribute" /> to your indicator class if you want it to show up
            in the RightEdge indicator list.  You should add an <see cref="T:RightEdge.Common.ConstructorArgument" /> attribute to your
            indicator class constructor for each argument the constructor takes.
            </note>
            </remarks>
            
        </member>
        <member name="M:RightEdge.Common.IIndicator.SetBars(RightEdge.Common.RList{RightEdge.Common.BarData})">
            <summary>
            Calculates indicator values for a series of Bar Data.
            </summary>
            <param name="bars">A list of bar data objects for which the indicator value should be calculated</param>
            <remarks>
            <para>
            This  method will calculate the indicator values for the bar data series supplied in <paramref name="bars" />.
            The list of values can be accessed with the <see cref="P:Item" /> indexer.
            </para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IIndicator.AppendBar(RightEdge.Common.BarData)">
            <summary>
            Adds a new bar to the indicator.
            </summary>
            <param name="bar">The new bar</param>
            <remarks>
            This method adds a bar to the series of bars the indicator value is calculated for, and updates the indicator
            values.  This is used in realtime or simulation when a new bar comes in so that the whole series does not
            necessarily have to be recalculated.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.IIndicatorPlugin">
            <summary>
            Stores information about an indicator.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.GetName">
            <summary>
            Gets the name of the indicator.
            </summary>
            <returns>string containing the name of the indicator.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.GetGroupName">
            <summary>
            Gets the group name of the indicator.
            </summary>
            <remarks>
            The group name is optional, however, if specified the indicator will
            be grouped under this name.  If the name does not exist, it will
            be created as a top level node in the indicator tree.
            </remarks>
            <returns>string containing the group name of the indicator.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.GetDescription">
            <summary>
            Gets the description of this indicator.
            </summary>
            <returns>string containing the description.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.GetAuthor">
            <summary>
            Gets the author of this indicator.
            </summary>
            <remarks>
            This can be the name of the individual that created this
            indicator plugin or the company name.
            </remarks>
            <returns>string containing the author.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.GetCompanyName">
            <summary>
            Gets the company name of this indicator.
            </summary>
            <remarks>
            This can be the name of the individual that created this
            indicator plugin or the company name.
            </remarks>
            <returns>string containing the company name of this indicator.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.GetVersion">
            <summary>
            Gets the version of this indicator.
            </summary>
            <returns>string containing the version text.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.id">
            <summary>
            Gets the ID of this indicator.
            </summary>
            <remarks>
            This needs to be a unique identifier such as a GUID.
            </remarks>
            <returns>string containing the ID</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.GetHelp">
            <summary>
            Gets the help text for this indicator.
            </summary>
            <remarks>
            This is displayed when the user requests more information about
            the indicator.  Display information such as indicator history
            and recommended usage for this indicator.
            </remarks>
            <returns>string containing help.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.DefaultDrawingPane">
            <summary>
            Gets the default drawing pane name.
            </summary>
            <remarks>
            This value is a recommendation for the chart pane for which this indicator
            will be drawn.  This can be overridden by the user.
            </remarks>
            <returns>string containing the default drawing pane.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.DefaultLineColor">
            <summary>
            Gets the default line color.
            </summary>
            <returns>Color object containing the default drawing color.</returns>
        </member>
        <member name="M:RightEdge.Common.IIndicatorPlugin.GetIndicatorClassName">
            <summary>
            Gets the indicator class name.
            </summary>
            <remarks>
            This is the link between the plugin interface and the indicator interface.
            Based on this name, RightEdge will create an instance of the indicator
            using this name.  A fully qualified name (including namespace information)
            is required.
            </remarks>
            <returns>string containing the class name.</returns>
        </member>
        <member name="T:RightEdge.Common.AttributePlugin">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.AttributePlugin.att">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.#ctor(RightEdge.Common.IndicatorAttribute)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.GetName">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.GetGroupName">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.GetDescription">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.GetAuthor">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.GetCompanyName">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.GetVersion">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.id">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.GetHelp">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.DefaultDrawingPane">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.DefaultLineColor">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.AttributePlugin.GetIndicatorClassName">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.AttributePlugin.Attribute">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IRECustomTypeDescriptor">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.IRECustomTypeDescriptor.GetREAttributes">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.ConstructorArgumentType">
            <summary>
            Enum containing the support indicator argument types.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.String">
            <summary>
            String argument.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.Integer">
            <summary>
            Integer argument.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.Double">
            <summary>
            Double argument.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.BarElement">
            <summary>
            BarElement enum argument.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.Enum">
            <summary>
            Generic enum argument.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.ChartPane">
            <summary>
            ChartPane argument.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.UserDefined">
            <summary>
            User defined or undefined argument.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.Boolean">
            <summary>
            Boolean argument
            </summary>
        </member>
        <member name="F:RightEdge.Common.ConstructorArgumentType.Int64">
            <summary>
            A 64-bit Integer argument
            </summary>
        </member>
        <member name="T:RightEdge.Common.ConstructorArgument">
            <summary>
            IndicatorArgument class
            </summary>
            <remarks>
            Most indicators require some sort of parameters to be able
            to successfully perform their respective calculations.
            The IndicatorArgument is a way to allow RightEdge to determine
            what type of argument is needed at runtime.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ConstructorArgument.#ctor">
            <summary>
            Constructs an IndicatorArgument instance.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ConstructorArgument.#ctor(System.String,RightEdge.Common.ConstructorArgumentType)">
            <summary>
            Constructs an IndicatorArgument instance.
            </summary>
            <param name="name">Specifies a name for this indicator argument.</param>
            <param name="type">Specifies the type</param>
        </member>
        <member name="M:RightEdge.Common.ConstructorArgument.#ctor(System.String,RightEdge.Common.ConstructorArgumentType,System.Object)">
            <summary>
            Constructs an IndicatorArgument instance.
            </summary>
            <param name="name">Specifies a name for this indicator argument.</param>
            <param name="type">Specifies the type</param>
            <param name="value">Specifies an initial value.</param>
        </member>
        <member name="M:RightEdge.Common.ConstructorArgument.#ctor(System.String,RightEdge.Common.ConstructorArgumentType,System.Object,System.Int32)">
            <summary>
            Constructs an IndicatorArgument instance.
            </summary>
            <param name="name">Specifies a name for this indicator argument.</param>
            <param name="type">Specifies the type</param>
            <param name="value">Specifies an initial value.</param>
            <param name="order">Specifies the order of this argument.</param>
        </member>
        <member name="M:RightEdge.Common.ConstructorArgument.#ctor(RightEdge.Common.ConstructorArgument)">
            <summary>
            Constructs an IndicatorArgument instance.
            </summary>
            <param name="constructorArgument">Input containing a fully constructed IndicatorArgument.</param>
        </member>
        <member name="M:RightEdge.Common.ConstructorArgument.Clone">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.ConstructorArgument.Name">
            <summary>
            Gets or sets the friendly name of this argument.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ConstructorArgument.Type">
            <summary>
            Gets or sets the argument type.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ConstructorArgument.Value">
            <summary>
            Gets or sets the value of this argument.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ConstructorArgument.Order">
            <summary>
            Gets or sets the order number that is used
            for ordering the arguments when the indicator
            is constructed.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ConstructorArgument.EnumValues">
            <summary>
            Serialized values.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IndicatorAttribute">
            <summary>
            <see cref="T:RightEdge.Common.RightEdgeObjectAttribute">RightEdgeObjectAttribute</see> derived class for indicators.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorAttribute.#ctor">
            <summary>
            Constructs an IndicatorAttribute instance.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorAttribute.#ctor(System.Drawing.KnownColor)">
            <summary>
            Constructs an IndicatorAttribute instance with a KnownColor.
            </summary>
            <param name="defaultLineColor">Sets the default line color to this known color.</param>
        </member>
        <member name="M:RightEdge.Common.IndicatorAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an IndicatorAttribute instance with an RGB value.
            </summary>
            <param name="red">Red value.  0-255.</param>
            <param name="green">Green value.  0-255.</param>
            <param name="blue">Blue value.  0-255.</param>
        </member>
        <member name="M:RightEdge.Common.IndicatorAttribute.GetIndicatorAttribute(System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.IndicatorAttribute.GroupName">
            <summary>
            Gets or sets the group name.
            </summary>
            <remarks>
            This is the indicator group name that RightEdge will put the indicator under in
            the indicator tree within the user interface.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IndicatorAttribute.DefaultDrawingPane">
            <summary>
            Gets or sets the default drawing pane for the indicator.
            </summary>
            <remarks>
            If this value is null or Nothing, the Price Pane is used.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IndicatorAttribute.DefaultLineColor">
            <summary>
            Gets or sets the line color of the indicator.
            </summary>
        </member>
        <member name="T:RightEdge.Common.YYEIndicatorAttribute">
            <summary>
            <see cref="T:RightEdge.Common.IndicatorAttribute">IndicatorAttribute</see> derived class that aids
            in building indicator attributes.
            </summary>
        </member>
        <member name="M:RightEdge.Common.YYEIndicatorAttribute.#ctor">
            <summary>
            Constructs an instance using the default parameters.
            </summary>
        </member>
        <member name="M:RightEdge.Common.YYEIndicatorAttribute.#ctor(System.Drawing.KnownColor,RightEdge.Common.YYEIndicatorAttribute.EIndicatorGroup)">
            <summary>
            Constructs an instance using the specified color and group.
            </summary>
            <param name="ecolor">Sets the indicator line color.</param>
            <param name="group">Sets the indicator group.</param>
        </member>
        <member name="M:RightEdge.Common.YYEIndicatorAttribute.SetDefaults">
            <summary>
            Override this function to set desired defaults.
            </summary>
            <remarks>
            By default, this class is specific to Yye Software in that it sets
            the author, company to Yye Software.  Override this to set your own
            default company and author.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.YYEIndicatorAttribute.GetMetaDataText(RightEdge.Common.IIndicatorPlugin)">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.YYEIndicatorAttribute.EIndicatorGroup">
            <summary>
            Indicator groupings that exist by default in the RightEdge user interface.
            </summary>
        </member>
        <member name="F:RightEdge.Common.YYEIndicatorAttribute.EIndicatorGroup.Other">
            <summary>
            The "other" indicator group.
            </summary>
        </member>
        <member name="F:RightEdge.Common.YYEIndicatorAttribute.EIndicatorGroup.Volume">
            <summary>
            The Volume indicator group.
            </summary>
        </member>
        <member name="F:RightEdge.Common.YYEIndicatorAttribute.EIndicatorGroup.Momentum">
            <summary>
            The Momentum indicator group.
            </summary>
        </member>
        <member name="F:RightEdge.Common.YYEIndicatorAttribute.EIndicatorGroup.Trend">
            <summary>
            The Trend indicator group.
            </summary>
        </member>
        <member name="F:RightEdge.Common.YYEIndicatorAttribute.EIndicatorGroup.Volatility">
            <summary>
            The Volatility indicator group.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IndicatorBase">
            <summary>
            Base class for all indicators.
            </summary>
            <remarks>
            IndicatorBase implements the IIndicator interface.  Derive
            all indicators that do not require chaining or looking back from IndicatorBase.
            <seealso cref="T:RightEdge.Common.SeriesCalculatorBaseSimple">SeriesCalculatorBaseSimple</seealso>
            <seealso cref="T:RightEdge.Common.SeriesCalculatorBaseWithValues">SeriesCalculatorBaseWithValues</seealso>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IndicatorBase.CalcSeriesValues(RightEdge.Common.RList{RightEdge.Common.BarData})">
            <summary>
            Overload to optimize the way an entire series of BarData might be handled.
            </summary>
            <param name="bars">Bar list to perform indicator calculation on.</param>
            <returns>List of doubles containing the results.</returns>
        </member>
        <member name="M:RightEdge.Common.IndicatorBase.CalcNextValue(RightEdge.Common.BarData)">
            <summary>
            Called to calculate the next value in the series.
            </summary>
            <param name="bar">The latest bar passed in to perform the calculation on.</param>
            <returns>A double containing the newly calculated value.</returns>
        </member>
        <member name="F:RightEdge.Common.IndicatorBase._values">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.IndicatorBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorBase.SetBars(RightEdge.Common.RList{RightEdge.Common.BarData})">
            <summary>
            Sets the list of BarData associated with this indicator instance.
            </summary>
            <param name="bars">A list of BarData instances.</param>
        </member>
        <member name="M:RightEdge.Common.IndicatorBase.AppendBar(RightEdge.Common.BarData)">
            <summary>
            Adds a new bar to an indicator instance.  The indicator
            will recalculate and append a new indicator value to
            be associated with the new bar of data.
            </summary>
            <param name="bar">New incoming bar data.</param>
        </member>
        <member name="M:RightEdge.Common.IndicatorBase.LookBack(System.Int32)">
            <summary>
            Looks back within the series for the specified value.  A value of 0 represents the most recent value.
            </summary><param name="nBars">Number of bars to lookback in the series.</param><returns>The value contained at the specified index.</returns><remarks>
            A series is a collection of values.  The values within series can be referenced using the Lookback method.
            Use 0 to get the most recent value in the series.  To reference values further back in time, pass a value
            greater than 0.  For example, if the series is created against daily bars, to reference yesterday's value
            use Lookback(1).  To reference the day before yesterday, use Lookback(2) and so on.  Use the
            <see cref="P:RightEdge.Common.ISeries.Count">Count</see> method to determine how many values are contained
            within the series.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IndicatorBase.ChartSettings">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.IndicatorBase.Current">
            <summary>
            The current value of the series.  Using this property is the same as calling LookBack(0).
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorBase.Count">
            <summary>
            Number of values present in this indicator calculation series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorBase.OldValuesChange">
            <summary>
            Indicates whether previous values in the series change when a new value is added.
            </summary><value>
            Indicates whether previous values in the series change when a new value is added.
            </value><remarks>
            Usually, in a series that is related to bar data, a new value will be calculated
            and added to the end of the series when a new bar comes in.  The previous values
            of the series will not change.  Return true for this property to indicate that
            this is not the case.  If this returns true, then the <see cref="P:RightEdge.Common.ISeries.OldestValueChanged" />
            property should reflect what values changed.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IndicatorBase.OldestValueChanged">
            <summary>
            The lookback index of the oldest value that changed.  Should be zero unless <see cref="P:RightEdge.Common.ISeries.OldValuesChange" /> is true.
            </summary><value>
            The lookback index of the oldest value that changed.  Should be zero unless <see cref="P:RightEdge.Common.ISeries.OldValuesChange" /> is true.
            </value>
        </member>
        <member name="T:RightEdge.Common.IndicatorCollections">
            <summary>
            Class that manages the list of indicators.
            </summary>
            <remarks>
            There is an instance of this class created with
            every trading system.  This instance is global
            across all symbols.  <B>There is no need to create an instance of this.</B>
            </remarks>
            <example>Add a 50 period SMA indicator to the system (C#)
            <code>
            Indicators["SMA50"].CreateIndicator(new SMA(50));
            
            // Specify the closing price as the input.
            Indicators["SMA50"].SetInputs(BarElement.Close);
            
            // Set the series color
            Indicators["SMA50"].SeriesColor = Color.Green;
            
            // Indicate that it will be added to the charts.
            Indicators["SMA50"].AddToCharts();
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.IndicatorCollections.#ctor(RightEdge.Common.SystemData)">
            <summary>
            Constructs an IndicatorCollections instance.
            </summary>
            <param name="baseSystem">A constructed BaseSystem object.</param>
        </member>
        <member name="P:RightEdge.Common.IndicatorCollections.Keys">
            <summary>
            Gets the Keys or names of the indicators
            currently held.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorCollections.Item(System.String)">
            <summary>
            Gets a list of indicator instances for this specified id.
            </summary>
            <param name="id">string containing the id.</param>
            <returns>SymbolIndicatorCollection containing the indicator instances.  Can be empty.</returns>
        </member>
        <member name="T:RightEdge.Common.SymbolIndicatorCollection">
            <summary>
            Collection that contains an indicator instance
            for each Symbol.
            </summary>
            <remarks>
            This collection is built by the <see cref="T:RightEdge.Common.IndicatorCollections" /> class.
            It is not recommended that you create an instance of this class yourself.
            Use this collection to iterate over each indicator at the symbol level.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolIndicatorCollection.#ctor(RightEdge.Common.SystemData,System.String)">
            <summary>
            Constructs a SymbolIndicatorCollection object.
            </summary>
            <param name="baseSystem">BaseSystem instance.</param>
            <param name="name">The name or key for this indicator grouping.  ex. "SMA50"</param>
        </member>
        <member name="M:RightEdge.Common.SymbolIndicatorCollection.AddToCharts">
            <summary>
            Adds this indicator grouping to the charts.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolIndicatorCollection.RemoveFromCharts">
            <summary>
            Removes this indicator grouping from the charts.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolIndicatorCollection.CreateIndicator(RightEdge.Common.ISeries)">
            <summary>
            Creates an instance of the specified indicator.
            </summary>
            <param name="indicator">An instantiated indicator</param>
            <remarks>
            Use CreateIndicator to create an instance of an indicator
            that can be used across all symbols that are currently running
            in the system.
            </remarks>
            <example>Add a 50 period SMA indicator to the system (C#)
            <code>
            Indicators["SMA50"].CreateIndicator(new SMA(50));
            
            // Specify the closing price as the input.
            Indicators["SMA50"].SetInputs(BarElement.Close);
            
            // Set the series color
            Indicators["SMA50"].SeriesColor = Color.Green;
            
            // Indicate that it will be added to the charts.
            Indicators["SMA50"].AddToCharts();
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.SymbolIndicatorCollection.SetInputs(System.Object[])">
            <summary>
            Specifies the input or inputs for this indicator.
            </summary>
            <remarks>
            Not only is this function used to set simple inputs such as 
            BarElement, it is also used for setting inputs from other indicator
            instances.  This is the basis for indicator "chaining".
            </remarks>
            <example>Construct a smoothed EMA using indicator chaining(C#)
            <code>
            Indicators["EMA10"].CreateIndicator(new EMA(10));
            
            // Create an instance of EMA that will be smoothed
            // using the instance above.
            Indicators["EMASmoothed"].CreateIndicator(new EMA(10));
            
            // Specify the closing price as the input for our primary EMA.
            Indicators["EMA10"].SetInputs(BarElement.Close);
            
            // Chain EMASmoothed with EMA10
            Indicators["EMASmoothed"].SetInputs("EMA10");
            
            // Set the series color for the smoothed EMA
            Indicators["EMASmoothed"].SeriesColor = Color.Crimson;
            
            // Add smoothed EMA to the charts.
            Indicators["EMASmoothed"].AddToCharts();
            </code>
            </example>
            <param name="inputs">Trigger inputs.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolIndicatorCollection.FillIndicatorRegion(System.String,System.Drawing.Color)">
             <summary>
             Fills the specified color between two indicators.
             </summary>
             <remarks>
             Use this function to shade an area between two indicators.  For
             example, it is easier to visualize the area between two Bollinger
             Bands (upper and lower) or any other set of indicators that
             are always parallel to one another.
             </remarks>
             <param name="linkedSeriesName">Series name to link with.</param>
             <param name="fillColor">Color to fill the region with.</param>
             <example>Shade an upper and lower band (C#)
             <code>
            	Indicators["WIDNERL"].CreateIndicator(new WidnerLowerBand(50));
            	Indicators["WIDNERL"].SeriesColor = Color.Red;
            	Indicators["WIDNERL"].AddToCharts();
            
            	Indicators["WIDNERU"].CreateIndicator(new WidnerUpperBand(50));
            	Indicators["WIDNERU"].SeriesColor = Color.Red;
            	Indicators["WIDNERU"].AddToCharts();
             
             // Link the upper Widner band to the lower Widner band.
            	Indicators["WIDNERU"].FillIndicatorRegion("WIDNERL", Color.Gray);
             
             // This can easily be done the same way with Bollinger bands.
             </code>
             </example>
        </member>
        <member name="M:RightEdge.Common.SymbolIndicatorCollection.FillIndicatorRegion(System.String)">
            <summary>
            Fills an area between two indicators with the default color.
            </summary>
            <param name="linkedSeriesName">Series name to link with.</param>
        </member>
        <member name="P:RightEdge.Common.SymbolIndicatorCollection.Name">
            <summary>
            A name which can be used to reference the indicator.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolIndicatorCollection.Item(RightEdge.Common.Symbol)">
            <summary>
            Retrieves the data series for the specified Symbol
            </summary>
            <param name="symbol">Symbol to retrieve the ISeries for.</param>
            <returns>ISeries values.</returns>
        </member>
        <member name="P:RightEdge.Common.SymbolIndicatorCollection.ChartPaneName">
            <summary>
            The name of the chart pane the series will be displayed on.  If this is null, it will be displayed on the price pane.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolIndicatorCollection.SeriesColor">
            <summary>
            The color which will be used to draw the series on the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolIndicatorCollection.LineSize">
            <summary>
            The line size of the series when drawn on the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolIndicatorCollection.LineType">
            <summary>
            The line type of the series when drawn on the chart.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IndicatorManager">
            <summary>
            Manages indicators and user series.
            </summary>
            <remarks>
            This class handles calling the NewBar method for each indicator in the system in the correct order.
            Indicators must be registered with this class for this to work.  Indicators that are declared as
            fields of your symbol script class will automatically be registered.  If you need to register an indicator
            manually, you can call <see cref="M:RightEdge.Common.IndicatorManager.Register(RightEdge.Common.ISeries,RightEdge.Common.Symbol,System.String)" /> from your Startup method.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IndicatorManager.Register(RightEdge.Common.ISeries,RightEdge.Common.Symbol,System.String)">
            <summary>
            Registers a series with the manager.
            </summary>
            <param name="series">A series to register.</param>
            <param name="symbol">The symbol to which the series belongs.  May be null for a system-level series.</param>
            <param name="name">The name to use for the series.</param>
            <remarks>Registering a series a second time will have no effect.</remarks>
        </member>
        <member name="M:RightEdge.Common.IndicatorManager.RegisterMembers(System.Object,RightEdge.Common.Symbol)">
            <summary>
            Uses reflection to find fields of the specified object that implement <see cref="T:RightEdge.Common.ISeries" />,
            and registers those objects.
            </summary>
            <param name="obj">The object whose members should be registered.</param>
            <param name="symbol">The symbol to which the object's series belong.</param>
        </member>
        <member name="M:RightEdge.Common.IndicatorManager.SetFrequency(RightEdge.Common.ISeries,RightEdge.Common.Frequency)">
            <summary>
            Sets up a frequency for the specified ISeries.
            </summary>
            <param name="series">Input series (typically an indicator)</param>
            <param name="frequency">Desired frequency to register.</param>
        </member>
        <member name="M:RightEdge.Common.IndicatorManager.Initialize">
            <summary>
            Called automatically by RightEdge and should not be called by system code.
            </summary>
            <remarks>
            Registers all inputs of currently registered series, calculates the order in which NewBar should be called
            for indicators, and modifies inputs of cross-symbol indicators.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IndicatorManager.NewBar(RightEdge.Common.Internal.FrequencyNewBarEventArgs)">
            <summary>
            Called by RightEdge, and should not be called by your system code.  Calls NewBar for each indicator in the correct order.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorManager.UpdateCharts">
            <summary>
            Updates the series in the charts.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorManager.FillIndicatorRegion(RightEdge.Common.Symbol,RightEdge.Common.ISeries,RightEdge.Common.ISeries,System.Drawing.Color)">
            <summary>
            Shades the area between the two series on a chart.
            </summary>
            <param name="symbol">The symbol corresponding to series.</param>
            <param name="series1">The first series.</param>
            <param name="series2">The second series.</param>
            <param name="fillColor">The color of the shaded region.</param>
        </member>
        <member name="T:RightEdge.Common.RiskAssessmentCalculationType">
            <summary>
            The type of calculation this result represents.
            </summary>
            <remarks>
            The results returned from a risk assessment plugin are grouped by
            the RiskAssessmentCalculationType enumeration.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentCalculationType.LongAndShort">
            <summary>
            Result for the calculation based on both long and short positions in the portfolio.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentCalculationType.LongOnly">
            <summary>
            Result for the calculation based on only the long positions in the portfolio.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentCalculationType.ShortOnly">
            <summary>
            Result for the calculation based on only the short positions in the portfolio.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentCalculationType.BuyAndHold">
            <summary>
            Result for the calculation based on only the buy and hold side positions in the portfolio.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IRiskAssessment">
            <summary>
            Risk assessment plugin interface.
            </summary>
            <remarks>
            All portfolio risk assessment plugins must implement this interface.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessment.PerformCalculation(RightEdge.Common.RiskAssessmentCalculationType,RightEdge.Common.SystemData)">
            <summary>
            Called by RightEdge to perform the specified risk assessment calculation.
            </summary>
            <param name="calculationType">Refers to the requested calculation type.</param>
            <param name="baseSystem">Passes in the <see cref="T:RightEdge.Common.SystemData">system</see> that this risk assesment calculation is perfomed on.</param>
            <returns>value of the calculation.</returns>
            <remarks>
            Use the position data within the <see cref="T:RightEdge.Common.SystemData">SystemData</see> instance to perform the calculations for
            the specified calculation types.  Return NaN (not a number) if the calculation cannot be performed because of lack of data or 
            due to the fact that the risk assessment does not support the calculation type.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.RiskAssessmentResultType">
            <summary>
            Risk assessment result type.
            </summary>
            <remarks>
            This result type tells the RightEdge user interface how to format
            the result returned from the risk assessment plugin.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentResultType.Percentage">
            <summary>
            Result type should be formatted as a percentage.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentResultType.Dollar">
            <summary>
            Result type should be formatted as currency.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentResultType.Value">
            <summary>
            Result type should be formatted as an unmodified value.
            </summary>
        </member>
        <member name="T:RightEdge.Common.RiskAssessmentResults">
            <summary>
            Contains the collection of calculated results for a risk assessment plugin.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentResults.name">
            <summary>
            Name is it will appear in the system results list.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentResults.type">
            <summary>
            Type of this result.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentResults.results">
            <summary>
            Dictionary that contains the calculated results.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IRiskAssessmentPlugin">
            <summary>
            Interface used for the user interface portion of a risk assessment plugin.
            </summary>
            <remarks>
            This interface must be implemented.  Use the GetClassName() function to pass
            along the IRiskAssessment implementation to RightEdge so that it can associate
            the calculation plugin with the user interface plugin.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetName">
            <summary>
            Retrieves the friendly name of this plugin.
            </summary>
            <returns>the plugin's friendly name.</returns>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetDescription">
            <summary>
            Retrieves the description of this plugin.
            </summary>
            <returns>string containing the description.</returns>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetAuthor">
            <summary>
            Retrieves the author information for this plugin.
            </summary>
            <returns>string containing the author for this risk assessment plugin.</returns>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetCompanyName">
            <summary>
            Retrieves the company's name for this plugin.
            </summary>
            <returns>string containing the company's name associated with this plugin.</returns>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetVersion">
            <summary>
            Retrieves the version information for this plugin.
            </summary>
            <returns>string containing the version information for this risk assessment plugin.</returns>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.id">
            <summary>
            Retrieves the unique identifier associated with this risk assessment plugin.
            </summary>
            <returns>string containing the unique identifier associated with this risk assessment plugin</returns>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetHelp">
            <summary>
            Retrieves the help text associated with this risk assessment plugin.
            </summary>
            <returns>string containing the help text associated with this risk assessment plugin</returns>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetClassName">
            <summary>
            Retrieves the class name that performs the risk assessment calculation.
            </summary>
            <returns>string containing the class name that performs the risk assessment calculation.</returns>
            <remarks>
            This is the actual name of the class that implements the <see cref="T:RightEdge.Common.IRiskAssessment">IRiskAssessment</see>
            interface.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetResultType">
            <summary>
            Gets the result type for this plugin.
            </summary>
            <returns>Enumeration of the result type for this plugin.</returns>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.GetArgumentValues">
            <summary>
            Returns the persisted argument values
            </summary>
            <returns>A collection of persisted argument values.</returns>
            <remarks>
            Return null if no argument values are persisted and the user interface
            will be expected to get the defaults from the plugin itself.
            
            A plugin may want to persist some argument values.  For example, maybe a plugin requires
            the risk free rate of return.  This is something that should be configurable, but once
            set, typically will not have to be set again on a frequent basis.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IRiskAssessmentPlugin.SetArgumentValues(System.Collections.Generic.List{RightEdge.Common.RiskAssessmentArgument})">
            <summary>
            Sets the persisted argument values for this plugin.
            </summary>
            <param name="values">A collection of argument values to be persisted.</param>
            <remarks>
            Allows a plugin to store values/arguments that may be associated
            with this particular risk assessment plugin
            </remarks>
        </member>
        <member name="T:RightEdge.Common.ISystem">
            <summary>
            Interface that all systems must implement.
            </summary>
            <remarks>
            This should never be implemented by a system writer.  Derive a system
            from the <see cref="T:RightEdge.Common.SystemBase">SystemBase</see> abstract base class.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ISystem.Startup(RightEdge.Common.SystemData)">
            <summary>
            Startup function called at the start of a system run.
            </summary>
            <param name="baseSystem"><see cref="T:RightEdge.Common.SystemData">SystemData</see> instance assigned to this system.</param>
            <remarks>
            Most systems should override this function to set basic
            global system parameters such as profit targets, stop losses
            and indicator creation.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ISystem.NewBar">
            <summary>
            Called for each new bar
            </summary>
            <remarks>
            This function is called for each symbol active in the system.  Override
            this function to perform actions that are bar specific but not symbol
            specific.  For symbol specific actions such as buy and sell evaluations,
            override NewSymbolBar()
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ISystem.NewTick(RightEdge.Common.Symbol,RightEdge.Common.BarData,RightEdge.Common.TickData)">
            <summary>
            Tick level notification.
            </summary>
            <remarks>
            This function is called each time new tick data for the specified
            symbol is received.
            </remarks>
            <param name="symbol">Symbol that received a tick.</param>
            <param name="partialBar">The current bar that the tick will be added to.</param>
            <param name="tick">A <see cref="T:RightEdge.Common.TickData">TickData</see> structure instance containing the latest tick information.</param>
        </member>
        <member name="M:RightEdge.Common.ISystem.Shutdown">
            <summary>
            Called when the system is exiting.
            </summary>
            <remarks>
            This is the counterpart of Startup().  Use this function to perform
            final cleanup and evaluation.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.ServiceConnectOptions">
            <summary>
            Indicates what the service will be used for when <see cref="M:RightEdge.Common.IService.Connect(RightEdge.Common.ServiceConnectOptions)" /> is called.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ServiceConnectOptions.None">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ServiceConnectOptions.HistoricalData">
            <summary>
            Service will be used to download historical bar data.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ServiceConnectOptions.LiveData">
            <summary>
            Service will be used for live data streaming.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ServiceConnectOptions.Broker">
            <summary>
            Service will be used for broker functions.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ServiceEventType">
            <summary>
            Indicates the type of a service event message.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ServiceEventType.Disconnected">
            <summary>
            Indicates that the service has been disconnected.
            </summary>
        </member>
        <member name="F:RightEdge.Common.ServiceEventType.Reconnected">
            <summary>
            Indicates that the service has been reconnected.  Does not need to be raised if the reconnection is a result of calling the <see cref="M:RightEdge.Common.IService.Connect(RightEdge.Common.ServiceConnectOptions)" /> method explicitly.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ServiceEventArgs">
            <summary>
            Provides information that notifies RightEdge about a service event (for example, if it has disconnected or reconnected).
            </summary>
        </member>
        <member name="M:RightEdge.Common.ServiceEventArgs.#ctor">
            <summary>
            <see cref="T:RightEdge.Common.ServiceEventArgs" /> constructor.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ServiceEventArgs.EventType">
            <summary>
            The type of the message.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ServiceEventArgs.Message">
            <summary>
            A message describing the event or providing further information.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ServiceEventArgs.SuppressAutoReconnect">
            <summary>
            If true, indicates that RightEdge does not need to call <see cref="M:RightEdge.Common.IService.Connect(RightEdge.Common.ServiceConnectOptions)" /> periodically to try reconnecting
            in response to this message (which should be of type <see cref="F:RightEdge.Common.ServiceEventType.Disconnected" />).  The service will attempt
            to reconnect itself and send a service event with an event type <see cref="F:RightEdge.Common.ServiceEventType.Reconnected" /> when it is successful.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ServiceEventArgs.ShouldSyncAccountState">
            <summary>
            If true, indicates that RightEdge should call <see cref="M:RightEdge.Common.IBroker.SyncAccountState" /> in response to this message
            (which should be of type <see cref="F:RightEdge.Common.ServiceEventType.Reconnected" />).
            </summary>
        </member>
        <member name="T:RightEdge.Common.IService">
            <summary>
            Base service interface.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IService.ServiceName">
            <summary>
            Returns the service's friendly name.
            </summary>
            <returns>string containing the friendly name.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.Author">
            <summary>
            Returns the service's author.
            </summary>
            <returns>string containing the author.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.Description">
            <summary>
            Returns the service's description.
            </summary>
            <returns>string containing the description.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.CompanyName">
            <summary>
            Returns the service's company name.
            </summary>
            <returns>string containing the company name.</returns>
            <remarks>
            This can be blank.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IService.Version">
            <summary>
            Returns the version of this service.
            </summary>
            <returns>string containing the service version.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.id">
            <summary>
            Returns the unique identifier of this service.
            </summary>
            <returns>string containing the unique identifier.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.NeedsServerAddress">
            <summary>
            Determines whether or not this service will need a user defined IP address.
            </summary>
            <returns>true if the service should get the IP address from the user, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.NeedsPort">
            <summary>
            Determines whether or not this service will need a user defined port number.
            </summary>
            <returns>true if the service should get the port number from the user, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.NeedsAuthentication">
            <summary>
            Determines whether or not this service will need user defined authentication.
            </summary>
            <returns>true if the service should authenticate or get credentials from the user, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.SupportsMultipleInstances">
            <summary>
            Determines whether more than one instance of this service may be used at once.
            </summary>
            <returns>True if multiple instances can be used, false if only one instance can be used.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.GetBarDataInterface">
            <summary>
            Retrieves the <see cref="T:RightEdge.Common.IBarDataRetrieval">IBarDataRetrieval</see> instance associated with this service.
            </summary>
            <returns><see cref="T:RightEdge.Common.IBarDataRetrieval">IBarDataRetrieval</see> instance.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.GetTickDataInterface">
            <summary>
            Retrieves the <see cref="T:RightEdge.Common.ITickRetrieval">ITickRetrieval</see> instance associated with this service.
            </summary>
            <returns><see cref="T:RightEdge.Common.ITickRetrieval">ITickRetrieval</see> instance.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.GetBrokerInterface">
            <summary>
            Retrieves the <see cref="T:RightEdge.Common.IBroker">IBroker</see> instance associated with this service.
            </summary>
            <returns><see cref="T:RightEdge.Common.IBroker">IBroker</see> instance.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.HasCustomSettings">
            <summary>
            Returns whether the plugin has custom settings.
            </summary>
            <returns>True if the plugin has custom settings, false otherwise.</returns>
            <remarks>If the plugin has custom settings, then it should show a dialog allowing the user to
            modify them when <see cref="M:RightEdge.Common.IService.ShowCustomSettingsForm(RightEdge.Common.SerializableDictionary{System.String,System.String}@)" /> is called.</remarks>
        </member>
        <member name="M:RightEdge.Common.IService.ShowCustomSettingsForm(RightEdge.Common.SerializableDictionary{System.String,System.String}@)">
            <summary>
            Shows a dialog allowing custom plugin settings to be modified.
            </summary>
            <param name="settings">Dictionary containing existing settings.  This dictionary may be empty if the service has not previously been set up.</param>
            <returns>True if settings were modified, false if the user canceled or the plugin does not use custom settings.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.Initialize(RightEdge.Common.SerializableDictionary{System.String,System.String})">
            <summary>
            Initializes a service plugin.
            </summary>
            <param name="settings">A dictionary with the plugin's custom settings.</param>
            <returns>True if successful, false if there was an error.</returns>
            <remarks>If a plugin returns false from this method, the <see cref="M:RightEdge.Common.IService.GetError" /> method
            should return a description of the failure.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IService.Connect(RightEdge.Common.ServiceConnectOptions)">
            <summary>
            Performs a connect action to the specified service.
            </summary>
            <param name="connectOptions">Indicates how the service will be used.</param>
            <returns>true if the connection action was successful, otherwise, false.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.Disconnect">
            <summary>
            Performs a disconnect action to the specified service.
            </summary>
            <returns>true if the disconnection action was successful, otherwise, false.</returns>
        </member>
        <member name="M:RightEdge.Common.IService.GetError">
            <summary>
            Retrieves the last error text generated by this service.
            </summary>
            <returns>string containing the error text.</returns>
            <remarks>
            Call this function if any of the service calls return an error condition.  It is important to call this function
            immediately after the failure since the error text is reset for all subsequent calls into the service.
            </remarks>
        </member>
        <member name="E:RightEdge.Common.IService.ServiceEvent">
            <summary>
            Notifies RightEdge about a service event (for example, if it has disconnected or reconnected).
            </summary>
        </member>
        <member name="P:RightEdge.Common.IService.ServerAddress">
            <summary>
            Gets or sets the server address for this service.
            </summary>
            <remarks>
            This parameter is only used if NeedsServerAddress() returns true.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IService.Port">
            <summary>
            Gets or sets the port number for this server.
            </summary>
            <remarks>
            This parameter is only used if NeedsPort() returns true.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IService.UserName">
            <summary>
            Gets or sets the user name for this service.
            </summary>
            <remarks>
            This parameter is only used if NeedsAuthentication() returns true.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IService.Password">
            <summary>
            Gets or sets the password used for this service.
            </summary>
            <remarks>
            This parameter is only used if NeedsAuthentication() returns true.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IService.BarDataAvailable">
            <summary>
            Gets whether or not this service supports bar level data.
            </summary>
            <remarks>
            If bar level data is available, this indicates that this service supports retrieving historical data.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IService.TickDataAvailable">
            <summary>
            Gets whether or not this service support tick level data.
            </summary>
            <remarks>
            If tick level data is available, this indicates that this service supports retrieving tick data.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.IService.BrokerFunctionsAvailable">
            <summary>
            Gets whether or not broker functions are available for this service.
            </summary>
        </member>
        <member name="T:RightEdge.Common.GotTickData">
            <summary>
            Tick data received delegate.
            </summary>
            <param name="symbol">Symbol this tick data belongs to.</param>
            <param name="data">Populated <see cref="T:RightEdge.Common.TickData">TickData</see> structure.</param>
        </member>
        <member name="T:RightEdge.Common.ITickRetrieval">
            <summary>
            Interface used for live tick data retrieval.
            </summary>
        </member>
        <member name="M:RightEdge.Common.ITickRetrieval.SetWatchedSymbols(System.Collections.Generic.List{RightEdge.Common.Symbol})">
            <summary>
            Sets the list of symbols that will be listening for tick data.
            </summary>
            <param name="symbols">A collection of <see cref="T:RightEdge.Common.Symbol">Symbol</see> items.</param>
            <returns>true on success, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.ITickRetrieval.IsWatching">
            <summary>
            Determines if the service is listening for tick data.
            </summary>
            <returns>true if watching, else false.</returns>
        </member>
        <member name="M:RightEdge.Common.ITickRetrieval.StartWatching">
            <summary>
            Instructs the service to begin watching for tick data.
            </summary>
            <returns>true if the watch process has started successfully, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.ITickRetrieval.StopWatching">
            <summary>
            Instructs the service to stop watching for tick data.
            </summary>
            <returns>true if the watch process has stopped successfully, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.ITickRetrieval.GetService">
            <summary>
            Retrieves the <see cref="T:RightEdge.Common.IService">IService</see> instance for this plugin.
            </summary>
            <returns>Valid <see cref="T:RightEdge.Common.IService">IService</see> instance</returns>
        </member>
        <member name="P:RightEdge.Common.ITickRetrieval.RealTimeDataAvailable">
            <summary>
            Gets whether or not real time data is available.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ITickRetrieval.TickListener">
            <summary>
            Sets the listener function called when new tick data arrives.
            </summary>
        </member>
        <member name="T:RightEdge.Common.OptionCalculator">
            <summary>
            Class to calculate option prices and option partials or "greeks".
            </summary>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.#ctor">
            <summary>
            Constructs an OptionCalculator instance.
            </summary>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.#ctor(System.Double)">
            <summary>
            Constructs an instance of the option calculator class.
            </summary>
            <param name="historicalVolatility">the historical volatility value used for option calculation.</param>
            <remarks>Historical volatility can be retrieved from an external source or calculated using the
            <see cref="!:RightEdge.Indicators.HistoricalVolatility">Historical Volatility indicator</see></remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.#ctor(RightEdge.Common.Symbol,System.Double)">
            <summary>
            Constructs an instance of the option calculator class using the specified symbol.
            </summary>
            <param name="symbol">Symbol object.</param>
            <param name="historicalVolatility">the historical volatility value used for option calculation.</param>
            <remarks>This constructor uses information from the SymbolInformation object that is passed in
            such as current price, strike price, expiration, etc to calculate the option price.
            Historical volatility can be retrieved from an external source or calculated using the
            <see cref="!:RightEdge.Indicators.HistoricalVolatility">Historical Volatility indicator.</see></remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.LoadInterestRate">
            <summary>
            Loads the interest rate or current risk free rate of return.  This instance will go to Yahoo
            and pull the current price of ^IRX which is the 13-week treasury bill.  This is generally
            considered to be the going interest rate.
            </summary>
            <returns>double containing the current interest rate or -1 if there was an error retrieving.</returns>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.LoadInterestRate(System.String)">
            <summary>
            Loads the interest rate or current risk free rate of return.  This instance will go to Yahoo
            and pull the current price of the specified symbol.  The value or current price retrieved will
            be used as the interest rate.
            </summary>
            <param name="symbol">The symbol to retrieve data for.</param>
            <returns>double containing the current interest rate or -1 if there was an error retrieving.</returns>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetAmericanCallPrice(System.Double)">
            <summary>
            Gets the theoretical value of an American style call option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <returns>theoretical approximation of the call price</returns>
            <remarks>American style options differ from European options in that the option can be exercised
            at any point before expiration.  This calculation uses binomial approximation and assumes
            that there are no dividends.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetAmericanCallPrice(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the theoretical value of an American style call option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="expirationMonth">expiration month of the option.</param>
            <param name="expirationYear">expiration year of the option.</param>
            <returns>theoretical approximation of the call price</returns>
            <remarks>American style options differ from European options in that the option can be exercised
            at any point before expiration.  This calculation uses binomial approximation and assumes
            that there are no dividends.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetAmericanCallPrice(System.Double,System.Double,System.Int32)">
            <summary>
            Gets the theoretical value of an American style call option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="daysUntilExpiration">Number of days until expiration.</param>
            <returns>Theoretical price of the call.</returns>
            <remarks>This version is different in that it lets you supply the days until expiration instead of allowing the class to calculate it.
            This would be useful in cases where the option does not expire on the third Friday
            of the month.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetAmericanPutPrice(System.Double)">
            <summary>
            Gets the theoretical value of an American style put option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <returns>theoretical approximation of the put price</returns>
            <remarks>American style options differ from European options in that the option can be exercised
            at any point before expiration.  This calculation uses binomial approximation and assumes
            that there are no dividends.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetAmericanPutPrice(System.Double,System.Double,System.Int32)">
            <summary>
            Gets the theoretical value of an American style put option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="daysUntilExpiration">Number of days until expiration.</param>
            <returns>Theoretical price of the put.</returns>
            <remarks>This version is different in that it lets you supply the days until expiration instead of allowing the class to calculate it.
            This would be useful in cases where the option does not expire on the third Friday
            of the month.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetAmericanPutPrice(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the theoretical value of an American style put option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="expirationMonth">expiration month of the option.</param>
            <param name="expirationYear">expiration year of the option.</param>
            <returns>theoretical approximation of the put price</returns>
            <remarks>American style options differ from European options in that the option can be exercised
            at any point before expiration.  This calculation uses binomial approximation and assumes
            that there are no dividends.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetAmericanCallPartials(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the theoretical partials, or greeks for a call option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="expirationMonth">expiration month of the option.</param>
            <param name="expirationYear">expiration year of the option.</param>
            <returns>On success returns an OptionPartials structure with partials calculated</returns>
            <remarks>Partials or "greeks" measure sensitivities of an option's value to certain variables and are mostly used for hedging purposes</remarks>
            <example>Get a call option's delta value(C#)
            <code>
            // Retrieve the current historical volatility based on an already created instance of the historical volatility indicator.
            ISeries hvSeries = Indicators["HV"][symbol];
            double hvValue = hvSeries[hvSeries.Count - 1];
            
            // Create an OptionCalculator instance with the historical volatility value
            OptionCalculator optionCalc = new OptionCalculator(hvValue);
            
            Get the partials for the 38.00 strike price option expiring in December of 2006
            OptionPartials partials = optionCalc.GetAmericanCallPartials(bar.Close, 38.00, 12, 2006);
            // Display the delta value in a message box.
            MessageBox.Show(partials.Delta.ToString());
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.OptionPartials" />
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetAmericanPutPartials(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates the theoretical partials, or greeks for a put option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="expirationMonth">expiration month of the option.</param>
            <param name="expirationYear">expiration year of the option.</param>
            <returns>On success returns an OptionPartials structure with partials calculated</returns>
            <remarks>Partials or "greeks" measure sensitivities of an option's value to certain variables and are mostly used for hedging purposes</remarks>
            <example>Get a put option's delta value(C#)
            <code>
            // Retrieve the current historical volatility based on an already created instance of the historical volatility indicator.
            ISeries hvSeries = Indicators["HV"][symbol];
            double hvValue = hvSeries[hvSeries.Count - 1];
            
            // Create an OptionCalculator instance with the historical volatility value
            OptionCalculator optionCalc = new OptionCalculator(hvValue);
            
            Get the partials for the 38.00 strike price option expiring in December of 2006
            OptionPartials partials = optionCalc.GetAmericanPutPartials(bar.Close, 38.00, 12, 2006);
            // Display the delta value in a message box.
            MessageBox.Show(partials.Delta.ToString());
            </code>
            </example>
            <seealso cref="T:RightEdge.Common.OptionPartials" />
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetEuropeanCallPrice(System.Double)">
            <summary>
            Gets the theoretical value of a European style call option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <returns>theoretical approximation of the call price</returns>
            <remarks>European style options differ from American options in that the option can only be exercised
            at expiration, therefore, the calculation for European options is slightly different.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetEuropeanCallPrice(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the theoretical value of a European style call option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="expirationMonth">expiration month of the option.</param>
            <param name="expirationYear">expiration year of the option.</param>
            <returns>theoretical approximation of the call price</returns>
            <remarks>European style options differ from American options in that the option can only be exercised
            at expiration, therefore, the calculation for European options is slightly different.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetEuropeanPutPrice(System.Double)">
            <summary>
            Gets the theoretical value of a European style put option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <returns>theoretical approximation of the put price</returns>
            <remarks>European style options differ from American options in that the option can only be exercised
            at expiration, therefore, the calculation for European options is slightly different.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.GetEuropeanPutPrice(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Gets the theoretical value of a European style put option.
            </summary>
            <param name="assetPrice">current price of the underlying asset.</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="expirationMonth">expiration month of the option.</param>
            <param name="expirationYear">expiration year of the option.</param>
            <returns>theoretical approximation of the put price</returns>
            <remarks>European style options differ from American options in that the option can only be exercised
            at expiration, therefore, the calculation for European options is slightly different.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.CallImpliedVolatility(System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculates the theoretical implied volatility (IV) for a call option.
            </summary>
            <param name="underlyingPrice">current price of the underlying asset</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="expirationMonth">expiration month of the option.</param>
            <param name="expirationYear">expiration year of the option.</param>
            <param name="optionPrice">the actual option price.</param>
            <returns>the theoretical implied volatility.</returns>
            <example>Get implied volatility (C#)
            <code>
            // Retrieve the current historical volatility based on an already created instance of the historical volatility indicator.
            ISeries hvSeries = Indicators["HV"][symbol];
            double hvValue = hvSeries[hvSeries.Count - 1];
            
            // Create an OptionCalculator instance with the historical volatility value
            OptionCalculator optionCalc = new OptionCalculator(hvValue);
            
            // Get the implied volatility for a call option that expires in 7/2006 with a strike price of 38.00 and a current market price of 0.925
            double implVol = optionCalc.CallImpliedVolatility(bar.Close, 38.00, 7, 2006, 0.925);
            MessageBox.Show(implVol.ToString());
            </code>
            </example>
            <remarks>Implied volatility is the value used to determine if an option contract is over priced or under priced.
            Implied volatility is the difference between the theoretical calculation and actual calculation.  For example,
            if an option with a current 10 period historical volatility of 21.59% is trading at 1.65, however, the 
            theoretical calculation estimates that the option is valued at 1.55 than this
            implies that the volatility is actually 18.11% and this particular contract is potentially undervalued.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.PutImpliedVolatility(System.Double,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculates the theoretical implied volatility (IV) for a put option.
            </summary>
            <param name="underlyingPrice">current price of the underlying asset</param>
            <param name="strikePrice">strike price of the option.</param>
            <param name="expirationMonth">expiration month of the option.</param>
            <param name="expirationYear">expiration year of the option.</param>
            <param name="optionPrice">the actual option price.</param>
            <returns>the theoretical implied volatility.</returns>
            <example>Get implied volatility for a put option (C#)
            <code>
            // Retrieve the current historical volatility based on an already created instance of the historical volatility indicator.
            ISeries hvSeries = Indicators["HV"][symbol];
            double hvValue = hvSeries[hvSeries.Count - 1];
            
            // Create an OptionCalculator instance with the historical volatility value
            OptionCalculator optionCalc = new OptionCalculator(hvValue);
            
            // Get the implied volatility for a put option that expires in 7/2006 with a strike price of 38.00 and a current market price of 0.725
            double implVol = optionCalc.PutImpliedVolatility(bar.Close, 38.00, 7, 2006, 0.725);
            MessageBox.Show(implVol.ToString());
            </code>
            </example>
            <remarks>Implied volatility is the value used to determine if an option contract is over priced or under priced.
            Implied volatility is the difference between the theoretical calculation and actual calculation.  For example,
            if an option with a current 10 period historical volatility of 21.59% is trading at 1.65, however, the 
            theoretical calculation estimates that the option is valued at 1.55 than this
            implies that the volatility is actually 18.11% and this particular contract is potentially undervalued.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.CalculateDaysUntilExpiration(System.Int32,System.Int32)">
            <summary>
            Calculates the number of days until expiration assuming the option expires.
            </summary>
            <param name="month">Month of the option expiration.</param>
            <param name="year">Year of the option expiration.</param>
            <returns>number of days, or -1 if the option has expired.</returns>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.CalculateDaysUntilExpiration(System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            Calculates the number of days until expiration.
            </summary>
            <param name="currentDate">Sets the "current" date.</param>
            <param name="expMonth">expiration month.</param>
            <param name="expYear">expiration year.</param>
            <returns>Number of days until expiration.</returns>
            <remarks>
            The currentDate parameter can be set to any value as long as it's less than the expMonth and expYear parameters.
            This is useful in cases where the option price needs to be simulated on a date other than the actual current date.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.CalculateDaysUntilExpiration(System.DateTime,System.Int32,System.Int32)">
            <summary>
            Calculates the number of days until expiration.  This implementation assumes the option expires on the third Friday of the month, but this can be overridden in a derived class.
            </summary>
            <param name="currentDate">Sets the "current" date.</param>
            <param name="expMonth">expiration month.</param>
            <param name="expYear">expiration year.</param>
            <returns>Number of days until expiration.</returns>
            <remarks>
            The currentDate parameter can be set to any value as long as it's less than the expMonth and expYear parameters.
            This is useful in cases where the option price needs to be simulated on a date other than the actual current date.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.OptionCalculator.ThirdFridayOfMonth(System.Int32,System.Int32)">
            <summary>
            Returns a DateTime structure representing the third Friday of the month for the specified month and year.
            </summary>
            <param name="month">integer containing the month.</param>
            <param name="year">integer containing the year.</param>
            <returns>Populated DateTime instance.</returns>
        </member>
        <member name="P:RightEdge.Common.OptionCalculator.InterestRate">
            <summary>
            Gets or sets the current interest rate or "risk free" rate of return.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OptionCalculator.HistoricalVolatility">
            <summary>
            Gets or set the historical volatility value.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OptionCalculator.Symbol">
            <summary>
            Gets the Symbol class associated with this instance of the class.
            </summary>
        </member>
        <member name="T:RightEdge.Common.OptionPartials">
            <summary>
            Structure to hold theoretical option partial calculations.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OptionPartials.Delta">
            <summary>
            Delta partial value.
            </summary>
            <remarks>
            The change in the price of an option per one point move in the underlying asset.  Call options have a positive delta and put options have a negative delta.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.OptionPartials.Gamma">
            <summary>
            Gamma partial value.
            </summary>
            <remarks>
            The change in an option's delta per one point move in the price of the underlying asset.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.OptionPartials.Theta">
            <summary>
            Theta partial value.
            </summary>
            <remarks>
            The change in the price of an option for a one day decrease in the time remaining to expiration, also known as "time decay".
            </remarks>
        </member>
        <member name="F:RightEdge.Common.OptionPartials.Vega">
            <summary>
            Vega partial value.
            </summary>
            <remarks>
            The change in the value of an option for a single percentage point increase in implied volatility.  The further an option goes in-the-money or out-of-the-money, the smaller is vega.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.OrderType">
            <summary>
            Order type to be submitted to the broker.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.Market">
            <summary>
            Market order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.MarketOnOpen">
            <summary>
            Market on open order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.MarketOnClose">
            <summary>
            Market on close order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.Limit">
            <summary>
            Limit order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.LimitOnClose">
            <summary>
            Limit on close order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.PeggedToMarket">
            <summary>
            Pegged to market order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.Stop">
            <summary>
            Stop order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.StopLimit">
            <summary>
            Stop limit order.
            </summary>
        </member>
        <member name="F:RightEdge.Common.OrderType.TrailingStop">
            <summary>
            Trailing stop order.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TransactionType">
            <summary>
            Broker transaction type enumeration.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TransactionType.Buy">
            <summary>
            Buy transaction.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TransactionType.Short">
            <summary>
            Short transaction.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TransactionType.Sell">
            <summary>
            Close transaction.  Closes a long transaction.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TransactionType.Cover">
            <summary>
            Cover transaction.  Closes a short transaction.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TransactionType.Interest">
            <summary>
            Interest credited or debited for an open forex position.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BrokerOrderState">
            <summary>
            Broker order state enumeration.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BrokerOrderState.Submitted">
            <summary>
            Order submitted.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BrokerOrderState.PendingCancel">
            <summary>
            Order pending cancellation.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BrokerOrderState.Cancelled">
            <summary>
            Order cancelled.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BrokerOrderState.Filled">
            <summary>
            Order filled.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BrokerOrderState.Rejected">
            <summary>
            Order rejected.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BrokerOrderState.Invalid">
            <summary>
            Order is no longer valid.
            </summary>
        </member>
        <member name="F:RightEdge.Common.BrokerOrderState.PartiallyFilled">
            <summary>
            Order has been partially filled.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BrokerOrder">
            <summary>
            Represents an order submitted to the broker.
            </summary>
            <remarks>
            This class is used to submit orders to broker plugins, and to receive order updates
            from the broker plugin.  Trading systems do not need to use this class directly, and
            should use the <see cref="T:RightEdge.Common.Order" /> class instead.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.ToString">
            <summary>
            Generates a string from this Order object.
            </summary>
            <returns>string</returns>
            <remarks>
            The string contains the OrderId + BrokerOrderType + TransactionType + Symbol + Total Filled + Requested Shares + Order State
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.GetBrokerTransactionTypeString(RightEdge.Common.TransactionType)">
            <summary>
            Converts a <see cref="T:RightEdge.Common.TransactionType">TransactionType</see> to a string.
            </summary>
            <param name="transactionType"><see cref="T:RightEdge.Common.TransactionType">TransactionType</see> input.</param>
            <returns>string containing the name representation.</returns>
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.GetBrokerOrderStateString(RightEdge.Common.BrokerOrderState)">
            <summary>
            Converts a <see cref="T:RightEdge.Common.BrokerOrderState">BrokerOrderState</see> to a string.
            </summary>
            <param name="orderState"><see cref="T:RightEdge.Common.BrokerOrderState">BrokerOrderState</see> input.</param>
            <returns>string containing the order state representation.</returns>
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.GetBrokerOrderTypeString(RightEdge.Common.OrderType)">
            <summary>
            Converts a <see cref="T:RightEdge.Common.OrderType">BrokerOrderType</see> to a string.
            </summary>
            <param name="orderType"><see cref="T:RightEdge.Common.OrderType">BrokerOrderType</see> input.</param>
            <returns>string containing the name representation.</returns>
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.#ctor">
            <summary>
            Constructs an Order instance.
            </summary>
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.Clone">
            <summary>
            Makes a shallow copy of the current instance.
            </summary>
            <returns>A copy of the current instance.</returns>
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for deserialization
            </summary>
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.GetFlags">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.BrokerOrder.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.OrderSymbol">
            <summary>
            Gets or sets the <see cref="T:RightEdge.Common.Symbol">Symbol</see> instance for this order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.Shares">
            <summary>
            Gets or sets the number of shares for this order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.LimitPrice">
            <summary>
            Gets or sets the limit price for this order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.StopPrice">
            <summary>
            Gets or sets the stop price for this order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.FillPrice">
            <summary>
            The average fill price for this order order (if filled).
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.SubmittedDate">
            <summary>
            Get the time the order was submitted.  This is only
            useful during real time execution.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.OrderType">
            <summary>
            Gets or sets the order type for this order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.TrailingStop">
            <summary>
            The trailing stop for a trailing stop order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.TrailingStopType">
            <summary>
            Indicates whether the trailing stop is specified as a percentage or a fixed price offset for a trailing stop order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.TransactionType">
            <summary>
            Gets or sets the broker transaction type.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.OrderId">
            <summary>
            Gets or sets the unique order ID for this order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.PositionID">
            <summary>
            The ID of the position associated with this order, if any.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.OrderState">
            <summary>
            Gets or sets the current order state.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.GoodTillCanceled">
            <summary>
            Gets or sets the Good til cancelled (GTC) flag for this order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.Fills">
            <summary>
            A list of <see cref="T:RightEdge.Common.Fill" />s for this Order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.Tag">
            <summary>
            Gets or sets an object that can be used to store additional user-defined data related to the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerOrder.CustomString">
            <summary>
            A string that can be used to store additional user-defined data related to the order.
            </summary>
        </member>
        <member name="T:RightEdge.Common.Fill">
            <summary>
            Represents a fill for a <see cref="T:RightEdge.Common.BrokerOrder" />.
            </summary>
        </member>
        <member name="M:RightEdge.Common.Fill.#ctor">
            <summary>
            Constructs a new Fill object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.Fill.Clone">
            <summary>
            Creates a shallow copy of this object.
            </summary>
            <returns>Fill instance.</returns>
        </member>
        <member name="M:RightEdge.Common.Fill.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for deserialization
            </summary>
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Fill.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Fill.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Fill.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.Fill.FillDateTime">
            <summary>
            The date at time when the fill occured
            </summary>
        </member>
        <member name="P:RightEdge.Common.Fill.Quantity">
            <summary>
            The number of shares, contracts, etc. that were filled.  For a partial fill, this will be less than the order amount.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Fill.Price">
            <summary>
            The price at which the fill occured.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Fill.Commission">
            <summary>
            The commission taken for this fill.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ChartPoint">
            <summary>
            ChartPoint struct.
            </summary>
            <remarks>
            Each point required by a chart object is represented by the ChartPoint
            class.  The X coordinate is represented as a point in time rather than
            an actual numerical point.  With this, chart objects actually snap to
            their respective bar.  The Y coordinate is represented as a price value
            instead of an actual numerical point.  However, the Y coordinate can
            be represented with much more precision.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ChartPoint.#ctor(System.DateTime,System.Double)">
            <summary>
            Construct a ChartPoint object.
            </summary>
            <param name="dateX">The X coordinate.  Represented as time.</param>
            <param name="valueY">The Y coordinate.  Represented as price.</param>
        </member>
        <member name="M:RightEdge.Common.ChartPoint.#ctor(System.Boolean)">
            <summary>
            Constructs an empty ChartPoint object.
            </summary>
            <param name="empty">Specifies whether or not this object is empty.</param>
            <remarks>
            This ChartPoint is completely empty.  Not only will the X and Y
            settings require real values, but the Empty property must also
            be set to False for this ChartPoint to be valid.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.ChartPoint.DateX">
            <summary>
            The X coordinate.  Represented as time.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartPoint.ValueY">
            <summary>
            The Y coordinate.  Represented as price.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ChartPoint.Empty">
            <summary>
            Get or set this point as empty
            </summary>
        </member>
        <member name="T:RightEdge.Common.PositionSettings">
            <summary>
            Contains information used in a request to open a position.
            </summary>
            <seealso cref="M:RightEdge.Common.PositionManager.OpenPosition(RightEdge.Common.PositionSettings)" />
        </member>
        <member name="M:RightEdge.Common.PositionSettings.#ctor">
            <summary>
            PositionSettings constructor.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.OpenOrder">
            <summary>
            The order which will be submitted to the broker to open the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.Symbol">
            <summary>
            The <see cref="T:RightEdge.Common.Symbol">Symbol</see> associated with this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.PositionType">
            <summary>
            Position type (long or short).
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.OrderType">
            <summary>
            Order type of the order to open the position (market, limit, stop, etc.)
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.LimitPrice">
            <summary>
            Limit price of the order to open the position (if applicable).
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.StopPrice">
            <summary>
            Stop price of the order to open the position (if applicable).
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.Size">
            <summary>
            The number of shares or contracts to establish this position with.  If this is
            zero, the position will be sized based on the settings in <see cref="P:RightEdge.Common.PositionManager.AllocationType" /> and
            <see cref="P:RightEdge.Common.PositionManager.Allocation" />.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.ProfitTarget">
            <summary>
            The profit target for the position.
            </summary>
            <remarks>
            <para>This value may represent a fixed price or a percentage gain, depending on the
            value of the <see cref="P:RightEdge.Common.PositionSettings.ProfitTargetType" /> property.</para>
            <para>If this value is negative (which it is by default), the value in <see cref="P:RightEdge.Common.PositionManager.ProfitTarget" />
            will be used.</para>
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.ProfitTargetType">
            <summary>
            The type of profit target for the position.  The default is <see cref="F:RightEdge.Common.TargetPriceType.RelativeRatio" />.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.StopLoss">
            <summary>
            The stop loss for the position.
            </summary>
            <remarks>
            <para>This value may represent a fixed price or a percentage gain, depending on the
            value of the <see cref="P:RightEdge.Common.PositionSettings.StopLossType" /> property.
            If the StopLossType is Percentage, then a stop loss of .05 means to close a long position
            when the price has dropped by 5%, or a short position when has the price has gone up by 5%.</para>
            <para>If this value is negative (which it is by default), the value in the Position Manager's <see cref="P:RightEdge.Common.PositionManager.StopLoss" />
            property will be used.</para>
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.StopLossType">
            <summary>
            The type of stop loss for the position.  The default is <see cref="F:RightEdge.Common.TargetPriceType.RelativeRatio" />.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.TrailingStop">
            <summary>
            Gets or sets the trailing stop value for this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.TrailingStopType">
            <summary>
            Indicates whether the trailing stop is specified as a percentage or a fixed price offset for a trailing stop order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.BarCountExit">
            <summary>
            Number of bars after which the position will automatically be closed.
            </summary>
            <remarks>
            If this value is negative, the position will not automatically be closed.  If it is zero,
            (the default) then the value in <see cref="P:RightEdge.Common.PositionManager.BarCountExit" /> will be used.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.BarsValid">
            <summary>
            The number of bars before the order should be canceled if it is not filled.
            </summary>
            <remarks>By default, an order to open a position will be canceled after 1 bar if it is not filled.
            This setting allows you to specify the number of bars before it will be canceled.  If this value
            is set to -1, the order will not be automatically canceled at all.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.Description">
            <summary>
            Gets or sets a description for the position order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.Tag">
            <summary>
            An object that can be used to store additional user-defined data related to the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.PositionSettings.CustomString">
            <summary>
            A string that can be used to store additional user-defined data related to the position.  
            </summary>
        </member>
        <member name="T:RightEdge.Common.RightEdgeError">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.PluginException">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.CircularDependencyException">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.RiskAssessmentArgumentType">
            <summary>
            Specifies the type of incoming parameter to a Risk Assessment plugin.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentArgumentType.String">
            <summary>
            Argument is of type string.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentArgumentType.Integer">
            <summary>
            Argument is of type integer.
            </summary>
        </member>
        <member name="F:RightEdge.Common.RiskAssessmentArgumentType.Double">
            <summary>
            Argument is of type double.
            </summary>
        </member>
        <member name="T:RightEdge.Common.RiskAssessmentArgument">
            <summary>
            Risk assessment argument attribute used for risk assessment plugins.
            </summary>
        </member>
        <member name="M:RightEdge.Common.RiskAssessmentArgument.#ctor">
            <summary>
            Parameterless constructor.
            </summary>
        </member>
        <member name="M:RightEdge.Common.RiskAssessmentArgument.#ctor(System.String,RightEdge.Common.RiskAssessmentArgumentType)">
            <summary>
            Risk assessment constructor which accepts name and type properties.
            </summary>
            <param name="name">string containing the name property.</param>
            <param name="type">argument type to be set for this argument.</param>
        </member>
        <member name="M:RightEdge.Common.RiskAssessmentArgument.#ctor(System.String,RightEdge.Common.RiskAssessmentArgumentType,System.String)">
            <summary>
            Risk assessment constructor which accepts name, type and value properties.
            </summary>
            <param name="name">string containing the name property.</param>
            <param name="type">argument type to be set for this argument.</param>
            <param name="riskAssessmentValue">value to be assigned to this argument instance.</param>
        </member>
        <member name="M:RightEdge.Common.RiskAssessmentArgument.#ctor(System.String,RightEdge.Common.RiskAssessmentArgumentType,System.String,System.Int32)">
            <summary>
            Risk assessment constructor which accepts name, type, value and sort order properties.
            </summary>
            <param name="name">string containing the name property.</param>
            <param name="type">argument type to be set for this argument.</param>
            <param name="riskAssessmentValue">value to be assigned to this argument instance.</param>
            <param name="order">set the order property for this argument instance.</param>
        </member>
        <member name="P:RightEdge.Common.RiskAssessmentArgument.Name">
            <summary>
            Gets or sets the Name property of this argument.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RiskAssessmentArgument.Type">
            <summary>
            Gets or sets the <see cref="T:RightEdge.Common.RiskAssessmentArgumentType">argument type</see> of this argument.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RiskAssessmentArgument.ArgumentValue">
            <summary>
            Gets or sets the actual value associated with this arguments.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RiskAssessmentArgument.Order">
            <summary>
            Gets or sets the display order of this argument.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SystemBase">
            <summary>
            Base class that all systems should derive from.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemBase.Startup">
            <summary>
            Startup function called at the start of a system run.
            </summary>
            <remarks>
            Most systems should override this function to set basic
            global system parameters such as profit targets, stop losses
            and indicator creation.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemBase.Startup(RightEdge.Common.SystemData)">
            <summary>
            Startup function called at the start of a system run.
            </summary>
            <param name="data">A fully constructed SystemData object.</param>
            <remarks>
            You do not need to use this function.  It is called by RightEdge, and will
            call the parameterless Startup() function.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemBase.NewBar">
            <summary>
            Called for each new bar
            </summary>
            <remarks>
            This function is called for each symbol active in the system.  Override
            this function to perform actions that are bar specific but not symbol
            specific.  For symbol specific actions such as buy and sell evaluations,
            override NewSymbolBar()
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemBase.NewSymbolBar(RightEdge.Common.Symbol,RightEdge.Common.BarData)">
            <summary>
            Called once for each new bar.
            </summary>
            <remarks>
            This function is called for as many symbols that are active
            within the system.  Perform actions that are bar and symbol
            specific such as buy and sell evaluations.
            </remarks>
            <param name="symbol">Symbol being evaluated.</param>
            <param name="bar">BarData for this symbol.</param>
        </member>
        <member name="M:RightEdge.Common.SystemBase.NewTick(RightEdge.Common.Symbol,RightEdge.Common.BarData,RightEdge.Common.TickData)">
            <summary>
            Called when a new tick is received.
            </summary>
            <remarks>
            This function is called each time new tick data for the specified
            symbol is received.
            </remarks>
            <param name="symbol">Symbol that received a tick.</param>
            <param name="bar">The current bar that the tick will be added to.</param>
            <param name="tick">A <see cref="T:RightEdge.Common.TickData">TickData</see> structure instance containing the latest tick information.</param>
        </member>
        <member name="M:RightEdge.Common.SystemBase.OnPositionTrade(RightEdge.Common.Trade,RightEdge.Common.Position)">
            <summary>
            This function is called when a trade occurs for a position.
            </summary>
            <param name="trade">Object containing information about the trade that took place.</param>
            <param name="position">The position to which the trade applied.</param>
        </member>
        <member name="M:RightEdge.Common.SystemBase.Shutdown">
            <summary>
            Called when the system is exiting.
            </summary>
            <remarks>
            This is the counterpart of Startup().  Use this function to perform
            final cleanup and evaluation.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemBase.GetPricePane(RightEdge.Common.Symbol)">
            <summary>
            Gets the price pane object for the specified symbol.
            </summary>
            <param name="symbol">Symbol to retrieve the price pane for.</param>
            <returns>ChartPane instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemBase.GetVolumePane(RightEdge.Common.Symbol)">
            <summary>
            Gets the volume chart pane
            </summary>
            <param name="symbol">Symbol to get the volume pane for.</param>
            <returns>An instance of the volume ChartPane.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemBase.OpenPosition(RightEdge.Common.Symbol,RightEdge.Common.PositionType,RightEdge.Common.OrderType)">
            <summary>
            Opens a position of the specified type.
            </summary>
            <remarks>
            This function is used for all order types.
            </remarks>
            <example>Opening a Position on a band violation (C#)
            <code>
            // Use NewSymbolBar to detect when a new bar has come in.
            public override void NewSymbolBar(Symbol symbol, BarData bar)
            {
                // Retrieve the latest Widner Lower band value.
                IIndicator widnerLower = Indicators["WidnerLower"][symbol];
                double targetPrice = widnerLower[widnerLower.Count - 1];
            
                // Send an order to open a position when the targetPrice is reached (limit order).
                baseSystem.OpenPosition(symbol, PositionType.Long, OrderType.Limit, targetPrice);
            }
            </code>
            </example>
            <param name="symbol">the Symbol to open the position for.</param>
            <param name="positionType">the PositionType.  See the PositionType enumeration</param>
            <param name="orderType">the type of order.  See the OrderType enumeration</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="T:RightEdge.Common.PositionState" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemBase.OpenPosition(RightEdge.Common.Symbol,RightEdge.Common.PositionType,RightEdge.Common.OrderType,System.Double)">
            <summary>
            Opens a position of the specified type.
            </summary>
            <remarks>
            This function is used for all order types.
            </remarks>
            <example>Opening a Position on a band violation (C#)
            <code>
            // Use NewSymbolBar to detect when a new bar has come in.
            public override void NewSymbolBar(Symbol symbol, BarData bar)
            {
                // Retrieve the latest Widner Lower band value.
                IIndicator widnerLower = Indicators["WidnerLower"][symbol];
                double targetPrice = widnerLower[widnerLower.Count - 1];
            
                // Send an order to open a position when the targetPrice is reached (limit order).
                baseSystem.OpenPosition(symbol, PositionType.Long, OrderType.Limit, targetPrice);
            }
            </code>
            </example>
            <param name="symbol">the Symbol to open the position for.</param>
            <param name="positionType">the PositionType.  See the PositionType enumeration</param>
            <param name="orderType">the type of order.  See the OrderType enumeration</param>
            <param name="price">the price that must be met to open a limit or stop style order</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="T:RightEdge.Common.PositionState" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemBase.OpenPosition(RightEdge.Common.Symbol,RightEdge.Common.PositionType,RightEdge.Common.OrderType,System.Double,System.Int64)">
            <summary>
            Opens a position of the specified type.
            </summary>
            <remarks>
            This function is used for all order types.
            </remarks>
            <example>Opening a Position on a band violation (C#)
            <code>
            // Use NewSymbolBar to detect when a new bar has come in.
            public override void NewSymbolBar(Symbol symbol, BarData bar)
            {
                // Retrieve the latest Widner Lower band value.
                IIndicator widnerLower = Indicators["WidnerLower"][symbol];
                double targetPrice = widnerLower[widnerLower.Count - 1];
            
                // Send an order to open a position when the targetPrice is reached (limit order).
                baseSystem.OpenPosition(symbol, PositionType.Long, OrderType.Limit, targetPrice);
            }
            </code>
            </example>
            <param name="symbol">the Symbol to open the position for.</param>
            <param name="positionType">the PositionType.  See the PositionType enumeration</param>
            <param name="orderType">the type of order.  See the OrderType enumeration</param>
            <param name="price">the price that must be met to open a limit or stop style order</param>
            <param name="shares">The number of shares or contracts to establish this position with</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="T:RightEdge.Common.PositionState" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemBase.ClosePosition(System.String)">
            <summary>
            Closes a position with a market order.
            </summary>
            <param name="PosID">The ID of the position to close.</param>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether the order to close the position was successfully submitted.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemBase.ClosePosition(System.String,System.String)">
            <summary>
            Closes a position with a market order.
            </summary>
            <param name="PosID">The ID of the position to close.</param>
            <param name="description">A description for the close position order.</param>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether the order to close the position was successfully submitted.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemBase.Dispose">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemBase.Finalize">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemBase.SystemData">
            <summary>
            Gets the <see cref="T:RightEdge.Common.SystemData">SystemData</see> instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.Indicators">
            <summary>
            Gets the <see cref="T:RightEdge.Common.IndicatorCollections">IndicatorCollections</see> instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.Triggers">
            <summary>
            Gets the <see cref="T:RightEdge.Common.TriggerManager">TriggerManager</see> instance associated with this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.Actions">
            <summary>
            Gets the <see cref="T:RightEdge.Common.ActionManager">ActionManager</see> instance associated with this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.SystemParameters">
            <summary>
            Gets the optimization parameters associated with this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.Series">
            <summary>
            Gets the <see cref="T:RightEdge.Common.SeriesManager">SeriesManager</see> instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.ChartObjects">
            <summary>
            Gets the <see cref="T:RightEdge.Common.ChartObjectManager">ChartObjectManager</see> instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.PositionManager">
            <summary>
            Gets the <see cref="P:RightEdge.Common.SystemBase.PositionManager">PositionManager</see> instance for this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.Symbols">
            <summary>
            Gets the list of symbols selected to run in this trading system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemBase.Bars">
            <summary>
            Gets the list of BarData for every symbol.
            </summary>
        </member>
        <member name="T:RightEdge.Common.LogLineAddedDelegate">
            <summary>
            Delegate for output line addition.
            </summary>
            <param name="logLine">The SystemOutput line that is about to be added to the output pane.</param>
        </member>
        <member name="T:RightEdge.Common.SystemOutputEventArgs">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemOutputEventArgs.#ctor(RightEdge.Common.SystemOutput)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemOutputEventArgs.SystemOutput">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SystemOutput">
            <summary>
            System output provides access to the system output pane.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemOutput.#ctor">
            <summary>
            This overload of the constructor should generally not be used.  It is only to support deserialization.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemOutput.#ctor(RightEdge.Common.OutputSeverityLevel,System.String,System.String)">
            <summary>
            Constructs a SystemOutput instance.
            </summary>
            <param name="severityLevel">Severity level setting for this message.</param>
            <param name="errorMessage">Output message text.</param>
            <param name="moduleName">Optional module name that generated this message</param>
        </member>
        <member name="M:RightEdge.Common.SystemOutput.#ctor(RightEdge.Common.OutputSeverityLevel,System.String,RightEdge.Common.Symbol,System.String)">
            <summary>
            Constructs a SystemOutput instance.
            </summary>
            <param name="severityLevel">Severity level setting for this message.</param>
            <param name="errorMessage">Output message text.</param>
            <param name="moduleName">Optional module name that generated this message</param>
            <param name="symbol">Optional Symbol instance assigned to this output message.</param>
        </member>
        <member name="M:RightEdge.Common.SystemOutput.#ctor(RightEdge.Common.OutputSeverityLevel,System.String,RightEdge.Common.Symbol,System.String,RightEdge.Common.SystemOutputLocation)">
            <summary>
            Constructs a SystemOutput instance.
            </summary>
            <param name="severityLevel">Severity level setting for this message.</param>
            <param name="errorMessage">Output message text.</param>
            <param name="moduleName">Optional module name that generated this message</param>
            <param name="symbol">Optional Symbol instance assigned to this output message.</param>
            <param name="location">Specifies the location of the output (see <see cref="T:RightEdge.Common.SystemOutputLocation" />)</param>
        </member>
        <member name="M:RightEdge.Common.SystemOutput.#ctor(RightEdge.Common.OutputSeverityLevel,System.String,RightEdge.Common.Symbol,System.String,System.DateTime)">
            <summary>
            Constructs a SystemOutput instance.
            </summary>
            <param name="severityLevel">Severity level setting for this message.</param>
            <param name="errorMessage">Output message text.</param>
            <param name="moduleName">Optional module name that generated this message</param>
            <param name="symbol">Optional Symbol instance assigned to this output message.</param>
            <param name="stamp">Allows a user defined time stamp.</param>
            <remarks>
            Use this instance in a backtesting or simulation situation where the timestamp for the message
            is not particularly as the current system time.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemOutput.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemOutput.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemOutput.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemOutput.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemOutput.SeverityLevel">
            <summary>
            Gets the OutputSeverityLevel setting.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemOutput.ErrorMessage">
            <summary>
            Gets the error message text.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemOutput.ModuleName">
            <summary>
            Gets the module name.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemOutput.Symbol">
            <summary>
            Gets the optional Symbol assigned to this output message.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemOutput.MessageTime">
            <summary>
            Gets the time stamp of this message.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemOutput.OutputLocation">
            <summary>
            Indicates whether the output should be sent to the output window, the status bar, or both.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SystemParameters">
            <summary>
            Optimization parameters class.
            </summary>
            <remarks>
            An instance of this class is created by a system and resides as a member of the
            <see cref="T:RightEdge.Common.SystemData">SystemData</see> class.  You should never
            need to create an instance of this class independently.
            </remarks>
            <example>
            Accessing system parameters within a system
            <code lang="C#">
            public override void Startup()
            {
                // Create an ADX indicator based on optimization parameters.
                int adxPeriods = (int)SystemParameters["adxPeriods"];
                Indicators["ADX"].CreateIndicator(new ADX(adxPeriods));
            }
            </code>
            
            <code lang="VB" title="Visual Basic.Net">
            Public Overloads Overrides Sub Startup()
                ' Create an ADX indicator based on optimization parameters.
                Dim adxPeriods As Integer = CType(SystemParameters("adxPeriods"), Integer)
                Indicators("ADX").CreateIndicator(New ADX(adxPeriods))
            End Sub
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.SystemParameters.#ctor">
            <summary>
            Constructs an instance of SystemParameters.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemParameters.#ctor(System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Constructs an instance of SystemParameters with the specified values.
            </summary>
            <param name="dict">Dictionary hold the named parameters.</param>
        </member>
        <member name="M:RightEdge.Common.SystemParameters.Contains(System.String)">
            <summary>
            Determines if a parameter with the specified name exists.
            </summary>
            <param name="ParameterName">Parameter name to query.</param>
            <returns>true if exists, else false.</returns>
        </member>
        <member name="P:RightEdge.Common.SystemParameters.Keys">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemParameters.Item(System.String)">
            <summary>
            Gets a SystemParameter.
            </summary>
            <param name="ParameterName">Parameter name to retrieve.</param>
            <returns>The value associated with this system parameter.</returns>
            <remarks>
            If this parameter does not exist, an exception is thrown.  Use the
            Contains function to determine whether or not the parameter exists.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.SystemUtils">
            <summary>
            Utility functions for use with RightEdge systems
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemUtils.CrossOver(RightEdge.Common.ISeries,RightEdge.Common.ISeries)">
            <summary>
            Determines if <paramref name="Signal" /> has crossed over <paramref name="Base" />
            </summary>
            <param name="Signal">the series that crosses over</param>
            <param name="Base">the series that is crossed over</param>
            <returns>Returns true if <paramref name="Signal" /> has crossed over <paramref name="Base" />, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemUtils.CrossUnder(RightEdge.Common.ISeries,RightEdge.Common.ISeries)">
            <summary>
            Determines if <paramref name="Signal" /> has crossed under <paramref name="Base" />
            </summary>
            <param name="Signal">the series that crosses under</param>
            <param name="Base">the series that is crossed under</param>
            <returns>Returns true if <paramref name="Signal" /> has crossed under <paramref name="Base" />, otherwise false.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemUtils.RoundToNearestTick(System.Double,System.Double)">
            <summary>
            Takes an existing value and rounds that value to the nearest tick.
            </summary>
            <param name="currentPrice">Current price value.</param>
            <param name="tickSize">Tick size.  This is the smallest allowable increment of price movement for a contract.</param>
            <returns>The rounded tick value.</returns>
            <remarks>
            This is commonly used in futures contracts where the tick size is variable.  For example,
            the S&amp;P 500 futures contract trades in $0.25 increments, or tick size.  An
            order placed at $1000.22 would be invalid and rejected by the exchange.  The nearest tick in
            $0.25 increments would be $1000.25.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemUtils.RoundToNearestHighTick(System.Double,System.Double)">
            <summary>
            Takes an existing value and rounds to the nearest high tick.
            </summary>
            <param name="currentPrice">Current price value.</param>
            <param name="tickSize">Tick size.  This is the smallest allowable increment of price movement for a contract.</param>
            <returns>
            The tick value rounded up.
            </returns>
            <remarks>
            This is commonly used in futures contracts where the tick size is variable.  Similar
            to RoundToNearestTick, this will round the tick up with a high side bias.  With S&amp;P 500 futures
            where the contract trades in $0.25 increments and the price of the underlying or a calculated
            value does not fall within the tick increment, use this to push to the nearest higher tick.  So
            if a system were to request an open position and the S&amp;P contract and the requested price
            was $1000.03, the next highest tick value would be $1000.25.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemUtils.RoundToNearestLowTick(System.Double,System.Double)">
            <summary>
            Takes an existing value and rounds to the nearest low tick.
            </summary>
            <param name="currentPrice">Current price value.</param>
            <param name="tickSize">Tick size.  This is the smallest allowable increment of price movement for a contract.</param>
            <returns>The rounded tick value.</returns>
            <remarks>This is commonly used in futures contracts where the tick size is variable.  Similar
            to RoundToNearestTick, this will round the tick up with a low side bias.  With S&amp;P 500 futures
            where the contract trades in $0.25 increments and the price of the underlying or a calculated
            value does not fall within the tick increment, use this to push to the nearest lower tick.  So
            if a system were to request an open position and the S&amp;P contract and the requested price
            was $1000.23, the next lowest tick value would be $1000.00.  This is useful in a situation
            where a system may want to go long with the S&amp;P and the highest price was $1000.23, but according
            to the system, it should get filled and RoundToNearestTick would return $1000.25 resulting in
            a non fill.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemUtils.IsTradeableAssetClass(RightEdge.Common.AssetClass)">
            <summary>
            Determines if the asset class can be traded.
            </summary>
            <param name="assetClass">The asset class to evaluate.</param>
            <returns>true if the asset class can be traded, otherwise false.</returns>
            <remarks>Each symbol is assigned an asset class.  An asset class can be equities, bonds, futures, option, etc.
            These assigned classes are largely tradeable with the exception of <see cref="F:RightEdge.Common.AssetClass.InterestRate" />.  Arguably,
            an index is also not tradeable, however, for purposes of simulation, we have includes the Index asset class in the tradeable
            list of asset classes.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemUtils.RoundToNearestHundred(System.Int64)">
            <summary>
            Rounds an integer to the nearest hundred.
            </summary>
            <param name="val">Value to round.</param>
            <returns>Rounded value.</returns>
        </member>
        <member name="T:RightEdge.Common.SeriesCalculatorBaseWithValues">
            <summary>
            Implements base functionality for an <see cref="T:RightEdge.Common.ISeriesCalculator" /> indicator that calculates and stores
            it's value each time a new bar comes in.
            </summary>
            <remarks>
            When deriving from this class, call the base constructor with the number of inputs required, and implement
            the <see cref="M:RightEdge.Common.SeriesCalculatorBaseWithValues.CalcNewValue(System.Int32)" /> and <see cref="M:RightEdge.Common.SeriesCalculatorBaseWithValues.Reset" /> functions.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseWithValues.CalcNewValue(System.Int32)">
            <summary>
            Calculates a new value for the series.
            </summary>
            <param name="index">The index of the value to calculate.</param>
            <returns>The calculated value of the series at <paramref name="index" />.</returns>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseWithValues.Reset">
            <summary>
            Resets the series.
            </summary>
            <remarks>
            This function will be called when the series should be recalculated completely.  Derived classes
            should reset any data that is stored between calls to CalcNewValue in this function.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.SeriesCalculatorBaseWithValues._values">
            <summary>
            Collection of the raw calculated values.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseWithValues.#ctor(System.Int32)">
             <summary>
             Constructor for the <see cref="T:RightEdge.Common.SeriesCalculatorBaseWithValues" /> class.
             </summary>
             <param name="numberOfInputs">
             The number of input series that this indicator requires.  If <see cref="M:RightEdge.Common.SeriesCalculatorBase.SetInputs(RightEdge.Common.ISeries[])" /> is called with
             a number of inputs that does not match this value, it will throw an Exception.  May be
             <see cref="F:RightEdge.Common.SeriesCalculatorBase.VARIABLE_NUM_INPUTS" /> if the indicator can take a variable
             number of inputs.
            </param>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseWithValues.#ctor(System.Int32,System.Boolean)">
             <summary>
             Constructor for the <see cref="T:RightEdge.Common.SeriesCalculatorBaseWithValues" /> class.
             </summary>
             <param name="numberOfInputs">
             The number of input series that this indicator requires.  If <see cref="M:RightEdge.Common.SeriesCalculatorBase.SetInputs(RightEdge.Common.ISeries[])" /> is called with
             a number of inputs that does not match this value, it will throw an Exception.  May be
             <see cref="F:RightEdge.Common.SeriesCalculatorBase.VARIABLE_NUM_INPUTS" /> if the indicator can take a variable
             number of inputs.
            </param>
             <param name="HideNaNs">If this is true, <see cref="M:RightEdge.Common.SeriesCalculatorBaseWithValues.CalcNewValue(System.Int32)" /> will not be called when
             the value for inputs[0] is <see cref="F:System.Double.NaN" /></param>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseWithValues.SetInputs(RightEdge.Common.ISeries[])">
            <summary>
            Sets the input series for a <see cref="T:RightEdge.Common.ISeriesCalculator" /> indicator.
            </summary>
            <param name="newInputs">A list of series to use in calculating the indicator values.</param>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseWithValues.NewBar">
            <summary>
            Updates the series for a new bar.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseWithValues.NewSeries(System.Int32)">
            <summary>
            Resets the series and recalculates it (if necessary) based on the inputs.
            </summary>
            <param name="count">The length of the series.</param>
        </member>
        <member name="M:RightEdge.Common.SeriesCalculatorBaseWithValues.LookBack(System.Int32)">
            <summary>
            Looks back within the series for the specified value.  A value of 0 represents the most recent value.
            </summary><param name="nBars">Number of bars to lookback in the series.</param><returns>The value contained at the specified index.</returns><remarks>
            A series is a collection of values.  The values within series can be referenced using the Lookback method.
            Use 0 to get the most recent value in the series.  To reference values further back in time, pass a value
            greater than 0.  For example, if the series is created against daily bars, to reference yesterday's value
            use Lookback(1).  To reference the day before yesterday, use Lookback(2) and so on.  Use the
            <see cref="P:RightEdge.Common.ISeries.Count">Count</see> method to determine how many values are contained
            within the series.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.SeriesCalculatorBaseWithValues.Count">
            <summary>
            Gets the number of items in the series.
            </summary>
        </member>
        <member name="T:RightEdge.Common.DependencyProcessorBase">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.DependencyProcessorBase.TraversalState">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SeriesDependencyProcesser">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SeriesInputAttribute">
            <summary>
            <see cref="T:RightEdge.Common.InputAttribute">InputAttribute</see> derived class for use with series inputs.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesInputAttribute.#ctor">
            <summary>
            For XML Serialization.  Not used.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesInputAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Constructs an instance using the specified name and order.
            </summary>
            <param name="name">string containing the name.</param>
            <param name="order">integer specifying the order.</param>
        </member>
        <member name="M:RightEdge.Common.SeriesInputAttribute.Clone">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SeriesInputAttribute.GetSeriesInputs(System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SeriesInputAttribute.Value">
            <summary>
            Gets or sets the value associated with this input attribute.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SeriesManager">
            <summary>
            Manages user series.
            </summary>
            <remarks>
            SeriesManager is a helper class that can be used to create a <see cref="T:RightEdge.Common.UserSeries" />
            for each symbol.
            </remarks>
            <example>Creating a user series and setting the series color
            <code>
            SeriesManager["MySeries"].CreateSeries();
            SeriesManager["MySeries"].SeriesColor = Color.Red;
            </code>
            </example>
        </member>
        <member name="P:RightEdge.Common.SeriesManager.Item(System.String)">
            <summary>
            Gets the series collections for the specified ID, creating it if necessary.
            </summary>
            <param name="id">ID name</param>
            <returns>SeriesValuesCollection for the specified ID</returns>
        </member>
        <member name="P:RightEdge.Common.SeriesManager.Keys">
            <summary>
            Gets the IDs for the series collections that have been created.
            </summary>
            <returns>List containing the keys</returns>
        </member>
        <member name="T:RightEdge.Common.SeriesValuesCollection">
            <summary>
            A collection of user series, one for each symbol in the system.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesValuesCollection.AddToCharts">
            <summary>
            Specifies that this series should be displayed in charts.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesValuesCollection.CreateSeries">
            <summary>
            Creates a series instance for each symbol defined in this <see cref="T:RightEdge.Common.SystemData">SystemData</see> instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesValuesCollection.Name">
            <summary>
            A name which can be used to reference the series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesValuesCollection.Item(RightEdge.Common.Symbol)">
            <summary>
            Gets the series instance for the specified symbol.
            </summary>
            <param name="symbol">A symbol</param>
            <returns>The series instance corresponding to the symbol.</returns>
        </member>
        <member name="P:RightEdge.Common.SeriesValuesCollection.ChartPaneName">
            <summary>
            The name of the chart pane the series will be displayed on.  If this is null, it will be displayed on the price pane.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesValuesCollection.SeriesColor">
            <summary>
            The color which will be used to draw the series on the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesValuesCollection.LineSize">
            <summary>
            The line size of the series when drawn on the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesValuesCollection.LineType">
            <summary>
            The line type of the series when drawn on the chart.
            </summary>
        </member>
        <member name="T:RightEdge.Common.Symbol">
            <summary>
            The Symbol class contains details for a particular ticker symbol.  Symbol
            is intended to hold information that is specific to this particular
            symbol.  For example, the SymbolInformation may hold the company name
            which is common.  Where the Symbol class will hold things such as
            the strike price of the options contract which is very specific
            to this particular symbol.
            </summary>
        </member>
        <member name="M:RightEdge.Common.Symbol.#ctor">
            <summary>
            Needed for XML deserialization, not recommended for other uses.
            </summary>
        </member>
        <member name="M:RightEdge.Common.Symbol.#ctor(System.String)">
            <summary>
            Constructs a Symbol object.
            </summary>
            <param name="symbol">string containing the ticker symbol.</param>
        </member>
        <member name="M:RightEdge.Common.Symbol.#ctor(System.String,System.String)">
            <summary>
            Constructs a Symbol object.
            </summary>
            <param name="symbol">string containing the ticker symbol.</param>
            <param name="exchange">string containing the exchange this symbol belongs to.</param>
        </member>
        <member name="M:RightEdge.Common.Symbol.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A copy of this Symbol object.</returns>
        </member>
        <member name="M:RightEdge.Common.Symbol.ToString">
            <summary>
            Returns the Name property of this Symbol instance.
            </summary>
            <returns>string containing the name.</returns>
        </member>
        <member name="M:RightEdge.Common.Symbol.Equals(RightEdge.Common.Symbol)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.op_Equality(RightEdge.Common.Symbol,RightEdge.Common.Symbol)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.op_Inequality(RightEdge.Common.Symbol,RightEdge.Common.Symbol)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.GetHashCode">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.op_Explicit(RightEdge.Common.Symbol)~System.String">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.op_Explicit(System.String)~RightEdge.Common.Symbol">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.ToUniqueId">
            <summary>
            Converts this instance to a string for serialization.
            </summary>
            <returns>string representation of this instance.</returns>
        </member>
        <member name="M:RightEdge.Common.Symbol.FromUniqueId(System.String)">
            <summary>
            Builds a Symbol instance from a unique identifier.
            </summary>
            <param name="id">input unique identifier.</param>
            <returns>A constructed Symbol class.</returns>
        </member>
        <member name="M:RightEdge.Common.Symbol.CompareTo(RightEdge.Common.Symbol)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private constructor used for deserialization
            </summary>
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.GetFlags">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Symbol.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.Symbol.CurrencyType">
            <summary>
            Gets or sets the currency type associated with this symbol.  For Forex symbols, this is the counter currency.
            </summary>
            <remarks>
            The default is USD.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Symbol.StrikePrice">
            <summary>
            Gets or sets the strike price of this option symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.ExpirationDate">
            <summary>
            Gets or sets the expiration date for this symbol (for futures or options).
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.ContractType">
            <summary>
            Defines the contract type for this option.  Put or call.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.Name">
            <summary>
            Gets a string representation of the symbol name.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.Exchange">
            <summary>
            Gets a string representation of the exchange.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.SymbolInformation">
            <summary>
            Gets or sets the <see cref="T:RightEdge.Common.SymbolInformation">SymbolInformation</see> instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.AssetClass">
            <summary>
            Gets or sets the asset type for this symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.Tag">
            <summary>
            Gets or sets an object that can be used to store additional user-defined data related to the symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.BaseCurrency">
            <summary>
            The base currency for forex symbols; otherwise, <see cref="F:RightEdge.Common.CurrencyType.None" />.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Symbol.IgnoreDataValidation">
            <summary>
            If set to true, RightEdge will not attempt to identify possible errors in data.
            </summary>
            <remarks>
            Data errors include things such as 0 or negative prices, out of order prices, prices that are NaN.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.Symbol.Flags">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SymbolFreq">
            <summary>
            SymbolFreq class.
            </summary>
            <remarks>
            This class simply pairs a Symbol and data frequency.  This is commonly
            used in situations where data is loaded or stored.  Since the same symbol
            can contain data for different frequencies, this allows the data to be
            uniquely identified.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.SymbolFreq.Frequency">
            <summary>
            The bar frequency.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SymbolFreq.Symbol">
            <summary>
            The symbol.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolFreq.#ctor">
            <summary>
            Parameterless constructor.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolFreq.#ctor(RightEdge.Common.Symbol,System.Int32)">
            <summary>
            Constructs a SymbolFreq class.
            </summary>
            <param name="symbol">Symbol assigned to this instance.</param>
            <param name="frequency">Frequency assigned to this instance.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolFreq.#ctor(RightEdge.Common.SymbolFreq)">
            <summary>
            Constructor that copies an existing SymbolFreq instance.
            </summary>
            <param name="other">Valid SymolFreq instance.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolFreq.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SymbolFreq.GetHashCode">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SymbolFreq.ToUniqueId">
            <summary>
            Returns a unique Id given this symbol and frequency.
            </summary>
            <returns>string containing a unique identifier</returns>
            <remarks>
            This is typically used to persist information about a particular
            symbol and frequency.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.SymbolSetup">
            <summary>
            Stores information about a symbol in the symbol list.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SymbolSetup.HistService">
            <summary>
            The ID of the historical data service for this symbol.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SymbolSetup.RealtimeService">
            <summary>
            The ID of the live data service for this symbol.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SymbolSetup.BrokerService">
            <summary>
            The ID of the live broker service for this symbol.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SymbolSetup.SaveLiveTicks">
            <summary>
            Specifies whether live ticks for this symbol should be saved to the data store.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SymbolSetup.SaveLiveBars">
            <summary>
            Specifies whether live bars for this symbol should be saved to the data store.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SymbolSetup.DownloadStartDate">
            <summary>
            The date from which to start downloading historical data, if there is no data in the data store later than that date.
            </summary>
        </member>
        <member name="F:RightEdge.Common.SymbolSetup.BarConstruction">
            <summary>
            The bar construction to use for the symbol.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolSetup.#ctor(RightEdge.Common.Symbol,System.Int32)">
            <summary>
            Creates a new SymbolSetup object.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="frequency">The frequency, in minutes</param>
        </member>
        <member name="M:RightEdge.Common.SymbolSetup.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
            <returns>A copy of the object.</returns>
        </member>
        <member name="M:RightEdge.Common.SymbolSetup.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SymbolSetup.GetHashCode">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SymbolSetup.GetFrequencyPlugin">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SymbolInformation">
            <summary>
            SymbolInformation class.
            </summary>
            <remarks>
            Stores information about a symbol object such as name, sector, industry, etc.
            This is purely informational.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolInformation.Clone">
            <summary>
            Creates a shallow copy of this object.
            </summary>
            <returns>SymbolInformation instance.</returns>
        </member>
        <member name="M:RightEdge.Common.SymbolInformation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolInformation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private constructor used for deserialization
            </summary>
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SymbolInformation.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SymbolInformation.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.CompanyName">
            <summary>
            Gets or sets the Company Name for this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.Sector">
            <summary>
            Gets or sets the Sector for this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.Industry">
            <summary>
            Gets or sets the industry for this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.SymbolNotes">
            <summary>
            User notes for the symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.Margin">
            <summary>
            Gets or sets the initial margin for 1 contract.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.TickSize">
            <summary>
            Gets or sets the tick size for the current symbol.  This is the smallest allowable increment of price movement for a contract.
            For example, a Euro FX tick size is $0.0001.  The contract size is 125,000 euros.  The tick value is $12.50.  This is also known as a multiplier.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.ContractSize">
            <summary>
            Gets or sets the contract size for the current symbol.
            For example, a Euro FX tick size is $0.0001.  The contract size is 125,000 euros.  The tick value is $12.50.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.TickValue">
            <summary>
            Gets the tick value for this futures contract.  This is only available if the tick size and contract size has been set.
            For example, a Euro FX tick size is $0.0001.  The contract size is 125,000 euros.  The tick value is $12.50.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.DecimalPlaces">
            <summary>
            Gets or sets the number of significant decimal places for this symbol
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.ShortMargin">
            <summary>
            The short margin requirement.  A value of 0.5 means that the margin requirement for a short position is 50% of what the value of a long position of the same size would be.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.CustomHistoricalData">
            <summary>
            Custom information intended to be used by the historical data plugin.  How (or if) this is used depends on the historical data plugin that is used.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.CustomLiveData">
            <summary>
            Custom information intended to be used by the live data plugin.  How (or if) this is used depends on the live data plugin that is used.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolInformation.CustomBrokerData">
            <summary>
            Custom information intended to be used by the broker plugin.  How (or if) this is used depends on the broker plugin that is used.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SystemStatistics">
            <summary>
            Holds a collection of BarStatistics
            </summary>
            <remarks>
            This class holds the BarStatistics for every bar during the systems
            existence.  A single <see cref="T:RightEdge.Common.BarStatistic">BarStatistic</see>
            can be referenced using a date.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.#ctor(System.Double,System.DateTime,System.DateTime)">
            <summary>
            Constructs a SystemStatistics object.
            </summary>
            <param name="startingCapital">Sets the starting capital</param>
            <param name="dataStartDate">Sets the data start date.</param>
            <param name="tradeStartDate">Sets the trade start date.</param>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.#ctor">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.NewBar(RightEdge.Common.NewBarEventArgs,System.Collections.Generic.IEnumerable{RightEdge.Common.PositionInfo},RightEdge.Common.IAccountInfo)">
            <summary>
            Called when a NewBar is generated.
            </summary>
            <param name="newBars">NewBarInfo instance.</param>
            <param name="openPositions">List of open positions.</param>
            <param name="accountInfo"><see cref="T:RightEdge.Common.IAccountInfo" /> instance associated with this run.</param>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.UpdateStats(RightEdge.Common.BarStatistic,System.DateTime,System.Collections.Generic.Dictionary{RightEdge.Common.Symbol,System.Double},System.Collections.Generic.IEnumerable{RightEdge.Common.PositionInfo},RightEdge.Common.IAccountInfo)">
            <summary>
            Calculates modified position statistics after a new bar.
            </summary>
            <param name="stats">The <see cref="T:RightEdge.Common.BarStatistic" /> object.</param>
            <param name="dateTime">The date and time of this statistic update.</param>
            <param name="prices">The current prices for each symbol.</param>
            <param name="accountInfo">The <see cref="T:RightEdge.Common.IAccountInfo" /> object associated with this update.</param>
            <param name="openPositions">The currently open positions.</param>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.UpdateStats(RightEdge.Common.BarStatistic,System.DateTime,System.Collections.Generic.Dictionary{RightEdge.Common.Symbol,System.Double},System.Collections.Generic.IEnumerable{RightEdge.Common.PositionInfo},RightEdge.Common.IAccountInfo,System.Collections.Generic.Dictionary{System.String,System.Double})">
            <summary>
            Calculates modified position statistics after a new bar.
            </summary>
            <param name="stats">The <see cref="T:RightEdge.Common.BarStatistic" /> object.</param>
            <param name="dateTime">The date and time of this statistic update.</param>
            <param name="prices">The current prices for each symbol.</param>
            <param name="openPositions">The currently open positions.</param>
            <param name="accountInfo">The <see cref="T:RightEdge.Common.IAccountInfo" /> object associated with this update.</param>
            <param name="positionValues">Dictionary containing the current position values.</param>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.OrderFilled(RightEdge.Common.TradeInfo,RightEdge.Common.PositionInfo,System.Double,RightEdge.Common.IAccountInfo)">
            <summary>
            Called when an order is filled.
            </summary>
            <param name="trade">Trade object that filled the order.</param>
            <param name="position">Position associated with this fill.</param>
            <param name="lastPrice">The last price for the corresponding symbol.</param>
            <param name="accountInfo">Account information object.</param>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.GetLastStatistic">
            <summary>
            Retrieves the last statistic from the list.
            </summary>
            <returns><see cref="T:RightEdge.Common.BarStatistic">BarStatistic</see> instance that is the last instance in the collection.  Nothing or null is returned if the collection is empty.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used for deserialization
            </summary>
            <param name="info">SerializationInfo instance.</param>
            <param name="context">StreamingContext instance.</param>
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemStatistics.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemStatistics.BarStats">
            <summary>
            Gets a <see cref="T:RightEdge.Common.BarStatistic">BarStatistic</see> for the specified date.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemStatistics.Enabled">
            <summary>
            Indicates whether this object will calculate system statistics or not.  Disabling this may speed up simulation performance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemStatistics.CurStat">
            <summary>
            The most recent BarStatistic.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TickType">
            <summary>
            The type of tick.
            </summary>
            <remarks>
            This will be associated with a <see cref="T:RightEdge.Common.TickData">TickData</see> instance.
            </remarks>
        </member>
        <member name="F:RightEdge.Common.TickType.NotSet">
            <summary>
            Unknown or undetermined tick type.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.Bid">
            <summary>
            Bid tick.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.Ask">
            <summary>
            Ask tick.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.Trade">
            <summary>
            Last trade tick.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.HighPrice">
            <summary>
            High price tick.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.LowPrice">
            <summary>
            Low price tick.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.OpenPrice">
            <summary>
            Open price for the trading day.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.PreviousClose">
            <summary>
            Close price of previous trading day.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.DailyVolume">
            <summary>
            The cumulative daily volume.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.CurrentTime">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickType.OpenInterest">
            <summary>
            The open interest for the symbol
            </summary>
        </member>
        <member name="T:RightEdge.Common.TickData">
            <summary>
            Represents a single tick.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickData.time">
            <summary>
            Time of the tick.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickData.tickType">
            <summary>
            Type of the tick
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickData.price">
            <summary>
            Price value of this tick.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TickData.size">
            <summary>
            Size of this tick.
            </summary>
        </member>
        <member name="M:RightEdge.Common.TickData.ToString">
            <summary>
            String representation of this tick structure.
            </summary>
            <returns>string</returns>
            <remarks>
            The format of the tick data is:
            tickType: size @ price, time.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.TickData.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TickData.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.TradeType">
            <summary>
            Trade type, used to keep track of the purpose of orders and trades.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeType.None">
            <summary>
            No trade type.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeType.UserSubmitted">
            <summary>
            A user-submitted trade.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeType.OpenPosition">
            <summary>
            A trade to open a position.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeType.ClosePosition">
            <summary>
            A trade to close a position.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeType.ProfitTarget">
            <summary>
            A profit traget trade.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeType.StopLoss">
            <summary>
            A stop loss trade.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeType.TrailingStop">
            <summary>
            A trailing stop trade.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TradeInfo">
            <summary>
            Represents a trade that has taken place
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.FilledTime">
            <summary>
            The time at which the trade was executed
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.Sequence">
            <summary>
            Used to keep track of which trades were processed first if there are more than one with the same <see cref="F:RightEdge.Common.TradeInfo.FilledTime" />.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.TransactionType">
            <summary>
            The transaction type (Buy, Sell, Short, or Cover)
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.Price">
            <summary>
            The price at which the trade was executed
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.Size">
            <summary>
            The number of shares or contracts in the trade
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.OrderType">
            <summary>
            The order type that caused the trade to be executed (market, limit, etc.)
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.TradeType">
            <summary>
            The type of trade.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.Commission">
            <summary>
            The commission that was paid on the trade
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.Description">
            <summary>
            A user-definable description for the trade.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.BuyingPowerChange">
            <summary>
            The change in the account's buying power resulting from this trade
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.MarginChange">
            <summary>
            The change in the margin account resulting from this trade
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.ShortedCashChange">
            <summary>
            The change in the shorted cash amount resulting from this trade
            </summary>
        </member>
        <member name="F:RightEdge.Common.TradeInfo.ProfitConversionRate">
            <summary>
            The exchange rate at which profit is converted to the account currency.
            </summary>
            <remarks>This is only used for forex symbols, and only for trades that reduce the position size.</remarks>
        </member>
        <member name="M:RightEdge.Common.TradeInfo.#ctor">
            <summary>
            Constructs a new Trade object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.TradeInfo.Clone">
            <summary>
            Creates a copy of this trade
            </summary>
            <returns>A copy of this trade.</returns>
        </member>
        <member name="M:RightEdge.Common.TradeInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TradeInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TradeInfo.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TradeInfo.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.TradeInfo.OrderID">
            <summary>
            The Order ID of the order which caused this trade.  This may be null if there was no such order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.TradeInfo.IncreasesPositionSize">
            <summary>
            Indicates whether the trade increased or reduced the position size.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TriggerAttribute">
            <summary>
            <see cref="T:RightEdge.Common.RightEdgeObjectAttribute">RightEdgeObjectAttribute</see> derived class for triggers.
            </summary>
        </member>
        <member name="M:RightEdge.Common.TriggerAttribute.GetTriggerAttribute(System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.TriggerAttribute.GroupName">
            <summary>
            Gets or sets the group name.
            </summary>
            <remarks>
            This is the trigger group name that RightEdge will put the indicator under in
            the trigger tree within the user interface.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.YYETriggerAttribute">
            <summary>
            <see cref="T:RightEdge.Common.TriggerAttribute">TriggerAttribute</see> derived class that aids
            in building trigger attributes.
            </summary>
        </member>
        <member name="M:RightEdge.Common.YYETriggerAttribute.#ctor">
            <summary>
            Constructs an instance using the default parameters.
            </summary>
        </member>
        <member name="M:RightEdge.Common.YYETriggerAttribute.SetDefaults">
            <summary>
            Override this function to set desired defaults.
            </summary>
            <remarks>
            By default, this class is specific to Yye Software in that it sets
            the author, company to Yye Software.  Override this to set your own
            default company and author as defaults.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.TriggerDependencyProcessor">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.TriggerInputAttribute">
            <summary>
            InputAttribute overload used for trigger inputs.
            </summary>
        </member>
        <member name="M:RightEdge.Common.TriggerInputAttribute.#ctor">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TriggerInputAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance with the specified name and order
            </summary>
            <param name="name">friendly name of this input.</param>
            <param name="order">order that it appears in relation to other trigger inputs.</param>
        </member>
        <member name="M:RightEdge.Common.TriggerInputAttribute.Clone">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TriggerInputAttribute.GetTriggerInputs(System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.TriggerInputAttribute.Value">
            <summary>
            Gets or sets the value of this input.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TriggerManager">
            <summary>
            Handles trigger evaluation within trading systems.
            </summary>
            <remarks>
            An instance is created within the <see cref="T:RightEdge.Common.SystemData">SystemData</see> and there
            should rarely be a need to create this independently.
            </remarks>
            <example>
            Accessing triggers within a system
            <code lang="C#">
            // Create the trigger in the Startup() function
            public override void Startup()
            {
                 // Creates a crossover trigger.  This assumes that the two
                 // series named SMA5 and SMA20 are created and valid.
                 Triggers["SMAX"].CreateTrigger(new CrossOver());
                 Triggers["SMAX"].SetSeriesInputs("SMA5","SMA20");
                 // ...
            }
            
            // Evaluating the trigger in the NewSymbolBar() function
            public override void NewSymbolBar(Symbol symbol, BarData bar)
            {
                 // Whenever our trigger is hit, open a new position
                 if (Triggers["SMAX"][symbol].IsTriggered)
                 {
            	     SystemData.OpenPosition(symbol, PositionType.Long, OrderType.Market);
                 }
            }
            
            </code>
            
            <code lang="VB" title="Visual Basic.Net">
            Public Overloads Overrides Sub Startup() 
                 ' Creates a crossover trigger.  This assumes that the two
                 ' series named SMA5 and SMA20 are created and valid.
                 Triggers("SMAX").CreateTrigger(New CrossOver) 
                 Triggers("SMAX").SetSeriesInputs("SMA5", "SMA20") 
             End Sub 
             
             ' Evaluating the trigger in the NewSymbolBar() function
             Public Overloads Overrides Sub NewSymbolBar(ByVal symbol As Symbol, ByVal bar As BarData) 
                 ' Whenever our trigger is hit, open a new position
                 If Triggers("SMAX")(symbol).IsTriggered Then 
                     SystemData.OpenPosition(symbol, PositionType.Long, OrderType.Market) 
                 End If 
             End Sub
            </code>
            </example>
        </member>
        <member name="M:RightEdge.Common.TriggerManager.#ctor(RightEdge.Common.SystemData)">
            <summary>
            Creates an instance of TriggerManager.
            </summary>
            <param name="system">The associated <see cref="T:RightEdge.Common.SystemData">SystemData</see> instance.</param>
        </member>
        <member name="M:RightEdge.Common.TriggerManager.TriggerExists(System.String)">
            <summary>
            Determines if a trigger with the given name has been created.
            </summary>
            <param name="id">The name of the trigger</param>
            <returns>A boolean value indicating whether the trigger exists or not.</returns>
        </member>
        <member name="M:RightEdge.Common.TriggerManager.NewBar(RightEdge.Common.Internal.FrequencyNewBarEventArgs)">
            <summary>
            Called by the system whenever a new bar comes in.
            </summary>
            <param name="args">The current set of bars.</param>
            <remarks>
            This function allows triggers to be processed bar by bar.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.TriggerManager.System">
            <summary>
            Gets the <see cref="T:RightEdge.Common.SystemData">SystemData</see> reference associated
            with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.TriggerManager.Keys">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.TriggerManager.Item(System.String)">
            <summary>
            Retrieves or creates a trigger collection with the specified Id.
            </summary>
            <param name="id">Id of the trigger collection to retrieve</param>
            <returns><see cref="T:RightEdge.Common.SymbolTriggerCollection">SymbolTriggerCollection</see> instance.</returns>
            <remarks>
            If the specified Id does not have a SymbolTriggerCollection instance, one will be created and assigned
            to the Id.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.SymbolTriggerCollection">
            <summary>
            Collection of triggers grouped by symbol.
            </summary>
            <remarks>
            This class is used in conjunction with the <see cref="T:RightEdge.Common.TriggerManager">TriggerManager</see> class.
            It is not necessary to create an instance of this class.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolTriggerCollection.#ctor(System.String,RightEdge.Common.TriggerManager)">
            <summary>
            SymbolTriggerCollection constructor.
            </summary>
            <param name="name">Name of this collection</param>
            <param name="manager">An instantiated <see cref="T:RightEdge.Common.TriggerManager">TriggerManager</see> instance.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolTriggerCollection.CreateTrigger(RightEdge.Common.ITrigger)">
            <summary>
            Creates a trigger instance for each symbol.
            </summary>
            <param name="trigger">Trigger to create.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolTriggerCollection.SetSeriesInputs(System.Object[])">
            <summary>
            Sets inputs for each trigger for each symbol.
            </summary>
            <param name="inputs">Collection of inputs.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolTriggerCollection.GetTriggersForInputs(System.String,System.Object[])">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SymbolTriggerCollection.SetTriggerInputs(System.Object[])">
            <summary>
            Sets trigger inputs for each symbol.
            </summary>
            <param name="inputs">Collection of inputs to set.</param>
        </member>
        <member name="P:RightEdge.Common.SymbolTriggerCollection.Name">
            <summary>
            Gets the trigger name.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolTriggerCollection.System">
            <summary>
            Gets the instance of the <see cref="T:RightEdge.Common.SystemData">SystemData</see> associated with this collection.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolTriggerCollection.Item(RightEdge.Common.Symbol)">
            <summary>
            Gets a trigger for the specified symbol.
            </summary>
            <param name="symbol">Symbol class</param>
            <returns>Returns the trigger associated with this symbol.  If none exists, null or Nothing is returned.</returns>
        </member>
        <member name="T:RightEdge.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Properties.Resources.DeployLX_Licensing_v3">
             <summary>
               Looks up a localized string similar to &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;root&gt;
            	&lt;resheader name="resmimetype"&gt;
            		&lt;value&gt;text/microsoft-resx&lt;/value&gt;
            	&lt;/resheader&gt;
            	&lt;resheader name="version"&gt;
            		&lt;value&gt;1.3&lt;/value&gt;
            	&lt;/resheader&gt;
            	&lt;resheader name="reader"&gt;
            		&lt;value&gt;System.Resources.ResXResourceReader, System.Windows.Forms&lt;/value&gt;
            	&lt;/resheader&gt;
            	&lt;resheader name="writer"&gt;
            		&lt;value&gt;System.Resources.ResXResourceWriter, System.Windows.Forms&lt;/value&gt;
            	&lt;/resheader&gt;
            
            	&lt;collection id="Common" name="Common Errors"&gt;
            		&lt;summary&gt;Errors return [rest of string was truncated]";.
             </summary>
        </member>
        <member name="T:RightEdge.Common.SeriesUtil">
            <summary>
            Helper Class to obtains values from series
            </summary>
        </member>
        <member name="T:RightEdge.Common.ActionInfo">
            <exclude />
            <summary>
            The ActionInfo class wraps an action with its trigger and inputs
            </summary>
        </member>
        <member name="M:RightEdge.Common.ActionInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <remarks>This performs a "deep" copy where the underlying collections are also copied.</remarks>
        </member>
        <member name="M:RightEdge.Common.ActionInfo.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:RightEdge.Common.ActionInfo.CreateSeriesInputs(System.Collections.Generic.List{RightEdge.Common.SeriesInputAttribute})">
            <summary>
            Builds the SeriesInput collection
            </summary>
            <param name="attributes">a list of <see cref="T:RightEdge.Common.SeriesInputAttribute" /> items to build each SeriesInputValue item</param>
        </member>
        <member name="M:RightEdge.Common.ActionInfo.BuildTree(System.Collections.Generic.List{RightEdge.Common.ActionInfo})">
            <summary>
            Builds the Action tree given the ActionInfo inputs
            </summary>
            <param name="infoList">a list of <see cref="T:RightEdge.Common.ActionInfo" /> items to build each ActionNode item</param>
            <returns>Constructed list of <see cref="T:RightEdge.Common.ActionNode" /> objects.</returns>
        </member>
        <member name="M:RightEdge.Common.ActionInfo.FindNode(System.Collections.Generic.List{System.String},System.Collections.Generic.List{RightEdge.Common.ActionNode},System.Boolean)">
            <summary>
            Searches for an ActionNodeItem.
            </summary>
            <param name="Path">Refers to the <see cref="!:RightEdge.Common.ActionNode.Path" /> property in the ActionNode class.</param>
            <param name="nodes">The list of ActionNode items to search through</param>
            <param name="create">Flag that specifies whether or not a new ActionNodeItem will be created if nothing is found.</param>
            <returns>ActionNodeItem instance, null if none is found and create is set to false.</returns>
        </member>
        <member name="M:RightEdge.Common.ActionInfo.ProcessItem(RightEdge.Common.ActionNodeItem,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Processes an ActionNodeItem
            </summary>
            <param name="item">Item to process</param>
            <param name="Path">Path to this node in the list.</param>
            <param name="create">Flag that specifies whether or not a new ActionNodeItem will be created if nothing is found.</param>
            <returns>ActionNodeItem instance, null if none is found and create is set to false.</returns>
        </member>
        <member name="P:RightEdge.Common.ActionInfo.TriggerName">
            <summary>
            The name of the trigger this action is associated with
            </summary>
        </member>
        <member name="P:RightEdge.Common.ActionInfo.Path">
            <summary>
            This list alternates between an action number and the name of an action input
            For example, 1/OnBuy/2 would be the second action to be taken when a
            position is opened as a result of the first action (a buy action)
            </summary>
        </member>
        <member name="P:RightEdge.Common.ActionInfo.PluginID">
            <summary>
            Unique identifier for this plugin
            </summary>
        </member>
        <member name="P:RightEdge.Common.ActionInfo.PluginName">
            <summary>
            Friendly name given to this plugin.
            </summary>
        </member>
        <member name="P:RightEdge.Common.ActionInfo.ConstructorArguments">
            <summary>
            Constructor argument list.
            </summary>
            <remarks>
            Contains any constructor arguments that are required to construct the plugin.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.ActionInfo.SeriesInputs">
            <summary>
            Input values for series associated with this action.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ActionNode">
            <exclude />
            <summary>
            ActionNode class
            </summary>
            <remarks>Contains a list of ActionNodeItem objects.</remarks>
        </member>
        <member name="M:RightEdge.Common.ActionNode.SortActions">
            <summary>
            Sorts the ActionNodeItems in this list based on the ListIndex value.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ActionNodeItem">
            <exclude />
            <summary>
            A class that contains an ActionNode, ActionInfo and the sort order of the Action.
            </summary>
        </member>
        <member name="T:RightEdge.Common.NewTickEventArgs">
            <summary>
            NewTick event arguments
            </summary>
            <remarks>
            This is a consolidation class used to notify of an incoming new tick.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.NewTickEventArgs.Symbol">
            <summary>
            Gets or sets the <see cref="T:RightEdge.Common.Symbol" /> associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.NewTickEventArgs.Tick">
            <summary>
            Gets or sets the <see cref="T:RightEdge.Common.TickData" /> associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.NewTickEventArgs.PartialBar">
            <summary>
            Gets or sets the <see cref="T:RightEdge.Common.BarData" /> associated with this instance.
            </summary>
        </member>
        <member name="T:RightEdge.Common.NewBarEventArgs">
            <summary>
            NewBar event arguments
            </summary>
            <remarks>
            This is a consolidation class used to notify of an incoming new bar.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.NewBarEventArgs.AddBar(RightEdge.Common.Symbol,RightEdge.Common.BarData)">
            <summary>
            Adds a BarData object to the list for the specified symbol.
            </summary>
            <param name="symbol">Symbol object this bar data relates to.</param>
            <param name="bar">Actual BarData to add.</param>
        </member>
        <member name="P:RightEdge.Common.NewBarEventArgs.BarDictionary">
            <summary>
            Gets the BarData objects aggregated by symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.NewBarEventArgs.Symbols">
            <summary>
            Gets the Symbols associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.NewBarEventArgs.Item(RightEdge.Common.Symbol)">
            <summary>
            Gets the BarData object for this Symbol.
            </summary>
            <param name="symbol">Symbol instance to search for bar data.</param>
            <returns>BarData if it exists for this symbol, otherwise null if no bar data is found.</returns>
        </member>
        <member name="P:RightEdge.Common.NewBarEventArgs.TicksWereSent">
            <summary>
            Indicates whether ticks for this bar have been sent or not.  This is to avoid counting data twice if they were.
            </summary>
        </member>
        <member name="P:RightEdge.Common.NewBarEventArgs.BarStartTime">
            <summary>
            Gets or sets this bar's start time.
            </summary>
        </member>
        <member name="P:RightEdge.Common.NewBarEventArgs.BarEndTime">
            <summary>
            Gets or sets this bar's end time.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SingleBarEventArgs">
            <summary>
            Event class used in conjunction with bar level processing.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SingleBarEventArgs.#ctor(RightEdge.Common.Symbol,RightEdge.Common.BarData,System.DateTime,System.Boolean)">
            <summary>
            Constructs a SingleBarEventArgs object.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.Symbol" /> object associated with this event.</param>
            <param name="bar"><see cref="T:RightEdge.Common.BarData" /> information for this bar event.</param>
            <param name="barEndTime">Date/time assigned to the end of this bar.</param>
            <param name="ticksWereSent">Flag to indicate whether or not ticks were sent prior to the completion of this bar.</param>
        </member>
        <member name="M:RightEdge.Common.SingleBarEventArgs.ToString">
            <summary>
            Represents a string of this SingleBarEventArgs instance.
            </summary>
            <returns>string</returns>
            <remarks>Concatenates the Symbol with a space, followed by the bar's start time and a space and finally
            the bar's end time.</remarks>
        </member>
        <member name="P:RightEdge.Common.SingleBarEventArgs.Symbol">
            <summary>
            Gets the <see cref="T:RightEdge.Common.Symbol" /> object associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SingleBarEventArgs.Bar">
            <summary>
            Gets the <see cref="T:RightEdge.Common.BarData" /> object associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SingleBarEventArgs.BarStartTime">
            <summary>
            Gets the bar's start time.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SingleBarEventArgs.BarEndTime">
            <summary>
            Gets the bar's end time.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SingleBarEventArgs.TicksWereSent">
            <summary>
            Gets the TicksWereSent flag.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BarGenerator">
            <summary>
            A utility class which can be used when writing custom frequency plugins.
            </summary>
        </member>
        <member name="M:RightEdge.Common.BarGenerator.#ctor(RightEdge.Common.Symbol,RightEdge.Common.BarConstructionType)">
            <summary>
            Constructor for BarGenerator class.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.Symbol" /> object associated with this instance.</param>
            <param name="barConstruction"><see cref="T:RightEdge.Common.BarConstructionType" /> enumeration.</param>
        </member>
        <member name="M:RightEdge.Common.BarGenerator.ProcessTick(RightEdge.Common.TickData)">
            <summary>
            Processes tick data.
            </summary>
            <param name="tick">Incoming TickData structure.</param>
            <remarks>
            This method will take tick data of varying tick types and assemble a bar.
            Once the processing is completed, it fires the NewTick event.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarGenerator.ProcessBar(RightEdge.Common.SingleBarEventArgs)">
            <summary>
            Processes incoming bars.
            </summary>
            <param name="args"><see cref="T:RightEdge.Common.SingleBarEventArgs" /> object.</param>
            <remarks>
            Modifies or creates a bar based on the incoming arguments.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.BarGenerator.SendNewBar(System.DateTime)">
            <summary>
            Sends a NewBar event with the specified bar end time.
            </summary>
            <param name="barEndTime">This new bar's end time.</param>
        </member>
        <member name="M:RightEdge.Common.BarGenerator.SetBarStartTime(System.DateTime)">
            <summary>
            Sets the current partial bar's start time.
            </summary>
            <param name="barStartTime">DateTime containing the start time.</param>
        </member>
        <member name="P:RightEdge.Common.BarGenerator.BarConstruction">
            <summary>
            Gets the BarConstructionType enumeration associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarGenerator.PartialBar">
            <summary>
            Gets the partial bar
            </summary>
        </member>
        <member name="P:RightEdge.Common.BarGenerator.BarPartialBar">
            <summary>
            Gets the internal partial bar.
            </summary>
            <remarks>
            This variable holds the Partial Bar, but is not updated
            when new ticks come in.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.BarGenerator.BarStartTime">
            <summary>
            Gets the start time of this bar.
            </summary>
        </member>
        <member name="E:RightEdge.Common.BarGenerator.NewTick">
            <summary>
            Event handler when a new tick arrives.
            </summary>
        </member>
        <member name="E:RightEdge.Common.BarGenerator.NewBar">
            <summary>
            Event handler when a new bar is generated.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BrokerPosition">
            <summary>
            Stores information about a position at the broker.  This is used when saving and restoring live positions.  You should only need to use
            this class if you are implementing a broker plugin that supports restoring saved positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerPosition.Symbol">
            <summary>
            The symbol for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerPosition.Direction">
            <summary>
            The direction (long or short) for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerPosition.Size">
            <summary>
            The size of the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerPosition.EntryPrice">
            <summary>
            The entry price of the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerPosition.EntryDate">
            <summary>
            The entry date for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerPosition.Margin">
            <summary>
            The value of the margin account corresponding to this position
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerPosition.ShortedCash">
            <summary>
            The amount of cash received from short selling.
            </summary>
        </member>
        <member name="T:RightEdge.Common.BrokerAccountState">
            <summary>
            Holds information about an account at a broker.  This is used when saving and restoring live positions.  You should only need to use
            this class if you are implementing a broker plugin that supports restoring saved positions.
            </summary>
        </member>
        <member name="M:RightEdge.Common.BrokerAccountState.#ctor">
            <summary>
            Constructs a <see cref="T:RightEdge.Common.BrokerAccountState" /> object.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerAccountState.Positions">
            <summary>
            The list of currently open positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerAccountState.PendingOrders">
            <summary>
            The list of pending orders.
            </summary>
        </member>
        <member name="P:RightEdge.Common.BrokerAccountState.BrokerOverride">
            <summary>
            Indicates that the broker wishes to override the account state that was passed into it.
            </summary>
            <remarks>
            <para>When <see cref="M:RightEdge.Common.IBroker.SetAccountState(RightEdge.Common.BrokerAccountState)" /> is called, the broker can set this property to true if it wants to
            override the account state.  It can then modify the <see cref="P:RightEdge.Common.BrokerAccountState.Positions" /> and <see cref="P:RightEdge.Common.BrokerAccountState.PendingOrders" /> lists
            and RightEdge will use the modified account state.
            </para>
            <para>Note that if the broker sets this option to true, the positions created for your system will not have all
            of the information that the saved positions would have had.  Multiple positions per symbol will be combined into
            a single position.  There will be no profit target or stop loss on the positions (although the orders that were
            submitted as profit targets or stop losses may still be pending as UserSubmitted orders).  The orders and
            positions will have no timeout / bar count exit value.  Also, the open positions will only contain one trade in 
            their history instead of whatever history of fills may have occured.
            </para>
            </remarks>
        </member>
        <member name="T:RightEdge.Common.ColorSerialization">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Dequeue`1">
            <summary>
            System.Collections conform class for a ring-queue.
            </summary>
            <typeparam name="T">type of this Dequeue</typeparam>
            <remarks>
            The collection support adding and removing at both ends and
            automatic expansion.
            The left end of the ring is referred to as head, the right end as tail.
            add / remove is O(1)
            expansion is O(n)
            indexed access and enumeration is O(1)
            </remarks>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.#ctor">
            <summary>
            Create an empty Dequeu with capacity 32 and growth 2
            </summary>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.#ctor(System.Int32)">
            <summary>
            Create an empty Dequeu with given capacity and growth 2
            </summary>
            <param name="Capacity">the initial capacity of the collection</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.#ctor(System.Int32,System.Double)">
            <summary>
            Create an empty Dequeu with given capacity and given growth
            </summary>
            <param name="Capacity">the initial capacity of the collection</param>
            <param name="GrowthFactor">the factor by which to grow the collection when the capacity is reached</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Create a new Dequeu as a copy of the given collection
            </summary>
            <param name="C">The source collection</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32)">
            <summary>
            Create a new Dequeu as a copy of the given collection and the given capacity
            </summary>
            <param name="C">The source collection</param>
            <param name="Capacity">The capacity of the new Dequeue (must be &gt;= C.Count)</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.EnqueueHead(`0)">
            <summary>
            Add the given object to the collections head
            </summary>
            <param name="value">The object to enqueue</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.EnqueueTail(`0)">
            <summary>
            Add the given object to the collections tail
            </summary>
            <param name="value">The object to enqueue</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.DequeueHead">
            <summary>
            Retrieve and remove the current head
            </summary>
            <returns>The removed object</returns>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.DequeueTail">
            <summary>
            Retrieve and remove the current tail
            </summary>
            <returns>The removed object</returns>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.EnqueueTailRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Add the given collection to the dequeues tail
            </summary>
            <param name="C">The source collection</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.EnqueueHeadRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Add the given collection to the dequeues head.
            To preserve the order in the collection, the entries are
            added in revers order.
            </summary>
            <param name="C">The source collection</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.Clear">
            <summary>
            Deletes all entries from the collection
            </summary>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.TrimToSize">
            <summary>
            Sets the capacity to Count.
            </summary>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Implementation of the ICollection.CopyTo function.
            </summary>
            <param name="array">Target array</param>
            <param name="index">Start-Index in target array</param>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.GetEnumerator">
            <summary>
            Standard implementation.
            </summary>
            <returns>A DequeueEnumerator on the current dequeue</returns>
        </member>
        <member name="M:RightEdge.Common.Dequeue`1.SetSize(System.Int32)">
            <summary>
            Sets the collections capacity to newSize
            </summary>
            <param name="newSize">the new collection size (must be &gt;= Count)</param>
        </member>
        <member name="P:RightEdge.Common.Dequeue`1.Item(System.Int32)">
            <summary>
            Indexed access to all elements currently in the collection.
            Indexing starts at 0 (head) and ends at Count-1 (tail).
            </summary>
        </member>
        <member name="P:RightEdge.Common.Dequeue`1.GrowthFactor">
            <summary>
            The current factor by which to grow the collection in case of expansion
            </summary>
        </member>
        <member name="P:RightEdge.Common.Dequeue`1.Capacity">
            <summary>
            The current amount of cells available to the dequeue
            </summary>
        </member>
        <member name="P:RightEdge.Common.Dequeue`1.Version">
            <summary>
            The current version of the dequeue. The version is increased with every changing operation.
            The main use is to invalidate all IEnumerators.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Dequeue`1.Count">
            <summary>
            The current number of elements in the queue
            </summary>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.DocumentEventArgs">
            <summary>
            Documentation arguments
            </summary>
            <remarks>
            This class derives from the standard EventArgs within the framework to deliver
            additional information about a change within the document.  The DocumentEventArgs
            contains the <see cref="T:RightEdge.Common.DocumentManager.IDocument" /> that the
            event was fired for.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.DocumentEventArgs.#ctor(RightEdge.Common.DocumentManager.IDocument)">
            <summary>
            Constructs a DocumentEventArgs object.
            </summary>
            <param name="document">Instance of the <see cref="T:RightEdge.Common.DocumentManager.IDocument" />.</param>
        </member>
        <member name="P:RightEdge.Common.DocumentManager.DocumentEventArgs.Document">
            <summary>
            <see cref="T:RightEdge.Common.DocumentManager.IDocument" /> instance.
            </summary>
            <remarks>
            Holds the instance of the <see cref="T:RightEdge.Common.DocumentManager.IDocument" /> that
            this event was fired for.
            </remarks>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.DocumentExportType">
            <summary>
            Not in use at this time.
            </summary>
        </member>
        <member name="F:RightEdge.Common.DocumentManager.DocumentExportType.HTML">
            <summary>
            HTML export
            </summary>
        </member>
        <member name="F:RightEdge.Common.DocumentManager.DocumentExportType.SeparatedValues">
            <summary>
            values separated export
            </summary>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.UpdateInterfaceEvent">
            <summary>
            Update interface event.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">DocumentEventArgs instance</param>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.LinePositionEvent">
            <summary>
            Line Position update event.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">Line position.</param>
            <remarks>Reserved internal at this time.</remarks>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.InsertStatusEvent">
            <summary>
            Insert status event.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">Insert status.</param>
            <remarks>Reserved internal at this time.</remarks>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.DocumentOpenDelegate">
            <summary>
            Document opened event.
            </summary>
            <param name="document">IDocument instance.</param>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.DocumentClosingDelegate">
            <summary>
            Document closing event.
            </summary>
            <param name="document">IDocument instance.</param>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.IDocument">
            <summary>
            RightEdge Document interface.
            </summary>
            <remarks>
            Each document that is to be added to the document manager must implement
            the IDocument interface.  This interface specifies a baseline set of
            properties, methods, and events that each document implement.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanUndo">
            <summary>
            Specifies whether or not this document is capable of performing an undo action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Returning true will enable the Undo menu item within RightEdge.  When the user
            selects Undo, the Undo function will be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanRedo">
            <summary>
            Specifies whether or not this document is capable of performing a redo action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Returning true will enable the Redo menu item within RightEdge.  When the user
            selects Redo, the Redo function will be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanCut">
            <summary>
            Specifies whether or not this document is capable of performing a cut action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Cut will take the current selection and remove it, but will make a copy
            of the data to the clipboard.  Return true to enable cut functionality.  When
            the user selects the Cut option from within RightEdge, the Cut function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanCopy">
            <summary>
            Specifies whether or not this document is capable of performing a copy action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Copy will take the current selection and make a copy
            of the data to the clipboard.  Return true to enable copy functionality.  When
            the user selects the Copy option from within RightEdge, the Copy function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanPaste">
            <summary>
            Specifies whether or not this document is capable of performing a paste action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Paste will take what is currently in the clipboard and place it in the current
            document.  It is up to the implementor to ensure that whatever format the clipboard
            currently holds can indeed be pasted in the current document.  Return true to
            enable paste functionality.  When
            the user selects the Paste option from within RightEdge, the Paste function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanSelectAll">
            <summary>
            Specifies whether or not this document is capable of performing a select all action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Select All will perform an action to select all items in the document.
            Return true to enable this functionality.  When
            the user selects the Select All option from within RightEdge, the SelectAll function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanFindReplace">
            <summary>
            Specifies whether or not this document is capable of performing a Find/Replace action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Find/Replace is typically used in a text document environment.
            Return true to enable this functionality.  When
            the user selects the Find/Replace option from within RightEdge, the FindReplace function will
            be called within your document by the document manager.
            
            <b>Note: This is not called for System Results plugins</b>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanGotoLine">
            <summary>
            Specifies whether or not this document is capable of performing a Goto Line action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Goto Line is typically used in a text document environment.  The action will typically
            allow the user to quickly specify a line number to navigate to within a text document.
            Return true to enable this functionality.  When
            the user selects the Goto Line option from within RightEdge, the GotoLine function will
            be called within your document by the document manager.
            
            <b>Note: This is not called for System Results plugins</b>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanDelete">
            <summary>
            Specifies whether or not this document is capable of performing a delete action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Delete will take the current selection and remove the data without making
            a copy of it to the clipboard.  Return true to enable delete functionality.  When
            the user selects the Delete option from within RightEdge, the Delete function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanSave">
            <summary>
            Specifies whether or not this document is capable of performing a save action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Save will take the current document persist its contents to disk.
            Return true if this document is capable of saving to disk.  When
            the user selects the Save option from within RightEdge, the Save function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanSaveAs">
            <summary>
            Specifies whether or not this document is capable of performing a save as action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Save as will take the current document persist its contents to disk after
            prompting the user for a place to save the document contents.
            Return true if this document is capable of saving to disk.  When
            the user selects the Save As option from within RightEdge, the SaveAs function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanExport">
            <summary>
            Reserved.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanPrint">
            <summary>
            Specifies whether or not this document is capable of performing a print action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Print will take the current document and render the contents to the printer.
            Return true if this document is capable of printing.  When
            the user selects the Print option from within RightEdge, the Print function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanPrintPreview">
            <summary>
            Specifies whether or not this document is capable of performing a print preview action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Print Preview will take the current document and render the contents to the screen
            but displays exactly how they will look if the document is printed.
            Return true if this document is capable of rendering a print preview.  When
            the user selects the Print Preview option from within RightEdge, the PrintPreview function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.HasLinePositions">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.HasInsertStatus">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanVerticalSplit">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanHorizontalSplit">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Can4WaySplit">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.CanRemoveSplit">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.UpdateSettings">
            <summary>
            Called when the Options dialog return DialogResult.OK.  Each document needs to update
            itself with the new settings.
            </summary>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Undo">
            <summary>
            Performs the Undo action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanUndo" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Redo">
            <summary>
            Performs the Redo action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanRedo" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Cut">
            <summary>
            Performs the Cut action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanCut" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Copy">
            <summary>
            Performs the Copy action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanCopy" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Paste">
            <summary>
            Performs the Paste action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanPaste" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.SelectAll">
            <summary>
            Performs the Select All action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanSelectAll" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.FindReplace">
            <summary>
            Performs the Find/Replace action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanFindReplace" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.GotoLine">
            <summary>
            Performs the Goto Line action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanGotoLine" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Delete">
            <summary>
            Performs the Delete action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanDelete" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Save">
            <summary>
            Performs the Save action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanSave" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.SaveAs">
            <summary>
            Performs the Save As action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanSaveAs" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Export(RightEdge.Common.DocumentManager.DocumentExportType)">
            <summary>
            Performs the Export action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanExport" />
            <param name="exportType">Specifies the export type.</param>
            <remarks>
            Reserved.  Not in use at this time.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.Print(System.Drawing.Printing.PageSettings)">
            <summary>
            Performs the Print action within the document.
            </summary>
            <param name="pageSettings">Printer page settings</param>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanPrint" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.PrintPreview">
            <summary>
            Performs the Print Preview action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanPrintPreview" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.GetLinePositions(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Used internal to RightEdge.
            </summary>
            <param name="character">character at the line and column.</param>
            <param name="column">column number</param>
            <param name="line">line number</param>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.HasLinePositions" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.GetInsertStatus">
            <summary>
            Used internal to RightEdge.
            </summary>
            <returns>Return false</returns>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.HasInsertStatus" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.HorizontalSplit">
            <summary>
            Used internal to RightEdge.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanHorizontalSplit" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.VerticalSplit">
            <summary>
            Used internal to RightEdge.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanVerticalSplit" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.FourWaySplit">
            <summary>
            Used internal to RightEdge.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.Can4WaySplit" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.RemoveSplit">
            <summary>
            Used internal to RightEdge.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanRemoveSplit" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.ActivateDocument">
            <summary>
            Called when a document is activated.
            </summary>
            <remarks>
            This is similar to the Enter and Leave events within Windows Forms.
            When the document or tab receives focus, this function is called to notify
            the document of this event.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.IDocument.DeactivateDocument">
            <summary>
            Called when a document is deactivated.
            </summary>
            <remarks>
            This is similar to the Enter and Leave events within Windows Forms.
            When the document or tab loses focus, this function is called to notify
            the document of this event.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.DocumentManager.IDocument.DisplayName">
            <summary>
            This is the recommended name of the document that should
            be used by the UI for display purposes.  
            </summary>
        </member>
        <member name="P:RightEdge.Common.DocumentManager.IDocument.InternalName">
            <summary>
            This is the internal name of the document which can be
            used to persist the document to a storage device.
            </summary>
        </member>
        <member name="P:RightEdge.Common.DocumentManager.IDocument.Dirty">
            <summary>
            Returns to the document manager whether or not this document is dirty.
            </summary>
            <remarks>
            If the document is dirty, meaning that it has been modified, the document
            manager may ask the user if they want to save the dirty document.  At this
            point, the Save method may get called to resolve the dirty state.
            </remarks>
        </member>
        <member name="E:RightEdge.Common.DocumentManager.IDocument.DocumentUpdate">
            <summary>
            Event raised when the document is updated.
            </summary>
        </member>
        <member name="E:RightEdge.Common.DocumentManager.IDocument.DocumentPositionUpdate">
            <summary>
            Event raised when the position of the cursor in the document is updated.
            </summary>
        </member>
        <member name="E:RightEdge.Common.DocumentManager.IDocument.InsertStatusUpdate">
            <summary>
            Event raised when the insertion status changes.
            </summary>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.UserControlDocument">
            <summary>
            A user control that implements the IDocument interface.
            </summary>
            <remarks>Generally used for System Results plugins that display user interface.  Implementing IDocument will allow the UserControl to be
            embedded and interact with the main RightEdge user interface for system results.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanUndo">
            <summary>
            Specifies whether or not this document is capable of performing an undo action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Returning true will enable the Undo menu item within RightEdge.  When the user
            selects Undo, the Undo function will be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanRedo">
            <summary>
            Specifies whether or not this document is capable of performing a redo action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Returning true will enable the Redo menu item within RightEdge.  When the user
            selects Redo, the Redo function will be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanCut">
            <summary>
            Specifies whether or not this document is capable of performing a cut action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Cut will take the current selection and remove it, but will make a copy
            of the data to the clipboard.  Return true to enable cut functionality.  When
            the user selects the Cut option from within RightEdge, the Cut function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanCopy">
            <summary>
            Specifies whether or not this document is capable of performing a copy action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Copy will take the current selection and make a copy
            of the data to the clipboard.  Return true to enable copy functionality.  When
            the user selects the Copy option from within RightEdge, the Copy function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanPaste">
            <summary>
            Specifies whether or not this document is capable of performing a paste action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Paste will take what is currently in the clipboard and place it in the current
            document.  It is up to the implementor to ensure that whatever format the clipboard
            currently holds can indeed be pasted in the current document.  Return true to
            enable paste functionality.  When
            the user selects the Paste option from within RightEdge, the Paste function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanSelectAll">
            <summary>
            Specifies whether or not this document is capable of performing a select all action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Select All will perform an action to select all items in the document.
            Return true to enable this functionality.  When
            the user selects the Select All option from within RightEdge, the SelectAll function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanFindReplace">
            <summary>
            Specifies whether or not this document is capable of performing a Find/Replace action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Find/Replace is typically used in a text document environment.
            Return true to enable this functionality.  When
            the user selects the Find/Replace option from within RightEdge, the FindReplace function will
            be called within your document by the document manager.
            
            <b>Note: This is not called for System Results plugins</b>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanGotoLine">
            <summary>
            Specifies whether or not this document is capable of performing a Goto Line action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Goto Line is typically used in a text document environment.  The action will typically
            allow the user to quickly specify a line number to navigate to within a text document.
            Return true to enable this functionality.  When
            the user selects the Goto Line option from within RightEdge, the GotoLine function will
            be called within your document by the document manager.
            
            <b>Note: This is not called for System Results plugins</b>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanDelete">
            <summary>
            Specifies whether or not this document is capable of performing a delete action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Delete will take the current selection and remove the data without making
            a copy of it to the clipboard.  Return true to enable delete functionality.  When
            the user selects the Delete option from within RightEdge, the Delete function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanSave">
            <summary>
            Specifies whether or not this document is capable of performing a save action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Save will take the current document persist its contents to disk.
            Return true if this document is capable of saving to disk.  When
            the user selects the Save option from within RightEdge, the Save function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanSaveAs">
            <summary>
            Specifies whether or not this document is capable of performing a save as action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Save as will take the current document persist its contents to disk after
            prompting the user for a place to save the document contents.
            Return true if this document is capable of saving to disk.  When
            the user selects the Save As option from within RightEdge, the SaveAs function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanExport">
            <summary>
            Reserved.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanPrint">
            <summary>
            Specifies whether or not this document is capable of performing a print action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Print will take the current document and render the contents to the printer.
            Return true if this document is capable of printing.  When
            the user selects the Print option from within RightEdge, the Print function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanPrintPreview">
            <summary>
            Specifies whether or not this document is capable of performing a print preview action.
            </summary>
            <returns>bool specifying its capability.</returns>
            <remarks>
            Print Preview will take the current document and render the contents to the screen
            but displays exactly how they will look if the document is printed.
            Return true if this document is capable of rendering a print preview.  When
            the user selects the Print Preview option from within RightEdge, the PrintPreview function will
            be called within your document by the document manager.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.HasLinePositions">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.HasInsertStatus">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanVerticalSplit">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanHorizontalSplit">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Can4WaySplit">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.CanRemoveSplit">
            <summary>
            Reserved.  Specific to text based documents internal to RightEdge.
            </summary>
            <returns>Return false.</returns>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.UpdateSettings">
            <summary>
            Called when the Options dialog return DialogResult.OK.  Each document needs to update
            itself with the new settings.
            </summary>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Undo">
            <summary>
            Performs the Undo action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanUndo" />
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Redo">
            <summary>
            Performs the Redo action within the document.
            </summary>
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanRedo" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Cut">
            <summary>
            Performs the Cut action within the document.
            </summary>
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanCut" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Copy">
            <summary>
            Performs the Copy action within the document.
            </summary>
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanCopy" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Paste">
            <summary>
            Performs the Paste action within the document.
            </summary>
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanPaste" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.SelectAll">
            <summary>
            Performs the Select All action within the document.
            </summary>
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanSelectAll" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.FindReplace">
            <summary>
            Performs the Find/Replace action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanFindReplace" />
            <remarks>This is not called for System Results plugins.  Implementation is not required.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.GotoLine">
            <summary>
            Performs the Goto Line action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanGotoLine" />
            <remarks>This is not called for System Results plugins.  Implementation is not required.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Delete">
            <summary>
            Performs the Delete action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanDelete" />
            <remarks>This is not called for System Results plugins.  Implementation is not required.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Save">
            <summary>
            Performs the Save action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanSave" />
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.SaveAs">
            <summary>
            Performs the Save As action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanSaveAs" />
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Export(RightEdge.Common.DocumentManager.DocumentExportType)">
            <summary>
            Performs the Export action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanExport" />
            <param name="exportType">Specifies the export type.</param>
            <remarks>
            Reserved.  Not in use at this time.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.Print(System.Drawing.Printing.PageSettings)">
            <summary>
            Performs the Print action within the document.
            </summary>
            <param name="pageSettings">Printer page settings</param>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanPrint" />
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.PrintPreview">
            <summary>
            Performs the Print Preview action within the document.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanPrintPreview" />
            <remarks>This must be implemented, the default behavior is to throw a NotImplementedException.</remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.GetLinePositions(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Used internal to RightEdge.
            </summary>
            <param name="character">character at the line and column.</param>
            <param name="column">column number</param>
            <param name="line">line number</param>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.HasLinePositions" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.GetInsertStatus">
            <summary>
            Used internal to RightEdge.
            </summary>
            <returns>Return false</returns>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.HasInsertStatus" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.HorizontalSplit">
            <summary>
            Used internal to RightEdge.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanHorizontalSplit" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.VerticalSplit">
            <summary>
            Used internal to RightEdge.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanVerticalSplit" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.FourWaySplit">
            <summary>
            Used internal to RightEdge.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.Can4WaySplit" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.RemoveSplit">
            <summary>
            Used internal to RightEdge.
            </summary>
            <seealso cref="M:RightEdge.Common.DocumentManager.IDocument.CanRemoveSplit" />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.ActivateDocument">
            <summary>
            Called when a document is activated.
            </summary>
            <remarks>
            This is similar to the Enter and Leave events within Windows Forms.
            When the document or tab receives focus, this function is called to notify
            the document of this event.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.DocumentManager.UserControlDocument.DeactivateDocument">
            <summary>
            Called when a document is deactivated.
            </summary>
            <remarks>
            This is similar to the Enter and Leave events within Windows Forms.
            When the document or tab loses focus, this function is called to notify
            the document of this event.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.DocumentManager.UserControlDocument.DisplayName">
            <summary>
            This is the recommended name of the document that should
            be used by the UI for display purposes.  
            </summary>
        </member>
        <member name="P:RightEdge.Common.DocumentManager.UserControlDocument.InternalName">
            <summary>
            This is the internal name of the document which can be
            used to persist the document to a storage device.
            </summary>
        </member>
        <member name="P:RightEdge.Common.DocumentManager.UserControlDocument.Dirty">
            <summary>
            Returns to the document manager whether or not this document is dirty.
            </summary>
            <remarks>
            If the document is dirty, meaning that it has been modified, the document
            manager may ask the user if they want to save the dirty document.  At this
            point, the Save method may get called to resolve the dirty state.
            </remarks>
        </member>
        <member name="E:RightEdge.Common.DocumentManager.UserControlDocument.DocumentUpdate">
            <summary>
            Event raised when the document is updated.
            </summary>
        </member>
        <member name="E:RightEdge.Common.DocumentManager.UserControlDocument.DocumentPositionUpdate">
            <summary>
            Event raised when the position of the cursor in the document is updated.
            </summary>
        </member>
        <member name="E:RightEdge.Common.DocumentManager.UserControlDocument.InsertStatusUpdate">
            <summary>
            Event raised when the insertion status changes.
            </summary>
        </member>
        <member name="T:RightEdge.Common.DocumentManager.InsertStatusEventArgs">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.InsertStatusEventArgs.#ctor(RightEdge.Common.DocumentManager.IDocument,System.Boolean)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.DocumentManager.InsertStatusEventArgs.Document">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.DocumentManager.InsertStatusEventArgs.Insert">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.DocumentManager.LinePositionEventArgs">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.DocumentManager.LinePositionEventArgs.#ctor(RightEdge.Common.DocumentManager.IDocument,System.Int32,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.DocumentManager.LinePositionEventArgs.Document">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.DocumentManager.LinePositionEventArgs.Line">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.DocumentManager.LinePositionEventArgs.Column">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.DocumentManager.LinePositionEventArgs.Character">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SystemResults">
            <summary>
            Stores the results of a system simulation.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemResults.#ctor(RightEdge.Common.SystemData,RightEdge.Common.SystemRunSettings)">
            <summary>
            Creates a SystemResults object.
            </summary>
            <param name="systemData">The SystemData object</param>
            <param name="runSettings">The SystemRunSettings object</param>
        </member>
        <member name="F:RightEdge.Common.SystemResults.RiskResults">
            <summary>
            The results from the enabled risk assessment plugins.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemResults.Save(RightEdge.Common.SystemResults,System.String)">
            <summary>
            Saves a SystemResults object to a file.  Note that the format changes with each RightEdge build, so it is not
            possible to save the system results in one build and load them in a different build.
            </summary>
            <param name="results">The SystemResults object to save.</param>
            <param name="filename">The file to save the SystemResults object to.</param>
        </member>
        <member name="M:RightEdge.Common.SystemResults.Load(System.String)">
            <summary>
            Loads a SystemResults object from a file.  Note that the format changes with each RightEdge build, so it is not
            possible to save the system results in one build and load them in a different build.
            </summary>
            <param name="filename">The file to load the SystemResults object from.</param>
            <returns>The SystemResults object which was loaded from the file.</returns>
        </member>
        <member name="M:RightEdge.Common.SystemResults.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemResults.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemResults.Data">
            <summary>
            The SystemData object from the simulation run.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemResults.RunSettings">
            <summary>
            The settings that were used to run the simulation.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemResults.RunLength">
            <summary>
            The amount of time it took to run the system.
            </summary>
        </member>
        <member name="T:RightEdge.Common.FinalSystemResults">
            <summary>
            Contains the results of a simulation run, along with other data for <see cref="T:RightEdge.Common.ISystemResultPlugin" /> plugins to use.
            </summary>
        </member>
        <member name="M:RightEdge.Common.FinalSystemResults.#ctor(RightEdge.Common.FinalSystemResults.ShowChartDelegate,RightEdge.Common.SystemResults)">
            <exclude />
        </member>
        <member name="F:RightEdge.Common.FinalSystemResults.PositionList">
            <summary>
            The list of positions opened by the system.
            </summary>
        </member>
        <member name="M:RightEdge.Common.FinalSystemResults.ShowChart(RightEdge.Common.Symbol,System.DateTime)">
            <summary>
            Displays a chart for the specified Symbol.
            </summary>
            <param name="symbol">Symbol to display the chart for.</param>
            <param name="dateTime">Date to scroll to within the chart.</param>
            <remarks>
            This allows for a chart to be displayed from a system results plugin.
            For example, if the plugin displays a list of trades, it might be useful
            to allow the user to double click a trade in the list to open a chart.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.FinalSystemResults.SystemResults">
            <summary>
            The system results object.
            </summary>
        </member>
        <member name="P:RightEdge.Common.FinalSystemResults.SystemData">
            <summary>
            The SystemData object from the simulation run.
            </summary>
        </member>
        <member name="P:RightEdge.Common.FinalSystemResults.SystemRunSettings">
            <summary>
            The settings that were used to run the simulation.
            </summary>
        </member>
        <member name="P:RightEdge.Common.FinalSystemResults.RiskResults">
            <summary>
            The results from the enabled risk assessment plugins.
            </summary>
        </member>
        <member name="P:RightEdge.Common.FinalSystemResults.InputSymbols">
            <summary>
            The symbols that were used as data sources for the system run.
            </summary>
        </member>
        <member name="P:RightEdge.Common.FinalSystemResults.RunLength">
            <summary>
            The amount of time it took to run the system.
            </summary>
        </member>
        <member name="T:RightEdge.Common.FinalSystemResults.ShowChartDelegate">
            <summary>
            A delegate which can be used to display a chart for a symbol.
            </summary>
            <param name="symbol">The symbol to display a chart for.</param>
            <param name="dateTime">The date/time to scroll the chart to.  Use DateTime.MaxValue to show the end of the chart.</param>
        </member>
        <member name="T:RightEdge.Common.ForexInterestCalculator">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ForexInterestCalculator.#ctor(RightEdge.Common.IAccountInfo)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ForexInterestCalculator.UpdateTime(System.DateTime)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.ForexInterestCalculator.CalcInterest(System.Double,RightEdge.Common.Symbol,System.Int64,System.Double,System.String@)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.ForexInterestCalculator.LastInterestApplied">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Frequency">
            <summary>
            This is the class that will be used from within a system.
            This class is specific to a single symbol.  The IFrequencyGenerator may generate bars/ticks for more than one symbol
            </summary>
        </member>
        <member name="M:RightEdge.Common.Frequency.LookupEndDate(System.DateTime)">
            <summary>
            Returns the index bar with the specified end date, or the bar that
            contains the specified date
            </summary>
            <param name="barEndDate">Specified end date.</param>
            <returns>Index of located bar, otherwise -1 if the bar for that end date was not found.</returns>
        </member>
        <member name="E:RightEdge.Common.Frequency.NewTick">
            <summary>
            Event handler for new ticks.
            </summary>
        </member>
        <member name="E:RightEdge.Common.Frequency.NewBar">
            <summary>
            Event handler for new bars.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:RightEdge.Common.Frequency.Bars" -->
        <member name="P:RightEdge.Common.Frequency.Symbol">
            <summary>
            Gets the <see cref="T:RightEdge.Common.Symbol" /> object associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Frequency.FrequencySettings">
            <summary>
            Gets the <see cref="T:RightEdge.Common.FrequencyPlugin" /> settings associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Frequency.Open">
            <summary>
            The series of bar open values for the current symbol and frequency.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Frequency.High">
            <summary>
            The series of bar high values for the current symbol and frequency.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Frequency.Low">
            <summary>
            The series of bar low values for the current symbol and frequency.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Frequency.Close">
            <summary>
            The series of bar close values for the current symbol and frequency.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Frequency.Volume">
            <summary>
            The series of bar volume values for the current symbol and frequency.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Frequency.Ask">
            <summary>
            The series of bar ask values for the current symbol and frequency.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Frequency.Bid">
            <summary>
            The series of bar bid values for the current symbol and frequency.
            </summary>
        </member>
        <member name="T:RightEdge.Common.FrequencyManager">
            <summary>
            Handles one or more frequencies for a trading system.
            </summary>
            <remarks>
            FrequencyManager is the "traffic cop" for bar generation.  Each frequency is constructed
            and registered with the FrequencyManager.  FrequencyManager dictates when a bar is constructed
            and propagates NewBar events during the ProcessBar method.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.FrequencyManager.RegisterFrequencies(RightEdge.Common.FrequencyPlugin)">
            <summary>
            Registers a frequency with the FrequencyManager.
            </summary>
            <param name="settings">FrequencyPlugin settings</param>
            <remarks>
            This is a utility function which calls GetFrequency for each
            <see cref="T:RightEdge.Common.Symbol" /> object with the specified FrequencyPlugin settings.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.FrequencyManager.GetFrequency(RightEdge.Common.Symbol,RightEdge.Common.FrequencyPlugin)">
            <summary>
            Gets a <see cref="T:RightEdge.Common.Frequency" /> instance for this symbol.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.Symbol" /> instance.</param>
            <param name="settings">FrequenclyPlugin settings for this instance.</param>
            <returns>A Frequency object based on the Symbol and frequency plugin settings.</returns>
        </member>
        <member name="M:RightEdge.Common.FrequencyManager.ConvertLookBack(System.Int32,RightEdge.Common.Frequency,RightEdge.Common.Frequency)">
            <summary>
            Converts the lookback index from one frequency to another.
            </summary>
            <param name="sourceLookBack">Lookback index.</param>
            <param name="sourceFrequency">Source frequency</param>
            <param name="destFrequency">Destination frequency.</param>
            <returns>index of destination frequency bar lookback</returns>
        </member>
        <member name="M:RightEdge.Common.FrequencyManager.ProcessBar(RightEdge.Common.SingleBarEventArgs)">
            <summary>
            Bar processing loop
            </summary>
            <param name="newBar">Bar information for processing.</param>
        </member>
        <member name="M:RightEdge.Common.FrequencyManager.ProcessTick(RightEdge.Common.Symbol,RightEdge.Common.TickData)">
            <summary>
            Tick processor
            </summary>
            <param name="symbol">Symbol object that belongs to this tick.</param>
            <param name="tick">Incoming tick data to process.</param>
        </member>
        <member name="P:RightEdge.Common.FrequencyManager.MainFrequency">
            <summary>
            Gets the main, or system default frequency associated with this instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.FrequencyManager.UsingMultipleFrequencies">
            <summary>
            Gets whether or not the system is using more than one frequency.
            </summary>
        </member>
        <member name="T:RightEdge.Common.FrequencyManager.FreqKey">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.QuoteType">
            <summary>
            Specifies whether the bid or ask should be returned when requesting a quote.
            </summary>
        </member>
        <member name="F:RightEdge.Common.QuoteType.Bid">
            <summary>
            The bid value.  For interest rates, the rate paid on positive balances for a currency.
            </summary>
        </member>
        <member name="F:RightEdge.Common.QuoteType.Ask">
            <summary>
            The ask value.  For Interest rates, the rate charged on loans for a currency.
            </summary>
        </member>
        <member name="F:RightEdge.Common.QuoteType.Last">
            <summary>
            The price of the last trade.  When working with bars this may also be the close value of the bar.
            </summary>
        </member>
        <member name="T:RightEdge.Common.Price">
            <summary>
            Stores the price at which a trade took place, in the native currency of the symbol, and converted to the account currency.
            </summary>
        </member>
        <member name="M:RightEdge.Common.Price.#ctor">
            <summary>
            Price class constructor.
            </summary>
        </member>
        <member name="M:RightEdge.Common.Price.#ctor(System.Double,System.Double)">
            <summary>
            Price class constructor.
            </summary>
            <param name="symbolPrice">The symbol price.  See <see cref="P:RightEdge.Common.Price.SymbolPrice" />.</param>
            <param name="accountPrice">The account price.  See <see cref="P:RightEdge.Common.Price.AccountPrice" />.</param>
        </member>
        <member name="M:RightEdge.Common.Price.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Price.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Price.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private constructor used for deserialization
            </summary>
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Price.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Price.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Price.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.Price.AccountPrice">
            <summary>
            The price of the trade converted to the account currency, using the current exchange rate at the time the trade took place.
            </summary>
            <remarks>If the symbol currency is the same as the account currency, then this value should be the same as the <see cref="P:RightEdge.Common.Price.SymbolPrice" />.</remarks>
        </member>
        <member name="P:RightEdge.Common.Price.SymbolPrice">
            <summary>
            The price of the trade in the symbol's native currency.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IAccountInfo">
            <summary>
            An interface which provides access to account information.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IAccountInfo.SubjectToCurrencyRisk(RightEdge.Common.Symbol)">
            <summary>
            Indicates how profit should be calculated for positions for a given symbol.
            </summary>
            <param name="symbol">A symbol</param>
            <returns>Whether positions for the symbol should be subject to currency risk.  If true, the profit
            should be (priceAtExit * exchangeRateAtExit) - (priceAtEntry * exchangeRateAtEntry).  If false, the
            profit should be (priceAtExit - priceAtEntry) * exchangeRateAtExit.</returns>
        </member>
        <member name="M:RightEdge.Common.IAccountInfo.GetInterestRate(RightEdge.Common.CurrencyType,RightEdge.Common.QuoteType)">
            <summary>
            Gets the interest rate for a specified currency.
            </summary>
            <param name="currency">A currency to retrieve the interest rate for.</param>
            <param name="type">Specifies whether the bid or ask value of the interest rate should be retrieved.</param>
            <returns>The interest rate for the specified currency, or failure information if not available.</returns>
        </member>
        <member name="M:RightEdge.Common.IAccountInfo.GetConversionRate(RightEdge.Common.CurrencyType,RightEdge.Common.CurrencyType,RightEdge.Common.QuoteType)">
            <summary>
            Gets the conversion rate from one currency to another.
            </summary>
            <param name="source">The source currency</param>
            <param name="dest">The destination currency</param>
            <param name="type">The quote type</param>
            <returns>The current rate at which the source currency can be converted to the destination currency.</returns>
        </member>
        <member name="P:RightEdge.Common.IAccountInfo.AccountCurrency">
            <summary>
            The currency type of the acount
            </summary>
        </member>
        <member name="P:RightEdge.Common.IAccountInfo.AppliesForexInterest">
            <summary>
            Indicates whether the account charges and pays interest on open forex positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IAccountInfo.ForexRolloverTime">
            <summary>
            The time of day at which forex positions are rolled over and interest is charged.
            </summary>
        </member>
        <member name="T:RightEdge.Common.Internal.AccountInfoProvider">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.AccountInfoProvider.#ctor(System.Collections.Generic.IDictionary{RightEdge.Common.Symbol,RightEdge.Common.RList{RightEdge.Common.BarData}},System.Collections.Generic.IDictionary{RightEdge.Common.Symbol,RightEdge.Common.RList{RightEdge.Common.BarData}},System.Collections.Generic.IDictionary{RightEdge.Common.Symbol,System.Double})">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.AccountInfoProvider.GetInterestRate(RightEdge.Common.CurrencyType,RightEdge.Common.QuoteType,System.DateTime)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.AccountInfoProvider.GetConversionRate(RightEdge.Common.CurrencyType,RightEdge.Common.CurrencyType,RightEdge.Common.QuoteType,System.DateTime)">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IDataAccessor`1">
            <summary>
            Data access interface used for tick and bar retrieval.
            </summary>
            <typeparam name="T">The record type for this data accessor.  Should be either <see cref="T:RightEdge.Common.BarData" /> or <see cref="T:RightEdge.Common.TickData" />.</typeparam>
            <remarks>
            While this is a generic interface, RightEdge currently uses this class to load
            tick and bar data.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IDataAccessor`1.Load(System.DateTime,System.DateTime,System.Int64,System.Boolean)">
            <summary>
            Loads data from the data store.  A time frame and/or number of items to load can be specified.
            </summary>
            <param name="start">The date of the first data item to load.</param>
            <param name="end">The date of the last data item to load.</param>
            <param name="maxItems">The maximum number of items to load from the store.</param>
            <param name="loadFromEnd">Controls whether the items returned should come from the beginning or the end
            of the specified date range (if there are more items in the date range than specified by the <paramref name="maxItems" /> parameter).</param>
            <returns>A collection of data items.</returns>
            <remarks>If you don't want to specify a specific start date, use <see cref="F:System.DateTime.MinValue" /> for the
            <paramref name="start" /> parameter.  Likewise, use <see cref="F:System.DateTime.MaxValue" /> for the
            <paramref name="end" /> parameter if you don't want to specify an end date.
            For example, to load the last 1000 items in the data store
            specify the 1000 for the <paramref name="maxItems" /> parameter and true for the <paramref name="loadFromEnd" /> parameter.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IDataAccessor`1.GetCount(System.DateTime,System.DateTime)">
            <summary>
            Gets the number of items available in the store in a given date range.
            </summary>
            <param name="start">The start of the date range.</param>
            <param name="end">The end of the date range.</param>
            <returns>The number of items found in the data store in the specified date range.</returns>
        </member>
        <member name="M:RightEdge.Common.IDataAccessor`1.Save(System.Collections.Generic.IList{`0})">
            <summary>
            Saves a list of items to the store.
            </summary>
            <param name="items">The items to save.</param>
            <returns>The number of items saved to the store.</returns>
        </member>
        <member name="M:RightEdge.Common.IDataAccessor`1.Delete(System.DateTime,System.DateTime)">
            <summary>
            Deletes items from the store for the specified date range.
            </summary>
            <param name="start">The date of the first item to delete in the store.</param>
            <param name="end">The end of the last item to delete in the store.</param>
            <returns>The number of items deleted from the data store.</returns>
        </member>
        <member name="M:RightEdge.Common.IDataAccessor`1.GetDateTimeAtIndex(System.Int64,System.Int64@)">
            <summary>
            Retrieves the DateTime value of the item at the specified index.
            </summary>
            <param name="index">item's index</param>
            <param name="numSameDatePreceding">Number of items in the store with the same date preceeding this item.</param>
            <returns>DateTime of the located element, otherwise DateTime.MinValue if the element was not located.</returns>
        </member>
        <member name="T:RightEdge.Common.IDataStore">
            <summary>
            Data storage plugin interface.
            </summary>
            <remarks>
            Implement this interface to create a data storage plugin.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IDataStore.GetBarStorage(RightEdge.Common.SymbolFreq)">
            <summary>
            Retrieves a data accessor for bar data.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.SymbolFreq" /> instance specifying the symbol and the frequency.</param>
            <returns>IDataAccessor instance for bar data</returns>
        </member>
        <member name="M:RightEdge.Common.IDataStore.GetTickStorage(RightEdge.Common.Symbol)">
            <summary>
            Retrieves a data accessor for tick data.
            </summary>
            <param name="symbol"><see cref="T:RightEdge.Common.Symbol" /> instance.</param>
            <returns>IDataAccessor instance for tick data.</returns>
        </member>
        <member name="M:RightEdge.Common.IDataStore.FlushAll">
            <summary>
            Informs all stores to persist unsaved changes to their respective storage.
            </summary>
        </member>
        <member name="T:RightEdge.Common.OldDataStoreWrapper">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.WrappedClassTypeConverter">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.WrappedClassEditor">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IndicatorInfo">
            <summary>
            Stores indicator settings, such as inputs, constructor arguments, color, etc.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorInfo.#ctor">
            <summary>
            Constructor, parameterless.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorInfo.CreateSeriesInputs(System.Collections.Generic.List{RightEdge.Common.SeriesInputAttribute})">
            <summary>
            Builds the SeriesInput collection
            </summary>
            <param name="attributes">a list of <see cref="T:RightEdge.Common.SeriesInputAttribute" /> items to build each SeriesInputValue item</param>
        </member>
        <member name="M:RightEdge.Common.IndicatorInfo.CloneInfo">
            <summary>
            Builds a clone of this instance including all child lists.
            </summary>
            <returns>IndicatorInfo instance.</returns>
        </member>
        <member name="M:RightEdge.Common.IndicatorInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <remarks>This performs a "deep" copy where the underlying collections are also copied.</remarks>
        </member>
        <member name="M:RightEdge.Common.IndicatorInfo.GetCircularDependency(System.Collections.Generic.IList{RightEdge.Common.IndicatorInfo})">
            <summary>
            Processes the list of indicators to make sure there are no circular dependencies.
            </summary>
            <param name="indicators">List of indicators.</param>
            <returns>null if no indicators are circular dependent, otherwise the series name of the circular dependency.</returns>
            <remarks>
            Call this method to ensure that no indicators are circularly dependent.  This could
            cause an infinite loop otherwise.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IndicatorInfo.GetCircularDependency(System.String,System.Collections.Generic.IList{RightEdge.Common.IndicatorInfo})">
            <summary>
            Processes the list of indicators to make sure there are no circular dependencies.
            </summary>
            <param name="indicatorName">Indicator to process</param>
            <param name="indicators">List of indicators.</param>
            <returns>null if no indicators are circular dependent, otherwise the series name of the circular dependency.</returns>
            <remarks>
            Call this method to ensure that no indicators are circularly dependent.  This could
            cause an infinite loop otherwise.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.IndicatorInfo.GetCircularDependency(System.String,System.Collections.Generic.IList{RightEdge.Common.IndicatorInfo},System.Collections.Generic.List{System.String})">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.SeriesName">
            <summary>
            A unique name used to identify the indicator
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.IndicatorId">
            <summary>
            A unique identifier given to this indicator.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.ConstructorArguments">
            <summary>
            Gets or sets the List of ConstructorArguments needed to build this indicator.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.SeriesInputs">
            <summary>
            Gets or sets the List of SeriesInputValue instances to build this indicator.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.ShowInChart">
            <summary>
            Specifies whether an indicator that is part of a system will be plotted on the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.LineType">
            <summary>
            Specifies what type of line will be used to draw the indicator.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.ChartPane">
            <summary>
            Specifies the pane that this indicator will be plotted on.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.ChartName">
            <summary>
            Specifies the pane that this indicator will be plotted on.
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.LineColor">
            <summary>
            Specifies what color will be used to draw the indicator
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.XmlLineColor">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.LineSize">
            <summary>
            Specifies the thickness of the line used to draw the indicator
            </summary>
        </member>
        <member name="P:RightEdge.Common.IndicatorInfo.Attribute">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IndicatorInfo.ChangeEventArgs">
            <summary>
            Notification of change events for an indicator
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorInfo.ChangeEventArgs.#ctor(System.String,RightEdge.Common.IndicatorInfo)">
            <summary>
            Constructor
            </summary>
            <param name="oldName">Old name of indicator value.</param>
            <param name="newValue">New indicator information.</param>
        </member>
        <member name="F:RightEdge.Common.IndicatorInfo.ChangeEventArgs.OldName">
            <summary>
            Old name property
            </summary>
        </member>
        <member name="F:RightEdge.Common.IndicatorInfo.ChangeEventArgs.NewValue">
            <summary>
            New IndicatorInfo values.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IndicatorInfo.ChangeDelegate">
            <summary>
            Delegate used to communicate a change event for indicators
            </summary>
            <param name="sender">event's sender</param>
            <param name="args">IndicatorInfo.ChangeEventsArgs containing the changed information.</param>
        </member>
        <member name="T:RightEdge.Common.IndicatorInfoTypeDescriptor">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IndicatorNameDescriptor">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IndicatorStuffDescriptor">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IndicatorArgumentDescriptor">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.EnumConstructorArgTypeConverter">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IndicatorInputDescriptor">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.IndicatorInputConverter">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Internal.ServiceConnectionState">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Internal.ServiceType">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Internal.ConnectionEventArgs">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SectionStats">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SectionStackEntry">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Profiler">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Profile">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Internal.REWriter">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Internal.TraceHelper">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.TraceHelper.DumpExceptionToTrace(System.Exception)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.TraceHelper.ExceptionToString(System.Exception,System.String@)">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SystemProgressUpdate">
            <summary>
            Delegate used for reporting the progress of the system simulation run.
            </summary>
            <param name="currentItem">The number of bars or ticks which have been processed.</param>
            <param name="totalItems">The total number of bars or ticks which need to be processed.</param>
            <param name="currentTime">The date/time of the current bar or tick being processed.</param>
        </member>
        <member name="T:RightEdge.Common.OptimizationPlugin">
            <summary>
            Base class for optimization plugins.
            </summary>
            <remarks>
            <para>Optimization plugins generally run a trading system with different system parameter values
            in order to find a set of values which give the best results according to some measurement
            (for example, the best combination of high profit and low risk).  To do this, they can
            programmatically set the system parameters and most other system settings, run a simulation,
            and get the results.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.RunOptimization(RightEdge.Common.SystemRunSettings)">
            <summary>
            This is the main method of an optimization plugin which should contain the logic
            to determine what parameters should be used and call the <see cref="M:RightEdge.Common.OptimizationPlugin.RunSystem(RightEdge.Common.SystemRunSettings,RightEdge.Common.SystemProgressUpdate)" />
            method to run the system with a given set of parameters and get the result back.
            </summary>
            <param name="runSettings">The settings which control the simulation.  These can be modified before being passed to the <see cref="M:RightEdge.Common.OptimizationPlugin.RunSystem(RightEdge.Common.SystemRunSettings,RightEdge.Common.SystemProgressUpdate)" /> method.</param>
            <returns>A list of optimization results which will be displayed in the optimization result screen.</returns>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.ShowOptimizationSettings(RightEdge.Common.SystemRunSettings,System.Windows.Forms.IWin32Window)">
            <summary>
            Called to display a dialog to allow the user to adjust optimization settings before an optimization is run.
            </summary>
            <param name="runSettings">The system settings.</param>
            <param name="owner">The window which should be used as the owner for the dialog.</param>
            <returns>True to continue, or false to cancel the optimization.</returns>
            <remarks>
            <para>The default implementation of this method shows a dialog where the user can modify the optimization
            parameter high and low values, and number of steps for each parameter.  It can be overridden to display a
            custom dialog or bypass the dialog altogether.</para>
            <para>If RightEdge is run with the /O:optimizationfile command-line option, this method will not be called,
            and <see cref="M:RightEdge.Common.OptimizationPlugin.LoadOptimizationSettingsFromFile(RightEdge.Common.SystemRunSettings,System.String)" /> will be called instead.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.LoadOptimizationSettingsFromFile(RightEdge.Common.SystemRunSettings,System.String)">
            <summary>
            Called to load optimization settings from a file.
            </summary>
            <param name="runSettings">The system settings.</param>
            <param name="filename">The file to load optimization settings from.</param>
            <remarks>This method will be called instead of <see cref="M:RightEdge.Common.OptimizationPlugin.ShowOptimizationSettings(RightEdge.Common.SystemRunSettings,System.Windows.Forms.IWin32Window)" /> if RightEdge is
            run with the /O:optimizationfile command-line option.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.CreateProgressWindow(System.Action)">
            <summary>
            Called to create the progress window which will be shown while the optimization is running.
            </summary>
            <param name="cancelCallback">A delegate that the progress window should call to cancel the optimization (ie if the user clicks the cancel button).</param>
            <returns>A <see cref="T:System.Windows.Forms.Form" /> to display progress.</returns>
            <remarks>
            <para>You can override this method if you want to use your own optimization progress window.
            If you don't, the default optimization progress window will be used.  The form you return should 
            implement the <see cref="T:RightEdge.Common.IOptimizationProgressUpdate" /> interface if you plan to call the
            <see cref="M:RightEdge.Common.OptimizationPlugin.UpdateProgress(System.Collections.Generic.List{RightEdge.Common.OptimizationPlugin.ProgressItem})" /> method at all.</para>
            <para>Note that the <see cref="M:RightEdge.Common.OptimizationPlugin.RunOptimization(RightEdge.Common.SystemRunSettings)" /> method will not be called on the UI thread, so if you
            want to communicate directly with a custom progress window from that method you will need to marshal the
            calls onto the UI thread (with the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> or
            <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" /> methods).</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.UpdateProgress(System.String,System.Double,System.String,System.Double)">
            <summary>
            Updates the progress displayed in the optimization progress window (if it implements <see cref="T:RightEdge.Common.IOptimizationProgressUpdate" />).
            </summary>
            <param name="overallText">The text to display for the overall progress of the optimization.  If null, the text will be left unchanged.</param>
            <param name="overallProgress">The overall optimization progress to display in the progress bar.  This value should be between 0 and 1.0</param>
            <param name="currentRunText">The text to display for the progress of the current optimization run.  If null, the text will be left unchanged.</param>
            <param name="currentRunProgress">The optimization progress for this run to display in the progress bar.  This value should be between 0 and 1.0</param>
            <remarks>An exception will be thrown if you call this method and you overrode the <see cref="M:RightEdge.Common.OptimizationPlugin.CreateProgressWindow(System.Action)" /> method and returned an object
            that does not implement <see cref="T:RightEdge.Common.IOptimizationProgressUpdate" />.</remarks>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.UpdateProgress(System.Collections.Generic.List{RightEdge.Common.OptimizationPlugin.ProgressItem})">
            <summary>
            Updates the progress displayed in the optimization progress window.
            </summary>
            <param name="progressItems">A list of progress items to display.  Each item will be displayed as a progress bar and a label on the progress window.</param>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.RunSystem(RightEdge.Common.SystemRunSettings,RightEdge.Common.SystemProgressUpdate)">
            <summary>
            Runs the trading system with the specified settings.
            </summary>
            <param name="runSettings">The settings to use when running the system.</param>
            <param name="progressCallback">A delegate which will be called to report progress as the system is running.</param>
            <returns>The results of running the system.</returns>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.CancelOptimization">
            <summary>
            Called to cancel the optimization (for example when the cancel button is clicked).  The default implementation aborts
            the optimization thread, so if your optimization plugin is using multiple threads, you should implement this method yourself
            (and not call the base class version).
            </summary>
        </member>
        <member name="P:RightEdge.Common.OptimizationPlugin.OptimizationParameters">
            <summary>
            The list of system parameters for the system.
            </summary>
        </member>
        <member name="T:RightEdge.Common.OptimizationPlugin.ProgressItem">
            <summary>
            Represents the progress and text corresponding to a progress bar in the optimization progress window.
            </summary>
        </member>
        <member name="M:RightEdge.Common.OptimizationPlugin.ProgressItem.#ctor(System.String,System.Double)">
            <summary>
            Creates a new <see cref="T:RightEdge.Common.OptimizationPlugin.ProgressItem" /> object.
            </summary>
            <param name="text">The text to display above the progress bar.</param>
            <param name="progress">The progress to show in the progress bar (from 0 to 1.0).</param>
        </member>
        <member name="P:RightEdge.Common.OptimizationPlugin.ProgressItem.Text">
            <summary>
            The text to display above the progress bar.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OptimizationPlugin.ProgressItem.Progress">
            <summary>
            The progress to show in the progress bar (from 0 to 1.0).
            </summary>
        </member>
        <member name="T:RightEdge.Common.IOptimizationProgressUpdate">
            <summary>
            Provides a method for updating the progress that is displayed in an optimization progress window.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IOptimizationProgressUpdate.UpdateProgress(System.Collections.Generic.List{RightEdge.Common.OptimizationPlugin.ProgressItem})">
            <summary>
            Updates the progress displayed in the optimization progress window.
            </summary>
            <param name="progressItems">A list of progress items to display.  Each item will be displayed as a progress bar and a label on the progress window.</param>
        </member>
        <member name="T:RightEdge.Common.ISystemResultPlugin">
            <summary>
            Root interface for creating a System Result plugin.
            </summary>
            <remarks>
            <para>System Result plugins allow a plugin developer to hook into the system results and
            display the user interface of their choosing.  If the end user decides
            to enable the System result plugin, RightEdge will create a new tab
            within the Trading System Results tab and instantiate this plugin.</para>
            <para>A class that implements this interface should be marked with a
            <see cref="T:RightEdge.Common.SystemResultsAttribute" /> to provide metadata such as the
            name and description, a unique ID, etc.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.ISystemResultPlugin.HasCustomSettings">
            <summary>
            Returns whether the plugin has custom settings.
            </summary>
            <returns>True if the plugin has custom settings, false otherwise.</returns>
            <remarks>If the plugin has custom settings, then it should show a dialog allowing the user to
            modify them when <see cref="M:RightEdge.Common.ISystemResultPlugin.ShowCustomSettingsForm(RightEdge.Common.SerializableDictionary{System.String,System.String}@)" /> is called.</remarks>
        </member>
        <member name="M:RightEdge.Common.ISystemResultPlugin.ShowCustomSettingsForm(RightEdge.Common.SerializableDictionary{System.String,System.String}@)">
            <summary>
            Shows a dialog allowing custom plugin settings to be modified.
            </summary>
            <param name="settings">Dictionary containing existing settings.  This dictionary may be empty if the service has not previously been set up.</param>
            <returns>True if settings were modified, false if the user canceled or the plugin does not use custom settings.</returns>
        </member>
        <member name="M:RightEdge.Common.ISystemResultPlugin.CreateResultsControl(RightEdge.Common.FinalSystemResults,RightEdge.Common.SerializableDictionary{System.String,System.String})">
            <summary>
            Function called to display results.
            </summary>
            <param name="finalResults">The trading system results and relevant settings.</param>
            <param name="settings">The settings configured for this plugin, if applicable.</param>
            <remarks>
            Once the trading system has completed and before the Trading System
            Results are displayed, the plugin will receive a copy of the complete
            SystemResults instance from the trading system.  This contains all parameters
            of the system including the system results and risk assessment calculations.
            </remarks>
            <returns>
            An instantiated Control object.
            </returns>
        </member>
        <member name="T:Infralution.Licensing.AuthenticatedLicenseStatus">
            <summary>
            The status of an <see cref="T:Infralution.Licensing.AuthenticatedLicense" /> once it has been validated by calling 
            <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.AuthenticatedLicense)" /> 
            </summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseStatus.Unvalidated">
            <summary>
            The license has not been validated yet
            </summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseStatus.Unauthenticated">
            <summary>
            The license has not been authenticated
            </summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseStatus.Valid">
            <summary>
            The license is valid
            </summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseStatus.InvalidComputer">
            <summary>
            The license is not valid for this computer
            </summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseStatus.InvalidProduct">
            <summary>
            The license key is not for this product
            </summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseStatus.InvalidKey">
            <summary>
            The license key does not match the license key parameters
            </summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseStatus.InvalidSignature">
            <summary>
            The license contents do not match the signature, indicating possible tampering
            </summary>
        </member>
        <member name="T:Infralution.Licensing.AuthenticatedLicense">
            <summary>
            Defines an authenticated license for an application or component generated using the Infralution
            Licensing System.
            </summary>
            <remarks>
            </remarks>
            <seealso cref="T:Infralution.Licensing.AuthenticatedLicenseProvider" />
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicense.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create a new Infralution Authenticated License
            </summary>
            <param name="productName">The name of the product the license is for (MUST match the license parameters)</param>
            <param name="encryptedLicenseKey">The encrypted license key</param>
            <param name="computerID">The ID of the computer (if any) that the license is locked to</param>
            <param name="signature">The public key signature for the license</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicense.Dispose">
            <summary>
            Cleans up any resources held by the license
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicense.Validate(Infralution.Licensing.EncryptedLicense,Infralution.Licensing.AuthenticatedLicenseStatus)">
            <summary>
            Validate the license and set the encrypted license
            </summary>
            <param name="encryptedLicense">The encrypted license</param>
            <param name="status">The status of the license</param>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.Status">
            <summary>
            The validation status of this license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.Signed">
            <summary>
            Has the license been signed
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.LicenseKey">
            <summary>
            Returns the encrypted license key 
            </summary>
            <remarks>
            Note that this is NOT the authentication key
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.EncryptedLicense">
            <summary>
            Set/Get the underlying encrypted license (once the license has been validated)
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.ProductInfo">
            <summary>
            The product data associated with the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.SerialNo">
            <summary>
            The unique serial no for the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.ComputerID">
            <summary>
            The ID of the computer that this license is for
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.ProductName">
            <summary>
            The name of the product this license is for
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicense.Signature">
            <summary>
            The Public Key Signature for the license
            </summary>
        </member>
        <member name="T:Infralution.Licensing.AuthenticatedLicenseInstallForm">
            <summary>
            Provides a basic form for installing Infralution Authenticated Licenses that can be extended or modified using 
            visual inheritance
            </summary>
            <seealso cref="T:Infralution.Licensing.AuthenticatedLicenseProvider" />
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.buttonPanel">
            <summary>The panel containing the action buttons</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.closeButton">
            <summary>The Close Button</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.saveButton">
            <summary>Button to save the license to file</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.loadButton">
            <summary>Button to save the license from file</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.uninstallButton">
            <summary>Uninstall the currently installed license</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.installButton">
            <summary>Button to authenticate a key</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.messageLabel">
            <summary>Displays the main message of the form</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.authenticationKeyLabel">
            <summary>Displays text to the left of the LicenseKey entry box</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.authenticationKeyText">
            <summary>Allows the user to enter a license key for the product</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.licenseStatusText">
            <summary>Displays the currently installed license key</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.licenseStatusLabel">
            <summary>Displays text to the left of the installed license key text box</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.computerText">
            <summary>Displays the current computer ID</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.computerLabel">
            <summary>Displays the text to the left of the current computer ID</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.authenticationTimer">
            <summary>Timer used to update the screen while authenticating</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.authenticationWorker">
            <summary>Background worker use to authenticate keys</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.components">
            <summary>Required by designer</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm._productName">
            <summary>The name of the product being licensed</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm._license">
            <summary>The license installed by the form (if any)</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm._licenseProvider">
            <summary>The license provider to use to install the license</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm._licenseType">
            <summary>The type being licensed (if any)</summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseInstallForm._licenseFile">
            <summary>The license file to use (if not licensing a type)</summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.#ctor">
            <summary>
            Initialize a new instance of the form
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.ShowDialog(System.String,System.Type,Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Display the form for licensing a component or control
            </summary>
            <param name="productName">The name of the product being licensed</param>
            <param name="typeToLicense">The type of the component being licensed</param>
            <param name="installedLicense">The currently installed license (if any)</param>
            <returns>The installed license (if any)</returns>
            <remarks>
            Use this method to display the dialog to install a license for a component or control type
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.ShowDialog(System.String,Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Display the form for licensing an application
            </summary>
            <param name="licenseFile">The name of the license file</param>
            <param name="installedLicense">The currently installed license (if any)</param>
            <returns>The installed license (if any)</returns>
            <remarks>
            Use this method to display the dialog to install a license for an application
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.ShowDialog(System.String,System.String,Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Display the form for licensing an application
            </summary>
            <param name="productName">The name of the product being licensed</param>
            <param name="licenseFile">The name of the license file</param>
            <param name="installedLicense">The currently installed license (if any)</param>
            <returns>The installed license (if any)</returns>
            <remarks>
            Use this method to display the dialog to install a license for an application
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnLoad(System.EventArgs)">
            <summary>
            Initialize the form data
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.GetLicenseProvider">
            <summary>
            Return the license provider to use
            </summary>
            <returns>The license provider to use for installing licensing</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnAuthenticateKey(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Authenticate the key on a background thread so we can update the form
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnAuthenticateKeyComplete(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Handle completion of the AuthenticateKey operation
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnAuthenticationTimerTick(System.Object,System.EventArgs)">
            <summary>
            Update the license status while authenticating
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.SaveLicense(Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Save the given license to file
            </summary>
            <param name="license">The license to save</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.InstallLicense(System.String)">
            <summary>
            Install the license using the authentication key entered by the user
            </summary>
            <param name="authenticationKey">The authentication key to install</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.UpdateLicenseInfo">
            <summary>
            Update the information display for the current license
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnAuthenticationKeyTextChanged(System.Object,System.EventArgs)">
            <summary>
            Enable the install button when text is entered in the text box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnInstallButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the <see cref="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.installButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnSaveButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the <see cref="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.saveButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnLoadButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the <see cref="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.loadButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnUninstallButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the <see cref="F:Infralution.Licensing.AuthenticatedLicenseInstallForm.uninstallButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseInstallForm.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Prevent the form closing while there is a pending authentication
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseInstallForm.LicenseProvider">
            <summary>
            The license provider to use to install the license
            </summary>
            <remarks>
            This allows you to set a license provider other than the default 
            (<see cref="T:Infralution.Licensing.AuthenticatedLicenseProvider" />).
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseInstallForm.ProductName">
            <summary>
            The name of the product to license
            </summary>
            <remarks>The default product name is taken from the application assembly info</remarks>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseInstallForm.TypeToLicense">
            <summary>
            The type of the component/control being licensed (if any)
            </summary>
            <remarks>
            Set this if you are licensing a component or control.  If you are licensing an
            application set the <see cref="P:Infralution.Licensing.AuthenticatedLicenseInstallForm.LicenseFile" /> property instead.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseInstallForm.LicenseFile">
            <summary>
            The name of the license file to use when licensing an application
            </summary>
            <remarks>
            Set this if you are licensing an application.  If you are licensing a component
            or control then you should set the <see cref="P:Infralution.Licensing.AuthenticatedLicenseInstallForm.TypeToLicense" /> property instead.
            </remarks>
            <seealso cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.AuthenticatedLicense)" />
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseInstallForm.InstalledLicense">
            <summary>
            The installed license (if any)
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseInstallForm.AllowMultilineKeys">
            <summary>
            Should the license key value accept multiple lines
            </summary>
            <remarks>
            Set this to true if you want to allow multiline keys to be able to be pasted
            into the key field
            </remarks>
        </member>
        <member name="T:Infralution.Licensing.AuthenticatedLicenseParameters">
            <summary>
            The parameters used to generate and validate <see cref="T:Infralution.Licensing.AuthenticatedLicense">AuthenticatedLicenses</see>
            using an <see cref="T:Infralution.Licensing.AuthenticatedLicenseProvider" />.
            </summary>
            <seealso cref="T:Infralution.Licensing.AuthenticatedLicenseProvider" />
        </member>
        <member name="T:Infralution.Licensing.EncryptedLicenseParameters">
            <summary>
            The parameters used to generate and validate <see cref="T:Infralution.Licensing.EncryptedLicense">EncryptedLicenses</see>
            using an <see cref="T:Infralution.Licensing.EncryptedLicenseProvider" />
            </summary>
            <seealso cref="T:Infralution.Licensing.EncryptedLicenseProvider" />
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseParameters.ReadFromString(System.String)">
            <summary>
            Read the parameters from an XML string
            </summary>
            <param name="xmlParameters"></param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseParameters.WriteToString(System.Boolean)">
            <summary>
            Write the parameters to an XML string
            </summary>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
            <returns>The parameters in a formatted XML string</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseParameters.Read(System.Xml.XmlReader)">
            <summary>
            Read the parameters from an XML Reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseParameters.Write(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the parameters to an XML Writer
            </summary>
            <param name="writer">The XML Writer to write to</param>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.ProductName">
            <summary>
            The name of the product being licensed
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.ProductPassword">
            <summary>
            The password used to encrypt the license data
            </summary>
            <remarks>
            The <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.KeyStrength" /> determines the number of characters of the ProductPassword that are
            actually used in generating keys.   If the ProductPassword is shorter than the <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.KeyStrength" /> then 
            it is padded.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.KeyStrength">
            <summary>
            The strength of the key to generate.   
            </summary>
            <remarks>
            The KeyStrength determines the number of characters of the <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.ProductPassword" /> that are
            actually used in generating keys.    The smaller the KeyStrength the shorter the generated keys.
            If the <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.ProductPassword" /> is shorter than the KeyStrength then it is padded.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.TextEncoding">
            <summary>
            The encoding used to convert the binary key to text
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.ChecksumProductInfo">
            <summary>
            Should a checksum of the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo" /> be included in the key  
            </summary>
            <remarks>
            If true a checksum is included in generated keys to check that the contents of the 
            <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo" /> are valid.  This is only necessary if the 
            ProductInfo is potentially more than 6 characters long.  For ProductInfo of less than 7 
            characters the block encryption algorithm used to encrypt the overall key guarantees the validity
            of the ProductInfo.  
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.ShortSerialNo">
            <summary>
            If true serial numbers must be less than <see cref="F:System.UInt16.MaxValue" />.  
            </summary>
            <remarks>
            Setting this to true enables the generated key to be kept as short as possible.   The default
            value for backward compatibility with previous versions is true.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.MaxSerialNo">
            <summary>
            Return the maximum serial no.
            </summary>
            <remarks>
            This returns the maximum allowed serial no based on the value of the <see cref="P:Infralution.Licensing.EncryptedLicenseParameters.ShortSerialNo" />
            property.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.RSAProvider">
            <summary>
            Return the RSA Provider used to validate RSA signatures
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.DesignSignature">
            <summary>
            The RSA signature for the product password at design time
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseParameters.RuntimeSignature">
            <summary>
            The RSA signature for the product password at runtime
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.Write(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the parameters to the given XML writer
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.Read(System.Xml.XmlReader)">
            <summary>
            Read parameters from the given XML reader
            </summary>
            <param name="reader">The reader to read from</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.ConfigureServerSettings(System.String)">
            <summary>
            Configure the given authentication server settings file with these parameters
            </summary>
            <param name="settingsFile">The path to the server settings file</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.SignText(System.String)">
            <summary>
            Sign the given text using the <see cref="P:Infralution.Licensing.AuthenticatedLicenseParameters.ServerRSAProvider" />
            </summary>
            <param name="text">The text to sign</param>
            <returns>The signature for the text</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.VerifyText(System.String,System.String)">
            <summary>
            Verify that the given text was signed using the <see cref="P:Infralution.Licensing.AuthenticatedLicenseParameters.ServerRSAProvider" />
            </summary>
            <param name="text">The text to verify</param>
            <param name="signature">The RSA signature</param>
            <returns>True if the text was signed with the given signature</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.SignData(System.Byte[])">
            <summary>
            Sign the given data using the <see cref="P:Infralution.Licensing.AuthenticatedLicenseParameters.ServerRSAProvider" />
            </summary>
            <param name="data">The data to sign</param>
            <returns>The signature for the text</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.VerifyData(System.Byte[],System.Byte[])">
            <summary>
            Verify that the given data was signed using the <see cref="P:Infralution.Licensing.AuthenticatedLicenseParameters.ServerRSAProvider" />
            </summary>
            <param name="data">The data to verify</param>
            <param name="signature">The RSA signature</param>
            <returns>True if the text was signed with the given signature</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.Write(System.Xml.XmlWriter,System.Boolean,System.Boolean)">
            <summary>
            Write the parameters to the given XML writer
            </summary>
            <param name="writer">The writer to write to</param>
            <param name="includeAuthenticationParameters">Should parameters required for authenticating keys be included</param>
            <param name="includeGenerationParameters">Should parameters required for generating keys be included</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseParameters.WriteToString(System.Boolean,System.Boolean)">
            <summary>
            Write the parameters to an XML string
            </summary>
            <param name="includeAuthenticationPrivateParameters">Should parameters required to authenticate keys be included</param>
            <param name="includeEncryptedLicensePrivateParameters">Should the private parameters for validating <see cref="T:Infralution.Licensing.EncryptedLicense" /> be included</param>
            <returns>The parameters in a formatted XML string</returns>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseParameters.AuthenticationPassword">
            <summary>
            The password used to encrypt a simple license key to produce an authenticated license key 
            </summary>
            <remarks>
            If this is null then authentication keys are the same as the underlying <see cref="T:Infralution.Licensing.EncryptedLicense" /> 
            keys.  This can be useful if you want to change from using an <see cref="T:Infralution.Licensing.EncryptedLicenseProvider" />
            but don't wish to issue new license keys.  Using a null value does sacrifice the extra level of security
            provided by the authentication password.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseParameters.AuthenticationServerURL">
            <summary>
            The URL of the Authentication Server
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseParameters.MaxAuthentications">
            <summary>
            The maximum number of distinct authentications (on different computers) allowed for a given key
            </summary>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseParameters.ServerRSAProvider">
            <summary>
            The RSA provider used by the server to sign/validate licenses
            </summary>
        </member>
        <member name="T:Infralution.Licensing.AuthenticationsExceededException">
            <summary>
            Thrown by <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.AuthenticateKey(System.String)" /> if the 
            maximum number of allowed authentications has been exceeded
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationsExceededException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationsExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor required for remoting serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Infralution.Licensing.AuthenticatedLicenseProvider">
            <summary>
            Defines a .NET LicenseProvider that authenticates license keys to run on a particular Computer
            by contacting an Authentication Web Service.
            </summary>
            <remarks>
            <para>
            When a user installs an authenticated license key for a product the AuthenticatedLicenseProvider
            contacts the Authentication Web Service.  It validates the license key and returns a signed 
            <see cref="T:Infralution.Licensing.AuthenticatedLicense" /> locked to the users computer.   When the application is run subsequently 
            the AuthenticatedLicenseProvider validates that the installed license matches the users computer and verifies
            the public key signature.   This prevents users modifying or copying licenses files between computers.  The 
            Authentication Web Service can be configured (using the License Tracker application) to limit the number of 
            different computers that a given license key can be used to authenticate.
            </para>
            <para>
            By default the <see cref="P:System.Environment.MachineName" /> (or the <see cref="P:System.Web.HttpRequest.Url" /> host name 
            for ASP.NET applications) is used to identify the computer.   This is generally sufficient to inhibit copying 
            while still providing flexibility to the end user.   They can change hardware and even operating system without 
            invalidating their licenses.  If, however, you wish to lock licenses to other hardware or computer characteristics
            you can do this by overriding the <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetComputerID" /> method.
            </para>
            <para>See <see href="XtraGettingStarted.html">Getting Started</see> for detailed information on using
            the AuthenticatedLicenseProvider to license applications and components.</para>
            </remarks>
            <seealso cref="T:Infralution.Licensing.AuthenticatedLicense" />
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseProvider._salt">
            <summary>
            Salt for generated random bytes from a password
            </summary>
        </member>
        <member name="F:Infralution.Licensing.AuthenticatedLicenseProvider._parameters">
            <summary>
            The current parameters for validating licenses
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)">
            <summary>
            Set the parameters used to validate licenses created by this provider.
            </summary>
            <remarks>
            <para>
            This must be called by the client software prior to obtaining licenses using the AuthenticatedLicenseProvider.
            The XML parameter string is generated using the Infralution License Key Generator and pasted into the calling client code
            or by calling <see cref="M:Infralution.Licensing.AuthenticatedLicenseParameters.WriteToString(System.Boolean,System.Boolean)" />
            </para>
            <para>
            Note that calling this method also sets the <see cref="P:Infralution.Licensing.EncryptedLicenseProvider.Parameters" /> property.
            </para>
            </remarks>
            <param name="licenseParameters">An XML string containing parameters used to validate licenses</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.GenerateKey(Infralution.Licensing.AuthenticatedLicenseParameters,System.String,System.Int32)">
            <summary>
            Generate an authenticated license key
            </summary>
            <param name="parameters">The parameters to use to generate the key</param>
            <param name="productInfo">User defined data to be included in the key</param>
            <param name="serialNo">The unique license serial number</param>
            <returns>An authenticated license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed productPassword is "TEST" and the only allowed serial numbers are 1 or 0. 
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.AuthenticateKeyOnComputer(System.String,System.String)">
            <summary>
            Authenticates the given key on a speficic computer by contacting the AuthenticationServer
            </summary>
            <param name="authenticationKey">The authentication key to validate</param>
            <param name="computerID">The ID of the computer to authenticate the key for</param>
            <returns>An AuthenticatedLicense if the key is valid or null otherwise</returns>
            <remarks>
            The <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  The
            returned license is not Validated for this computer. Callers should handle the possibility
            of a <see cref="T:System.Net.WebException" /> being thrown if the Authentication Server cannot be contacted.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.AuthenticateKey(System.String)">
            <summary>
            Authenticates the given key by contacting the AuthenticationServer
            </summary>
            <param name="authenticationKey">The authentication key to validate</param>
            <returns>An AuthenticatedLicense if the key is valid or null otherwise</returns>
            <remarks>
            The <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method. 
            Callers should handle the possibility of a <see cref="T:System.Net.WebException" /> being 
            thrown if the Authentication Server cannot be contacted.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.AuthenticateKey(System.String,System.String)">
            <summary>
            Authenticates the given key by contacting the AuthenticationServer
            </summary>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="authenticationKey">The authentication key to validate</param>
            <returns>An AuthenticatedLicense if the key is valid or null otherwise</returns>
            <remarks>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> followed by 
            <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.AuthenticateKey(System.String)" />. Callers should handle the possibility
            of a <see cref="T:System.Net.WebException" /> being thrown if the Authentication Server cannot be contacted.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.IsAuthenticated(Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Check with the Authentication Server whether a given license is still authenticated 
            </summary>
            <param name="license">The license to check</param>
            <returns>True if the license is authenticated on this computer</returns>
            <remarks>
            This method provides a mechanism to check with the authentication service whether a
            license remains authenticated for a given computer. The <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> 
            method MUST be called before using this method.  Callers should handle the possibility
            of a <see cref="T:System.Net.WebException" /> being thrown if the Authentication Server cannot be contacted.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.DecryptAuthenticationKey(Infralution.Licensing.AuthenticatedLicenseParameters,System.String)">
            <summary>
            Called by the Authentication Server to decrypt authentication keys
            </summary>
            <param name="parameters">The license parameters</param>
            <param name="authenticationKey">The authentication key</param>
            <returns>The encrypted license</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.SignLicense(Infralution.Licensing.AuthenticatedLicenseParameters,System.String,System.String)">
            <summary>
            Called by the Authentication Server to authenticate a key and sign a new license
            </summary>
            <param name="parameters">The license parameters</param>
            <param name="authenticationKey">The key to authenticate</param>
            <param name="computerID">The computer ID to create the license for</param>
            <returns>A signed AuthenticatedLicense or null if the authenticationKey is invalid</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.AuthenticatedLicense,System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Validate that the given license is legitimate on this computer
            </summary>
            <param name="license">The license to validate</param>
            <param name="context">The license context</param>
            <param name="type">The type the license is associated with</param>
            <returns>The license status</returns>
            <remarks>
            The <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Validate that the given license is legitimate on this computer
            </summary>
            <param name="license">The license to validate</param>
            <returns>The license status</returns>
            <remarks>
            The <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetLicense(System.String,System.Boolean)">
            <summary>
            Return the installed license from the given license file.
            </summary>
            <param name="licenseFile">The name of the license file containing the license</param>
            <param name="validateLicense">
            If true the license is validated and only returned if valid.  Otherwise it is the callers 
            responsibility to call <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.AuthenticatedLicense)" /> to check the license validity.
            </param>
            <returns>The installed license if any</returns>
            <remarks>
            <para>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager" /> methods to load and validate licenses.  If a full path is not specified 
            for licenseFile then the file loaded will be relative to the directory containing the application 
            executable (for Window Forms applications) or aspx files (for ASP.NET applications).
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetLicense(System.String,System.String,System.Boolean)">
            <summary>
            Get a license (if installed) from the given license file.
            </summary>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="licenseFile">The name of the license file containing the license</param>
            <param name="validateLicense">
            If true the license is validated and only returned if valid.  Otherwise it is the callers 
            responsibility to call <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.AuthenticatedLicense)" /> to check the license validity.
            </param>
            <returns>The installed license if any</returns>
            <remarks>
            <para>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager" /> methods to read and validate licenses.  If a full path is not specified 
            for licenseFile then the file loaded will be relative to the directory containing the application 
            executable (for Window Forms applications) or aspx files (for ASP.NET applications).
            </para>
            <para>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> followed by 
            <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetLicense(System.String,System.Boolean)" />.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Get a license (if installed) for the given component/control type 
            </summary>
            <param name="context">The context (design or runtime)</param>
            <param name="type">The type to get the license for</param>
            <param name="instance">The object the license is for</param>
            <param name="allowExceptions">If true a <see cref="T:System.ComponentModel.LicenseException" /> is thrown if a valid license cannot be loaded</param>
            <returns>An encrypted license</returns>
            <remarks>
            <para>
            This method is used to get licenses for components and controls.  Applications should generally
            use the <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetLicense(System.String,System.String,System.Boolean)" /> method as it provides more control over the license file
            that keys are stored in.  This method is not typically called directly by application code.  
            Instead the component or control uses the <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" /> or
            <see cref="M:System.ComponentModel.LicenseManager.Validate(System.Type)" /> methods which find the <see cref="T:System.ComponentModel.LicenseProvider" /> for the type
            and call this method.
            </para>
            <para>
            You must call <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.SetParameters(System.String)" /> before calling this method either directly or
            indirectly by via a call to <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" />
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.InstallLicense(System.Type,Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Install the license for the given type
            </summary>
            <remarks>
            This method is used to install licenses for components and controls.  The <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.AuthenticatedLicense)" />
            method is typically better for installing application licenses because it provides more control over the 
            license key file name.  This license key file used by this method is the full type name followed by a ".lic" suffix. 
            </remarks>
            <param name="type">The component/control type the license is associated with </param>
            <param name="license">The license to install</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Install a license key for an application in the given file.
            </summary>
            <remarks>
            This method is used to install licenses for applications.  Use the <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.InstallLicense(System.Type,Infralution.Licensing.AuthenticatedLicense)" />
            method to install licenses for components or controls.  If a full path is not specified for licenseFile then
            the file will be created relative to the entry executable directory.
            <para>
            The AuthenticatedLicenseInstallForm uses this method to install licenses for applications.  
            Client applications may implement their own registration forms that call this method.  
            </para>
            </remarks>
            <param name="licenseFile">The name of the file to install the license key in</param>
            <param name="license">The license key to install</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.UninstallLicense(System.Type)">
            <summary>
            Uninstall a license key for the given component or control type.
            </summary>
            <remarks>
            Deletes the license file for the given type
            </remarks>
            <param name="type">The type to uninstall the license for</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.UninstallLicense(System.String)">
            <summary>
            Uninstall the license key in the given file.
            </summary>
            <remarks>
            Deletes the license file
            </remarks>
            <param name="licenseFile">The name of the file the license key is in</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.ReadLicense(System.String)">
            <summary>
            Read a license from the given file
            </summary>
            <param name="licenseFile">The file to read the license from</param>
            <returns>A new (unvalidated) license</returns>
            <remarks>
            Use <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.AuthenticatedLicense)" /> to validate that the license 
            is valid for this computer
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.WriteLicense(System.String,Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Write the license out to the given file
            </summary>
            <param name="license">The license to write</param>
            <param name="licenseFile">The file to write the license to</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.ReadLicenseFromString(System.String)">
            <summary>
            Read a license from a string
            </summary>
            <param name="licenseXml">A string containing the license XML</param>
            <returns>A new (unvalidated) license</returns>
            <remarks>
            Use <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.ValidateLicense(Infralution.Licensing.AuthenticatedLicense)" /> to validate that the license 
            is valid for this computer
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.WriteLicenseToString(Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Write the license out to an XML string
            </summary>
            <param name="license">The license to write</param>
            <returns>A string containing the XML for the license</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetComputerID">
            <summary>
            Return the string used to identify the computer the license should be authenticated for
            </summary>
            <returns>A string identifying the computer</returns>
            <remarks>
            This id is included in the authenticated license and checked when the license
            is validated.   This prevents a license being authenticated on one machine and 
            then copied to another.  The default implementation returns the <see cref="P:System.Environment.MachineName" />
            (or the <see cref="P:System.Web.HttpRequest.Url" /> host name for ASP.NET applications).
            While a user could change the machine name to match a copied license it is generally
            inconvenient for them to do so (particularly in a networked environment).   If
            you want a stronger deterrent to copying then you can override this method and return 
            a string based on other hardware characteristics
            </remarks>
            <seealso cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.IsThisComputer(System.String)" />
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.IsThisComputer(System.String)">
            <summary>
            Check if the given computer ID matches this computer
            </summary>
            <param name="computerID">The id to check</param>
            <returns>True if the computerID is for this computer</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.ShowInvalidStatusMessage(Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Display the default error message when <see cref="P:Infralution.Licensing.AuthenticatedLicense.Status" /> is not <see cref="F:Infralution.Licensing.AuthenticatedLicenseStatus.Valid" />
            </summary>
            <param name="license">The license to display the message for</param>
            <remarks>
            If called from an interactive application then displays a message box - otherwise
            the error is sent to the trace output window.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.WriteLicense(System.Xml.XmlTextWriter,Infralution.Licensing.AuthenticatedLicense)">
            <summary>
            Write the license out using the given <see cref="T:System.Xml.XmlTextWriter" />
            </summary>
            <param name="license">The license to write</param>
            <param name="writer">The writer to use</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetEncryptedLicenseProvider">
            <summary>
            Return an instance of the encrypted license provider used to generate and validate keys
            </summary>
            <returns>A new instance of an <see cref="T:Infralution.Licensing.EncryptedLicenseProvider" /></returns>
            <remarks>
            Override this method to use a custom <see cref="T:Infralution.Licensing.EncryptedLicenseProvider" />
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetLicenseDirectory(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Return the directory used to store license files
            </summary>
            <param name="context">The licence context</param>
            <param name="type">The type being licensed</param>
            <returns>The directory to look for license files</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetLicenseFilePath(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Called by <see cref="M:Infralution.Licensing.AuthenticatedLicenseProvider.GetLicense(System.String,System.Boolean)" /> to get the file path to obtain the license from (if there is no runtime license saved in the context)
            </summary>
            <remarks>
            This can be overridden to change the file used to store the design time license for the provider.   By default the
            the license file is stored in the same directory as the component executable with the name based on the fully
            qualified type name eg MyNamespace.MyControl.lic
            </remarks>
            <param name="context">The licence context</param>
            <param name="type">The type to get the license for</param>
            <returns>The path of the license file</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.ReadLicense(System.Xml.XmlTextReader)">
            <summary>
            Read a license from an <see cref="T:System.Xml.XmlTextReader" />
            </summary>
            <param name="reader">The XML reader to use</param>
            <returns>A new (unvalidated) license</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.ShowError(System.String,System.String)">
            <summary>
            Display an error to a message box or the trace output
            </summary>
            <param name="title">The title for the error</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticatedLicenseProvider.FixHostName(System.String)">
            <summary>
            Strip the leading "www." of host names (if present) and return lowercase
            </summary>
            <param name="hostName">The name to fix</param>
            <returns>Returns the host name minus www. prefix</returns>
        </member>
        <member name="P:Infralution.Licensing.AuthenticatedLicenseProvider.Parameters">
            <summary>
            Set/Get the Parameters for validating <see cref="T:Infralution.Licensing.AuthenticatedLicense">AuthenticatedLicenses</see> 
            </summary>
            <remarks>
            Note that this also sets the <see cref="P:Infralution.Licensing.EncryptedLicenseProvider.Parameters" /> property.
            </remarks>
        </member>
        <member name="T:Infralution.Licensing.AuthenticationService">
            <summary>
            Defines a programatic interface to the Authentication Web Service
            </summary>
            <remarks>
            Based on code auto-generated by Microsoft.VSDesigner.   The actual web service method calls are encrypted
            using public key (RSA) encryption.   Web service calls that are restricted to the product owner are signed
            using the private key (RSA) parameters to validate that the caller is legitimate.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.#ctor">
            <summary>
            Create a new instance of the Authentication Service
            </summary>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.Authenticate(Infralution.Licensing.AuthenticatedLicenseParameters,System.String,System.String)">
            <summary>
            Authenticate a license key on the given computer
            </summary>
            <param name="parameters">The license parameters used to encrypt the method parameters</param>
            <param name="computer">The computer to authenticate the key on</param>
            <param name="authenticationKey">The authentication key to authenticate</param>
            <returns>An XML string containing the authenticated license information</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.IsAuthenticated(Infralution.Licensing.AuthenticatedLicenseParameters,System.String,System.String)">
            <summary>
            Check if a license key is still authenticated for a given computer
            </summary>
            <param name="parameters">The license parameters used to encrypt the method parameters</param>
            <param name="licenseKey">The decrypted license key to check (Note this is NOT the authentication key)</param>
            <param name="computer">The computer to check</param>
            <returns>True if the license key is authenticated on the given computer</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.RemainingAuthentications(Infralution.Licensing.AuthenticatedLicenseParameters,System.String)">
            <summary>
            Return the number of remaining authentications for the given authentication key
            </summary>
            <param name="parameters">The license parameters used to encrypt the method parameters</param>
            <param name="authenticationKey">The license key to get the remaining authentications for</param>
            <returns>The number of remaining authentications</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.SetAuthenticationLimits(Infralution.Licensing.AuthenticatedLicenseParameters,System.String,System.Int32)">
            <summary>
            Set the Authentication Limits for the given license key
            </summary>
            <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param>
            <param name="authenticationKey">The license key to set the limits for</param>
            <param name="maxAuthentications">The maximum number of authentications allowed</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.DeleteAuthentication(Infralution.Licensing.AuthenticatedLicenseParameters,System.String,System.String)">
            <summary>
            Delete the authentication for the given license key/computer combination
            </summary>
            <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param>
            <param name="authenticationKey">The license key to delete the authentications for</param>
            <param name="computer">The computer to delete authentications for</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.DeleteAllAuthentications(Infralution.Licensing.AuthenticatedLicenseParameters,System.String)">
            <summary>
            Delete the all authentications (on all computers) for the given license key
            </summary>
            <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param>
            <param name="authenticationKey">The license key to delete the authentications for</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.GetAuthenticationData(Infralution.Licensing.AuthenticatedLicenseParameters,System.DateTime,System.Int32,System.Int32)">
            <summary>
            Get the authentication data for the given product
            </summary>
            <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param>
            <param name="fromDate">The date to get the data from</param>
            <param name="startRecord">The start record</param>
            <param name="maxRecords">The maximum number of records to return</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.UploadAuthenticationData(Infralution.Licensing.AuthenticatedLicenseParameters,System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Upload encrypted Authentication XML data to the Authentication Server
            </summary>
            <param name="parameters">The license parameters used to encrypt and sign the method parameters - MUST contain private parameters</param>
            <param name="encryptionAlgorithm">The encryption algorithm used to encrypt the data</param>
            <param name="encryptedData">The encrypted XML data</param>
            <remarks>The XML data should be encrypted using the given algorithm</remarks>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.Authenticate(System.String,System.String,System.Byte[])">
            <summary>
            Raw web service interface to authenticate a license key
            </summary>
            <param name="productName">The name of the product</param>
            <param name="sessionKey">RSA encrypted session key</param>
            <param name="encryptedArgs">Method arguments encrypted using session key</param>
            <returns>License XML encrypted using the session key</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.IsAuthenticated(System.String,System.String,System.Byte[])">
            <summary>
            Raw web service interface to check if a license key is still authenticated on a given computer
            </summary>
            <param name="productName">The name of the product</param>
            <param name="sessionKey">RSA encrypted session key</param>
            <param name="encryptedArgs">Method arguments encrypted using session key</param>
            <returns>True if the license key is authenticated</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.RemainingAuthentications(System.String,System.String,System.Byte[])">
            <summary>
            Raw web service interface to check the number of remaining authentications
            </summary>
            <param name="productName">The name of the product</param>
            <param name="sessionKey">RSA encrypted session key</param>
            <param name="encryptedArgs">Method arguments encrypted using session key</param>
            <returns>The number of remaining authentications</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.SetAuthenticationLimits(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Raw web service interface to set authentication limits for a license key
            </summary>
            <param name="productName">The name of the product</param>
            <param name="sessionKey">RSA encrypted session key</param>
            <param name="encryptedArgs">Method arguments encrypted using session key</param>
            <param name="signature">RSA signature of method arguments - used to validate the caller</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.DeleteAuthentication(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Raw web service interface to delete an authentication
            </summary>
            <param name="productName">The name of the product</param>
            <param name="sessionKey">RSA encrypted session key</param>
            <param name="encryptedArgs">Method arguments encrypted using session key</param>
            <param name="signature">RSA signature of method arguments - used to validate the caller</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.DeleteAllAuthentications(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Raw web service interface to delete all authentications for license key
            </summary>
            <param name="productName">The name of the product</param>
            <param name="sessionKey">RSA encrypted session key</param>
            <param name="encryptedArgs">Method arguments encrypted using session key</param>
            <param name="signature">RSA signature of method arguments - used to validate the caller</param>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.GetAuthenticationData(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Raw web service interface to get authentication data for a product
            </summary>
            <param name="productName">The name of the product</param>
            <param name="sessionKey">RSA encrypted session key</param>
            <param name="encryptedArgs">Method arguments encrypted using session key</param>
            <param name="signature">RSA signature of method arguments - used to validate the caller</param>
            <returns>XML data encrypted using the session key</returns>
        </member>
        <member name="M:Infralution.Licensing.AuthenticationService.UploadAuthenticationData(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Raw web service interface to upload authentication data for a product
            </summary>
            <param name="productName">The name of the product</param>
            <param name="sessionKey">RSA encrypted session key</param>
            <param name="encryptedData">The encrypted data</param>
            <param name="signature">RSA signature of the data - used to validate the caller</param>
        </member>
        <member name="P:Infralution.Licensing.AuthenticationService.Url">
            <summary>
            Set/Get the URL of the Authentication Service
            </summary>
        </member>
        <member name="T:Infralution.Licensing.CustomGeneratorData">
            <summary>
            Defines the information returned to License Tracker by the <see cref="!:ICustomGenerator" />
            </summary>
        </member>
        <member name="F:Infralution.Licensing.CustomGeneratorData.ProductInfo">
            <summary>
            The product info to embed in the license key
            </summary>
        </member>
        <member name="F:Infralution.Licensing.CustomGeneratorData.Comments">
            <summary>
            Comments to store with the key
            </summary>
            <remarks>
            This can be used to store ancillary information entered by the user that is
            used to generate the product info.
            </remarks>
        </member>
        <member name="F:Infralution.Licensing.CustomGeneratorData.Cancel">
            <summary>
            If set to true cancels generation of the license keys
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EncryptedLicense">
            <summary>
            Defines an encrypted license for an application or component generated using the Infralution
            Licensing System.
            </summary>
            <remarks>
            The Infralution Licensing System provides a secure way of licensing .NET controls,
            components and applications.   Licenses are protected using public key encryption to
            minimize possibility of cracking.
            </remarks>
            <seealso cref="T:Infralution.Licensing.EncryptedLicenseProvider" />
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicense.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new Infralution Encrypted License
            </summary>
            <param name="key">The key for the license</param>
            <param name="serialNo">The serial number of the license</param>
            <param name="productInfo">The product data associated with the license</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicense.Dispose">
            <summary>
            Cleans up any resources held by the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.LicenseKey">
            <summary>
            The license key for the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.ProductInfo">
            <summary>
            The product data associated with the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.SerialNo">
            <summary>
            The unique serial no for the license
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EncryptedLicenseInstallForm">
            <summary>
            Provides a basic form for installing Infralution Encrypted Licenses that can be extended or modified using 
            visual inheritance
            </summary>
            <seealso cref="T:Infralution.Licensing.EncryptedLicenseProvider" />
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm.messageLabel">
            <summary>Displays the main message of the form</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm.keyLabel">
            <summary>Displays text to the left of the LicenseKey entry box</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm.keyText">
            <summary>Allows the user to enter a license key for the product</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm.buttonPanel">
            <summary>Panel containing the buttons</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm.cancellationButton">
            <summary>Button to cancel license installation</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm.okButton">
            <summary>Button to install license key</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm.uninstallButton">
            <summary>Button to uninstall the current license</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm.components">
            <summary>Required by designer</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm._productName">
            <summary>The name of the product being licensed</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm._license">
            <summary>The license installed by the form (if any)</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm._licenseProvider">
            <summary>The license provider to use to install the license</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm._licenseType">
            <summary>The type being licensed (if any)</summary>
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseInstallForm._licenseFile">
            <summary>The license file to use (if not licensing a type)</summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.#ctor">
            <summary>
            Initialize a new instance of the form
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.ShowDialog(System.String,System.Type,Infralution.Licensing.EncryptedLicense)">
            <summary>
            Display the form for licensing a component or control
            </summary>
            <param name="productName">The name of the product being licensed</param>
            <param name="typeToLicense">The type of the component being licensed</param>
            <param name="installedLicense">The currently installed license (if any)</param>
            <returns>The newly installed license (if any)</returns>
            <remarks>
            Use this method to display the dialog to install a license for a component or control type
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.ShowDialog(System.String,Infralution.Licensing.EncryptedLicense)">
            <summary>
            Display the form for licensing an application
            </summary>
            <param name="licenseFile">The name of the license file</param>
            <param name="installedLicense">The currently installed license (if any)</param>
            <returns>The newly installed license (if any)</returns>
            <remarks>
            Use this method to display the dialog to install a license for an application
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.ShowDialog(System.String,System.String,Infralution.Licensing.EncryptedLicense)">
            <summary>
            Display the form for licensing an application
            </summary>
            <param name="productName">The name of the product being licensed</param>
            <param name="licenseFile">The name of the license file</param>
            <param name="installedLicense">The currently installed license (if any)</param>
            <returns>The newly installed license (if any)</returns>
            <remarks>
            Use this method to display the dialog to install a license for an application
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.OnLoad(System.EventArgs)">
            <summary>
            Initialize the form data
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.GetLicenseProvider">
            <summary>
            Return the license provider to use
            </summary>
            <returns>The license provider to use for installing licensing</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.InstallLicenseKey(System.String)">
            <summary>
            Install the license key entered by the user
            </summary>
            <param name="key">The key to install</param>
            <returns>True if the license was installed successfully</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.OnOkButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handle Click event for the <see cref="F:Infralution.Licensing.EncryptedLicenseInstallForm.okButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.OnUninstallButtonClick(System.Object,System.EventArgs)">
            <summary>
            Handle Click event for the <see cref="F:Infralution.Licensing.EncryptedLicenseInstallForm.uninstallButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseInstallForm.OnKeyTextChanged(System.Object,System.EventArgs)">
            <summary>
            Enable the <see cref="F:Infralution.Licensing.EncryptedLicenseInstallForm.okButton" /> when the key is non-null
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseInstallForm.LicenseProvider">
            <summary>
            The license provider to use to install the license
            </summary>
            <remarks>
            This allows you to set a license provider other than the default 
            (<see cref="T:Infralution.Licensing.EncryptedLicenseProvider" />).
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseInstallForm.ProductName">
            <summary>
            The name of the product to license
            </summary>
            <remarks>The default product name is taken from the application assembly info</remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseInstallForm.TypeToLicense">
            <summary>
            The type of the component/control being licensed (if any)
            </summary>
            <remarks>
            Set this if you are licensing a component or control.  If you are licensing an
            application set the <see cref="P:Infralution.Licensing.EncryptedLicenseInstallForm.LicenseFile" /> property instead.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseInstallForm.LicenseFile">
            <summary>
            The name of the license file to use when licensing an application
            </summary>
            <remarks>
            Set this if you are licensing an application.  If you are licensing a component
            or control then you should set the <see cref="P:Infralution.Licensing.EncryptedLicenseInstallForm.TypeToLicense" /> property instead.
            </remarks>
            <seealso cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.EncryptedLicense)" />
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseInstallForm.InstalledLicense">
            <summary>
            The installed license (if any)
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseInstallForm.AllowMultilineKeys">
            <summary>
            Should the license key value accept multiple lines
            </summary>
            <remarks>
            Set this to true if you want to allow multiline keys to be able to be pasted
            into the key field
            </remarks>
        </member>
        <member name="T:Infralution.Licensing.EncryptedLicenseProvider">
            <summary>
            Defines a .NET LicenseProvider that generates and validates simple, secure 
            <see cref="T:Infralution.Licensing.EncryptedLicense">EncryptedLicenses</see>.
            </summary>
            <remarks>
            The EncryptedLicenseProvider generates simple license keys which are validated using
            a public key encryption algorithm to minimize the possibility of cracking.  See 
            <see href="XtraGettingStarted.html">Getting Started</see> for detailed information on using
            the EncryptedLicenseProvider to license applications and components.
            </remarks>
            <seealso cref="T:Infralution.Licensing.EncryptedLicense" />
        </member>
        <member name="F:Infralution.Licensing.EncryptedLicenseProvider._parameters">
            <summary>
            The current parameters for validating licenses
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)">
            <summary>
            Set the parameters used to validate licenses created by this provider.
            </summary>
            <remarks>
            This must be called by the client software prior to obtaining licenses using the EncryptedLicenseProvider.
            The XML parameter string is generated using the Infralution License Key Generator and pasted into the calling client code
            or by calling <see cref="M:Infralution.Licensing.EncryptedLicenseParameters.WriteToString(System.Boolean)" />
            </remarks>
            <param name="xmlParameters">An XML string containing parameters used to validate licenses</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateKey(Infralution.Licensing.EncryptedLicenseParameters,System.String,System.Int32)">
            <summary>
            Generate a new encrypted license using the given parameters
            </summary>
            <param name="parameters">The license parameters to use to generate the key</param>
            <param name="productInfo">User defined data to be included in license key</param>
            <param name="serialNo">The unique license serial number for the</param>
            <returns>An encrypted license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed password is "TEST" and the only allowed serial numbers are 1 or 0.  
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateRuntimeKey(System.String)">
            <summary>
            Generate a runtime license key from the given design time license key
            </summary>
            <param name="designTimeLicenseKey">The design time license key to use</param>
            <returns>A runtime license key (or null if the designTimeLicenseKey can't be validated)</returns>
            <remarks>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,Infralution.Licensing.EncryptedLicense)">
            <summary>
            Install a license key for the given component or control type.
            </summary>
            <remarks>
            This method is used to install licenses for components and controls.  The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.EncryptedLicense)" />
            method is typically better for installing application licenses because it provides more control over the 
            license key file name.  This license key file used by this method is the full type name followed by a ".lic" suffix. 
            </remarks>
            <param name="type">The type to install the license for</param>
            <param name="license">The license to install</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,System.String)">
            <summary>
            Install a license key for the given component or control type.
            </summary>
            <remarks>
            Validates the given license key and then installs the license.
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)" /> and then
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,Infralution.Licensing.EncryptedLicense)" />.
            </remarks>
            <param name="type">The type to install the license for</param>
            <param name="licenseKey">The license key to install</param>
            <returns>A license if succesful or null/nothing if not</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.EncryptedLicense)">
            <summary>
            Install a license key for an application in the given file.
            </summary>
            <remarks>
            This method is used to install licenses for applications.  Use the <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,Infralution.Licensing.EncryptedLicense)" />
            method to install licenses for components or controls.  If a full path is not specified for licenseFile then
            the file will be created relative to the entry executable directory.
            </remarks>
            <param name="licenseFile">The name of the file to install the license key in</param>
            <param name="license">The license to install</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,System.String)">
            <summary>
            Install a license key for an application in the given file.
            </summary>
            <remarks>
            Validates the given license key and then installs the license.
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)" /> and then
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,Infralution.Licensing.EncryptedLicense)" />.
            </remarks>
            <param name="licenseFile">The name of the file to install the license key in</param>
            <param name="licenseKey">The license key to install</param>
            <returns>A license if succesful or null/nothing if not</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.UninstallLicense(System.Type)">
            <summary>
            Uninstall a license key for the given component or control type.
            </summary>
            <remarks>
            Deletes the license file for the given type
            </remarks>
            <param name="type">The type to uninstall the license for</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.UninstallLicense(System.String)">
            <summary>
            Uninstall the license key in the given file.
            </summary>
            <remarks>
            Deletes the license file
            </remarks>
            <param name="licenseFile">The name of the file the license key is in</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Check  that the given license key is valid
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <param name="context">The current licensing context</param>
            <param name="type">The type to be licensed</param>
            <returns>An <see cref="T:Infralution.Licensing.EncryptedLicense" /> or null if licenseKey is not valid</returns>
            <remarks>
            <para>
            This method is called to validate the licence key for a type.  If the license context is a design
            time context then it generates a runtime license key and saves it in the context.
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)">
            <summary>
            Validate that the given license key is valid for the current licensing parameters
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <returns>The encrypted license if the key is valid otherwise null</returns>
            <remarks>
            <para>
            This method provides a mechanism to validate that a given license key is valid
            prior to attempting to install it.   This can be useful if you want to check
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo" /> before installing the license.
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  
            </para>
            </remarks>
            <seealso cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.String)" /> 
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.String)">
            <summary>
            Validate that the given license key is valid for the given licensing parameters
            </summary>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="licenseKey">The license key to validate</param>
            <returns>The encrypted license if the key is valid otherwise null</returns>
            <remarks>
            <para>
            This method provides a mechanism to validate that a given license key is valid
            prior to attempting to install it.   This can be useful if you want to check
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo" /> before installing the license.  
            </para>
            <para>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)" /> followed by 
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)" />.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String)">
            <summary>
            Get a license (if installed) from the given license file.
            </summary>
            <param name="licenseFile">The name of the license file containing the license key</param>
            <returns>The installed license if any</returns>
            <remarks>
            <para>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager" /> methods to load and validate licenses.  If a full path is not specified 
            for licenseFile then the file loaded will be relative to the directory containing the application 
            executable (for Window Forms applications) or aspx files (for ASP.NET applications).
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String,System.String)">
            <summary>
            Get a license (if installed) from the given license file.
            </summary>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="licenseFile">The name of the license file containing the license key</param>
            <returns>The installed license if any</returns>
            <remarks>
            <para>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager" /> methods to read and validate licenses.  If a full path is not specified 
            for licenseFile then the file loaded will be relative to the directory containing the application 
            executable (for Window Forms applications) or aspx files (for ASP.NET applications).
            </para>
            <para>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)" /> followed by 
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String)" />.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Get a license (if installed) for the given component/control type 
            </summary>
            <param name="context">The context (design or runtime)</param>
            <param name="type">The type to get the license for</param>
            <param name="instance">The object the license is for</param>
            <param name="allowExceptions">If true a <see cref="T:System.ComponentModel.LicenseException" /> is thrown if a valid license cannot be loaded</param>
            <returns>An encrypted license</returns>
            <remarks>
            <para>
            This method is used to get licenses for components and controls.  Applications should generally
            use the <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String,System.String)" /> method as it provides more control over the license file
            that keys are stored in.  This method is not typically called directly by application code.  
            Instead the component or control uses the <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" /> or
            <see cref="M:System.ComponentModel.LicenseManager.Validate(System.Type)" /> methods which find the <see cref="T:System.ComponentModel.LicenseProvider" /> for the type
            and call this method.
            </para>
            <para>
            You must call <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)" /> before calling this method either directly or
            indirectly by via a call to <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)" />
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Reflection.Assembly,System.Type)">
            <summary>
            Return the license for the given type from a given DLL assembly resources
            </summary>
            <param name="context">The license context to validate the license in</param>
            <param name="assembly">The assembly containing the license</param>
            <param name="type">The type to get the license for</param>
            <returns>The license key if any</returns>
            <remarks>
            This method can be used to check the given DLL assembly for a license.  By default the .NET licensing
            framework only checks the entry assembly (ie typically executables) for licenses.  This means
            that if a licensed control is wrapped in another control, the customer of the wrapped control will
            still required a design time license key for the original control.  This is generally the behaviour
            that control authors would like.  If however you want to provide a license that enables a customer
            to create new component/controls using your control/component then you can achieve this by using 
            this method to check for a license in the CallingAssembly that created the control/component.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.EncodeToText(System.Byte[],Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a byte array into a text representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>Text representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.DecodeFromText(System.String,Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a string into a byte array.
            </summary>
            <param name="text">The text to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetPasswordData(System.String,System.Int32)">
            <summary>
            Generate the password data used to verify and decrypt the license
            </summary>
            <param name="password">The password used to generate the key</param>
            <param name="keyStrength">The strength of the key to create</param>
            <returns>The password data used to verify and decrypt the license</returns> 
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.PadPassword(System.Byte[])">
            <summary>
            Pad the given password if required.
            </summary>
            <param name="passwordData">The password data to pad</param>
            <returns>The padded password data</returns> 
            <remarks>
            This function is required for backward compatibility with 7 byte passwords which were
            padded before being signed
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.CreateSignatures(Infralution.Licensing.EncryptedLicenseParameters)">
            <summary>
            Create the signatures based on the current parameters
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateKey(Infralution.Licensing.EncryptedLicenseParameters,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Generate a new encrypted license 
            </summary>
            <param name="parameters">The license parameters to use to generate the key</param>
            <param name="productPassword">The password used to encrypted the license data</param>
            <param name="productInfo">User defined data to be included in license key</param>
            <param name="serialNo">The unique license serial number</param>
            <returns>An encrypted license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed password is "TEST" and the only allowed serial numbers are 1 or 0.  To use the
            licensed version of this method ensure that the file Infralution.Licensing.EncryptedLicenseProvider.lic
            exists in the same directory as the Infralution.Licensing.dll and contains a valid
            license key for the Licensing System.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.ComponentModel.LicenseUsageMode,System.Boolean,System.String@)">
            <summary>
            Check that the given license key is valid and optionally generate a runtime license key
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <param name="usageMode">The usage mode that we want to validate the license key for</param>
            <param name="generateRuntimeLicenseKey">Should a runtime license be generated from the license - usageMode must also be DesignTime</param>
            <param name="runtimeLicenseKey">The generated runtime license (if any)</param>
            <returns>An <see cref="T:Infralution.Licensing.EncryptedLicense" /> or null if licenseKey is not valid</returns>
            <remarks>
            <para>
            This method implements the core validation logic (other ValidateLicenseKey methods call it) and optionally
            generates a runtime license key.
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)" /> method MUST be called before using this method.  
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ReadKeyFromFile(System.String)">
            <summary>
            Read a license key from the given file
            </summary>
            <param name="licenseFile">The path to the license file to read the key from</param>
            <returns>The license key if any</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.WriteKeyToFile(System.String,System.String)">
            <summary>
            Write a license key to the given file
            </summary>
            <param name="licenseFile">The path to the license file to write the key to</param>
            <param name="licenseKey">The license key to write</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicenseDirectory(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Return the directory used to store license files
            </summary>
            <param name="context">The licence context</param>
            <param name="type">The type being licensed</param>
            <returns>The directory to look for license files</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicenseFilePath(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Called by <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String)" /> to get the file path to obtain the license from (if there is no runtime license saved in the context)
            </summary>
            <remarks>
            This can be overridden to change the file used to store the design time license for the provider.   By default the
            the license file is stored in the same directory as the component executable with the name based on the fully
            qualified type name eg MyNamespace.MyControl.lic
            </remarks>
            <param name="context">The licence context</param>
            <param name="type">The type to get the license for</param>
            <returns>The path of the license file</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ShowError(System.String,System.String)">
            <summary>
            Display an error to a message box or the trace output
            </summary>
            <param name="title">The title for the error</param>
            <param name="message">The error message</param>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseProvider.Parameters">
            <summary>
            Set/Get Parameters for validating <see cref="T:Infralution.Licensing.EncryptedLicense">EncryptedLicenses</see>  
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EvaluationDialogResult">
            <summary>
            The result of displaying an <see cref="T:Infralution.Licensing.EvaluationDialog" />
            </summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialogResult.Exit">
            <summary>
            Exit the application
            </summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialogResult.Continue">
            <summary>
            Continue the evaluation
            </summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialogResult.InstallLicense">
            <summary>
            Install a license for the application 
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EvaluationDialog">
            <summary>
            Form to display to evaluation customers
            </summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialog.continueButton">
            <summary>The button to allow continuation of the evaluation</summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialog.installLicenseButton">
            <summary>The button to install a license</summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialog.exitButton">
            <summary>The button to exit the application</summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialog.evaluationDaysLabel">
            <summary>Label to display number of days left in the evaluation</summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialog.messageLabel">
            <summary>Label to display message about the evaluation conditions</summary>
        </member>
        <member name="F:Infralution.Licensing.EvaluationDialog.evaluationTimer">
            <summary>Timer used to enable the <see cref="F:Infralution.Licensing.EvaluationDialog.continueButton" /></summary>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.#ctor">
            <summary>
            Default constructor (required for designer)
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.#ctor(Infralution.Licensing.EvaluationMonitor)">
            <summary>
            Create a new instance of the form using the given evaluation monitor 
            </summary>
            <param name="evaluationMonitor">The evalulation monitor class to use to store the evaluation data</param>
            <remarks>Uses the default ProductName from the application assembly info</remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.#ctor(Infralution.Licensing.EvaluationMonitor,System.String)">
            <summary>
            Create a new instance of the form using the given evaluation monitor and product name
            </summary>
            <param name="productName">Name of the product being licensed</param>
            <param name="evaluationMonitor">The evalulation monitor class to use to store the evaluation data</param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.ShowDialog">
            <summary>
            Show the dialog
            </summary>
            <returns>The result of the evaluation dialog</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Show the dialog
            </summary>
            <param name="owner">The owner form</param>
            <returns>The result of the evaluation dialog</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.ResizeForm">
            <summary>
            Resize the form to fit the message label
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.OnLoad(System.EventArgs)">
            <summary>
            Initialize the form data
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.OnInstallLicense(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the <see cref="F:Infralution.Licensing.EvaluationDialog.installLicenseButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.OnContinueEvaluation(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the <see cref="F:Infralution.Licensing.EvaluationDialog.continueButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.OnExit(System.Object,System.EventArgs)">
            <summary>
            Handle a click on the <see cref="F:Infralution.Licensing.EvaluationDialog.exitButton" />
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationDialog.OnEvaluationTimerTick(System.Object,System.EventArgs)">
            <summary>
            Enable the <see cref="F:Infralution.Licensing.EvaluationDialog.continueButton" /> after a period of time
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Infralution.Licensing.EvaluationDialog.EvaluationMonitor">
            <summary>
            The evaluation monitor used to determine the trial period
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationDialog.ProductName">
            <summary>
            The name of the product being licensed
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationDialog.TrialDays">
            <summary>
            The number of days for the evaluation period
            </summary>
            <remarks>
            After this period has expired the ContinueButton will be enabled after an increasing delay
            until the <see cref="P:Infralution.Licensing.EvaluationDialog.ExtendedTrialDays" /> limit is reached - at which point the ContinueButton
            will no longer be enabled.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationDialog.ExtendedTrialDays">
            <summary>
            The number of trial days after which evaluation is no longer enabled
            </summary>
            <remarks>
            If this is set to a value greater then <see cref="P:Infralution.Licensing.EvaluationDialog.TrialDays" /> then users can continue
            to use the product past the evaluation period - however there is an increasing delay in
            enabling the ContinueButton.  Once the ExtendedTrialDays limit is reached the ContinueButton 
            will no longer be enabled.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationDialog.ExtendedTrialDelay">
            <summary>
            The time to delay enabling the <see cref="F:Infralution.Licensing.EvaluationDialog.continueButton" /> for each day 
            once the <see cref="P:Infralution.Licensing.EvaluationDialog.TrialDays" /> period is exceeded.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationDialog.EvaluationMessage">
            <summary>
            The message to display to the user
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationDialog.DialogResult">
            <summary>
            The result for this dialog
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EvaluationMonitor">
            <summary>
            Defines the base class for managing time/usage limited evaluations of products.  The 
            <see cref="T:Infralution.Licensing.RegistryEvaluationMonitor" /> and <see cref="!:IsolatedStorageEvaluationMonitor" /> classes provide
            concrete instances of this class that store the data in the registry and isolated storage respectively.
            </summary>
            <remarks>
            <para>
            Instantiate an instance of a derived class to read/write the evaluation parameters for the   
            given product.  The <see cref="P:Infralution.Licensing.EvaluationMonitor.FirstUseDate" /> is set the first time that
            the class is instantiated.  The <see cref="P:Infralution.Licensing.EvaluationMonitor.LastUseDate" /> and <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> 
            properties are set each time the class is instantiated (or once per day if
            the <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay" /> property is set to true).
            </para>
            <para>
            Note that evaluation data must be stored somewhere on the users 
            hard disk.  It is therefore not too difficult for a sophisticated user to determine the 
            changes made either to registry keys or files (using file/registry monitoring software) 
            and restore the state of these to their pre-installation state (thus resetting the 
            evaluation period).  For this reason it is recommended that you don't rely on this 
            mechanism alone.  You should also consider limiting the functionality of your product 
            in some way or adding nag screens to discourage long term use of evaluation versions.
            </para>
            <para>
            If you have a data oriented application you can increase the security of evaluations by
            storing the current <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> somewhere in your database each time the 
            application runs and cross checking this with the number returned by the EvaluationMonitor.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="countUsageOncePerDay">Should the usage count only be incremented once per day</param>
            <param name="productId">A unique Id for this product</param>
            <param name="suppressExceptions">
            If true then any exceptions thrown while reading or creating the evaluation data are caught and ignored
            </param>
            <remarks>
            If countUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> is only incremented once
            for each day that the product is actually used.   If countUsageOncePerDay is false then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" />
            is incremented each time a new evaluation monitor is instantiated for a product
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Reset(System.Boolean)">
            <summary>
            Allows you to reset the evaluation period.
            </summary>
            <remarks>
            This can be useful if a customer needs an extension to their evaluation period
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.DeleteData(System.String)">
            <summary>
            Overridden by derived classes to delete the evaluation data
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.ReadData(System.String,System.DateTime@,System.DateTime@,System.Int32@)">
            <summary>
            Overridden by derived classes to read existing evaluation data (if any) 
            from persistent storage
            </summary>
            <param name="productId">The unique product Id</param>
            <param name="firstUseDate">Returns the date the evaluation monitor was first used</param>
            <param name="lastUseDate">Returns the date the evaluation monitor was last used</param>
            <param name="usageCount">Returns the usage count</param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.WriteData(System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Overridden by derived classes to write the updated evaluation data to persistent storage
            </summary>
            <param name="productId">The unique product Id</param>
            <param name="firstUseDate">The date the evaluation monitor was first used</param>
            <param name="lastUseDate">The date the evaluation monitor was last used</param>
            <param name="usageCount">The usage count</param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Dispose">
            <summary>
            Free resources used by the EvaluationMonitor
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay">
            <summary>
            Set/Get whether the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> should be incremented only once per day 
            </summary>
            <remarks>
            If CountUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> is only incremented once
            for each day that the product is actually used.   If CountUsageOncePerDay is false then 
            the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> is incremented each time a new evaluation monitor is instantiated for 
            a given product id. 
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.UsageCount">
            <summary>
            Return the number of times the product has been used 
            </summary>
            <remarks>
            If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay" /> is set to true then the UsageCount is only incremented once
            for each day that the product is actually used.   If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay" /> is false then 
            the UsageCount is incremented each time a new evaluation monitor is instantiated for 
            a given product id.  Typically you should instantiate an EvaluationMonitor object just once in your 
            software.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.FirstUseDate">
            <summary>
            Return the date/time the product was first used
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.LastUseDate">
            <summary>
            Return the date/time the product was last used
            </summary>
            <remarks>
            If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay" /> is set to true then this is the date
            at which the usage count was last updated - otherwise it is the date at 
            which the EvaluationMonitor was last created.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.DaysInUse">
            <summary>
            Return the number of days since the product was first run.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.Invalid">
            <summary>
            Returns true if the evaluation monitor detects attempts to circumvent
            evaluation limits by tampering with the hidden evaluation data or winding
            the PC clock backwards 
            </summary>
        </member>
        <member name="T:Infralution.Licensing.LicenseResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.AuthenticatingTxt">
            <summary>
              Looks up a localized string similar to Authenticating.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.AuthenticationErrorMsg">
             <summary>
               Looks up a localized string similar to An unexpected error occurred while authenticating your license key.  Do you want to authenticate your license by sending  it to us via email or post instead?
            
            Click "No" and then "Install" to try again.
            
            Click "Yes" to save your license to a file.   Send this file to us and we will authenticate and return it, so that you can load it using the "Load License" button.
            
            Error: {0}.
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.AuthenticationErrorTitle">
            <summary>
              Looks up a localized string similar to Authentication Error.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.AuthenticationsExceededMsg">
            <summary>
              Looks up a localized string similar to The number of installations allowed for this license key has been exceeded.   .
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ConfirmUninstallMsg">
            <summary>
              Looks up a localized string similar to Are you sure you want to uninstall the current license?.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ConfirmUninstallTitle">
            <summary>
              Looks up a localized string similar to Confirm License Uninstall.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ConnectionErrorMsg">
             <summary>
               Looks up a localized string similar to Unable to connect to the License Authentication Server via the internet to authenticate your license on this computer. Do you want to authenticate your license by sending  it to us via email or post instead?
            
            Click "No" to fix your internet or firewall settings and then click the "Install" button to try again.
            
            Click "Yes" to save your license to a file.   Send this file to us and we will authenticate and return it, so that you can load it using the "Load License" button..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.EvaluationExpiredMsg">
            <summary>
              Looks up a localized string similar to Your evaluation period has expired.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.EvaluationInvalidMsg">
            <summary>
              Looks up a localized string similar to Your evaluation is no longer valid.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidAuthenticationKeyMsg">
            <summary>
              Looks up a localized string similar to The key ({0}) is not a valid license key for this product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidAuthenticationKeyTitle">
            <summary>
              Looks up a localized string similar to Invalid License Key.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidComputerMsg">
             <summary>
               Looks up a localized string similar to The license is not valid for this computer.  This could be because you have changed the computer name since installing the license.
            
            Licensed Computer: {0}
            This Computer: {1}
            
            You may need to install a new license using the original License Key provided to you when you purchased the product.  .
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidILSFile">
            <summary>
              Looks up a localized string similar to Not a valid License Settings File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidKeyMsg">
            <summary>
              Looks up a localized string similar to The key ({0}) is not a valid license key for this product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidKeyTitle">
            <summary>
              Looks up a localized string similar to Invalid License Key.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidLicenseTitle">
            <summary>
              Looks up a localized string similar to {0} - Invalid License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidProductMsg">
            <summary>
              Looks up a localized string similar to The license is not a valid license for this product ({0}).  It is a license for another product ({1})..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.InvalidSignatureMsg">
            <summary>
              Looks up a localized string similar to The license file contents have been modified and the license is no longer valid.  You may need to reinstall the license using the original License Key provided to you when you purchased the product..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.LicenseFile">
            <summary>
              Looks up a localized string similar to License.lic.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.LicenseFileFilter">
            <summary>
              Looks up a localized string similar to License Files|*.lic.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.LicenseInstalledTxt">
            <summary>
              Looks up a localized string similar to License Installed.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.LoadLicenseTitle">
            <summary>
              Looks up a localized string similar to Load License from File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.NoLicenseInstalledTxt">
            <summary>
              Looks up a localized string similar to No License Installed.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ReadErrorMsg">
             <summary>
               Looks up a localized string similar to An error ({0}) occurred while reading the license from file ({1}).  
            
            Ensure you have sufficient privileges to read from the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ReadErrorTitle">
            <summary>
              Looks up a localized string similar to Error Reading License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.ReadXmlErrorMsg">
            <summary>
              Looks up a localized string similar to An unexpected error ({0}) occurred while reading the license. .
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.SaveLicenseTitle">
            <summary>
              Looks up a localized string similar to Save License to File.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.UnauthenticatedLicenseMsg">
            <summary>
              Looks up a localized string similar to The license has not been authenticated..
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.UninstallErrorMsg">
             <summary>
               Looks up a localized string similar to An error ({0}) occurred while deleting the license file ({1}).  
            
            Ensure you have sufficient privileges to delete the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.UninstallErrorTitle">
            <summary>
              Looks up a localized string similar to Error Uninstalling License.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.UnknownProductTxt">
            <summary>
              Looks up a localized string similar to Unknown Product.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.WaitTxt">
            <summary>
              Looks up a localized string similar to Please Wait....
            </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.WriteErrorMsg">
             <summary>
               Looks up a localized string similar to An error ({0}) occurred while writing the license to file ({1}).  
            
            Ensure you have sufficient privileges to write to the license file..
             </summary>
        </member>
        <member name="P:Infralution.Licensing.LicenseResources.WriteErrorTitle">
            <summary>
              Looks up a localized string similar to Error Writing License.
            </summary>
        </member>
        <member name="T:Infralution.Licensing.TextEncoding">
            <summary>
            Defines the types of encoding possible for license keys
            </summary>
        </member>
        <member name="F:Infralution.Licensing.TextEncoding.Hex">
            <summary>
            Keys are encoded using hexadecimal notation (characters 0-9 and A-F)
            </summary>
        </member>
        <member name="F:Infralution.Licensing.TextEncoding.Base32">
            <summary>
            Keys are encoding using base 32 with the following character set (23456789ABCDEFGHJKLMNPQRSTUVWXYZ)
            </summary>
        </member>
        <member name="T:Infralution.Licensing.LicenseUtilities">
            <summary>
            Provides common utility methods for the Infralution Licensing classes
            </summary>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.Checksum(System.String)">
            <summary>
            Returns a three character checksum based on the given input string
            </summary>
            <param name="input">The input string to return a checksum for</param>
            <returns>An checksum that can be used to validate the given input string</returns>
            <remarks>
            <para>
            This function can be used to generate a short checksum that can be embedded in a
            license key as <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo" />.  This allows you to tie 
            the license key to information supplied by the user (for instance the name of the 
            purchaser) without having to include the full information in the license key.  
            This enables license keys to be kept reasonably short.
            </para>
            <para>
            When the license is checked by the application it performs a checksum on the information
            supplied by the user and checks that it matches the information in the ProductInfo that
            was generated when the license was issued.   The License Tracker application provides
            support for "CustomGenerators" which allow you provide the code to generate the ProductInfo
            from customer and other information.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.Strip(System.String,System.String)">
            <summary>
            Return the given input string stripped of the given characters
            </summary>
            <param name="value">The string to strip</param>
            <param name="characters">The characters to strip from the string</param>
            <returns>The input string with the given characters removed</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ReadElementBase64(System.Xml.XmlReader)">
            <summary>
            Read a Base64 string from an XmlReader into a byte array
            </summary>
            <param name="reader">The XmlReader to read from</param>
            <returns>The byte data for the given element</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ReadElementBase64(System.Xml.XmlReader,System.String)">
            <summary>
            Read a Base64 string from an XmlReader into a byte array
            </summary>
            <param name="reader">The XmlReader to read from</param>
            <param name="name">The name of the element</param>
            <returns>The byte data for the given element</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.WriteElementBase64(System.Xml.XmlWriter,System.String,System.Byte[])">
            <summary>
            Write a byte array into Base64 string of an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to write to</param>
            <param name="name">The name of the element</param>
            <param name="value">The data to write</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.WriteRSAParameters(Infralution.Licensing.RSACryptoServiceProvider,System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            Read RSA Parameters for an RSA Provider to an XmlWriter
            </summary>
            <param name="provider">The provider to writer the parameters for</param>
            <param name="writer">The XmlWriter to write to</param>
            <param name="localName">The name of the element</param>
            <param name="includePrivateParameters">Should the private RSA parameters be included</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ReadRSAParameters(Infralution.Licensing.RSACryptoServiceProvider,System.Xml.XmlReader,System.String)">
            <summary>
            Read RSA Parameters for an RSA Provider from an XmlReader
            </summary>
            <param name="provider">The provider to read the parameters for</param>
            <param name="reader">The XmlReader to read from</param>
            <param name="localName">The name of the element</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ToHex(System.Byte[])">
            <summary>
            Converts a byte array into a hexadecimal representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <returns>Hexadecimal representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.FromHex(System.String)">
            <summary>
            Converts a hexadecimal string into a byte array.
            </summary>
            <param name="hex">The hexadecimal string to convert</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ToBase32(System.Byte[])">
            <summary>
            Converts a byte array into a base 32 representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <returns>Base32 representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.FromBase32(System.String)">
            <summary>
            Converts a base32 string into a byte array.
            </summary>
            <param name="str">The base32 string to convert</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.EncodeToText(System.Byte[],Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a byte array into a text representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>Text representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DecodeFromText(System.String,Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a string into a byte array.
            </summary>
            <param name="text">The text to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.CreateRSACryptoServiceProvider">
            <summary>
            Create an instance of the RSACryptoServiceProvider.
            </summary>
            <returns>An instance of the RSACryptoServiceProvider</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.SignData(Infralution.Licensing.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Sign the given data using the given RSA parameters
            </summary>
            <param name="rsaProvider">The RSA Provider to use</param>
            <param name="data">The data to sign</param>
            <returns>The signature for the data</returns>
            <remarks>
            Uses <see cref="M:Infralution.Licensing.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)" /> instead of
            <see cref="M:Infralution.Licensing.RSACryptoServiceProvider.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithm)" /> to workaround bug in standard Microsoft
            <see cref="T:Infralution.Licensing.RSACryptoServiceProvider" /> that can cause a lengthy delay.   
            See http://support.microsoft.com/default.aspx?scid=kb;en-us;948080
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.VerifyData(Infralution.Licensing.RSACryptoServiceProvider,System.Byte[],System.Byte[])">
            <summary>
            Verify the signature for the given data using the given RSA parameters
            </summary>
            <param name="rsaProvider">The RSA Provider to use</param>
            <param name="data">The data to verify</param>
            <param name="signature">The signature for the data</param>
            <returns>True if the data matches the signature</returns>
            <remarks>
            Uses <see cref="M:Infralution.Licensing.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])" /> instead of
            <see cref="M:Infralution.Licensing.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Security.Cryptography.HashAlgorithm,System.Byte[])" /> to workaround bug in standard Microsoft
            <see cref="T:Infralution.Licensing.RSACryptoServiceProvider" /> that can cause a lengthy delay.  
            See http://support.microsoft.com/default.aspx?scid=kb;en-us;948080
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.EncryptKeys(Infralution.Licensing.RSACryptoServiceProvider,System.Security.Cryptography.SymmetricAlgorithm)">
            <summary>
            Encrypt the keys of the given symmetric algorithm using an RSA public key 
            </summary>
            <param name="rsaProvider">The RSA provider to use to encrypt the symmetric keys</param>
            <param name="algorithm">The symmetric algorithm</param>
            <returns>String containing the encrypted keys</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DecryptKeys(Infralution.Licensing.RSACryptoServiceProvider,System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Set the Key and IV for the given symmetric algorithm by decrypting the keys from a string 
            </summary>
            <param name="rsaProvider">The RSA provider to use to decrypt the keys</param>
            <param name="algorithm">The symmetric algorithm to set the keys for</param>
            <param name="encryptedKeys">String containing encrypted keys</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.EncryptValues(System.Security.Cryptography.SymmetricAlgorithm,System.Collections.Hashtable)">
            <summary>
            Encrypt a set of key/values using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to encrypt the data</param>
            <param name="values">A hash table containing string key/value pairs</param>
            <returns>The encrypted key/values</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DecryptValues(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Decrypt a set of key/values using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to decrypt the values</param>
            <param name="encryptedValues">The encrypted data</param>
            <returns>A hashtable containing the string key/values</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.EncryptText(System.Security.Cryptography.SymmetricAlgorithm,System.String)">
            <summary>
            Encrypt text using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to encrypt the data</param>
            <param name="text">The text to encrypt</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DecryptText(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[])">
            <summary>
            Decrypt text using the given algorithm
            </summary>
            <param name="algorithm">The algorithm to use to decrypt the values</param>
            <param name="encryptedData">The encrypted text</param>
            <returns>The decryptedText</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.GetSavedLicenseKey(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieve the license key for the given type from the given DLL/EXE assembly resources
            </summary>
            <param name="assembly">The assembly containing the license resources</param>
            <param name="type">The type to get the license key for</param>
            <returns>The license key if any</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.UninstallLicenseFile(System.String)">
            <summary>
            Uninstall the given license file by deleting it
            </summary>
            <param name="path">The full file path</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ShowError(System.String,System.String)">
            <summary>
            Display an error to a message box or the trace output
            </summary>
            <param name="title">The title for the error</param>
            <param name="message">The error message</param>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.DefaultLicenseDirectory(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Return the default directory used to store license files
            </summary>
            <param name="context">The licence context</param>
            <param name="type">The type being licensed</param>
            <returns>The directory to look for license files</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ArraySize(System.Int32)">
            <summary>
            Return the array size to use when declaring an array of the given length.
            </summary>
            <param name="length">The length of the array you are declaring</param>
            <returns>The size to declare the array</returns>
            <remarks>
            This is used to account for the difference between declaring VB and C# arrays and
            permit automatic conversion of the code to VB
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.ArrayEqual(System.Byte[],System.Byte[])">
            <summary>
            Are the contents of the two byte arrays equal
            </summary>
            <param name="a1">The first array</param>
            <param name="a2">The second array </param>
            <returns>True if the contents of the arrays is equal</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.Checksum(System.Byte[])">
            <summary>
            Create a checksum for the given block of data
            </summary>
            <param name="data">The block of data to create a checksum for</param>
            <returns>An integer checksum</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.HashString(System.String)">
            <summary>
            Implements a string hashing code algorithm equivalent to the .NET 2003 String.GetHashCode()
            </summary>
            <remarks>
            Microsoft have changed the underlying String.GetHashCode algorithm.  This method provides an
            equivalent compatible method that can be used on all platforms returning the same result.
            </remarks>
            <param name="szStr">The string to get the hash code for</param>
            <returns>The hash code</returns>
        </member>
        <member name="M:Infralution.Licensing.LicenseUtilities.GetXmlLines(System.String)">
            <summary>
            Break the given xml fragment into lines
            </summary>
            <param name="xml">The xml fragment</param>
            <returns></returns>
        </member>
        <member name="P:Infralution.Licensing.LicenseUtilities.HandleIOExceptions">
            <summary>
            Should the licensing classes handle exceptions when reading and writing license files
            </summary>
            <remarks>
            Set this to false if you wish to handle these exceptions yourself
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.LicenseUtilities.UseMachineKeyStore">
            <summary>
            Determines whether RSA keys used to verify licenses are stored on a user or machine level
            </summary>
            <remarks>
            Setting this value to true may be useful when impersonating or running under an account 
            whose user profile is not loaded.  ILS will by default use the MachineKeyStore when there
            is no interactive user (ie services and ASP.NET) otherwise it will use the UserKeyStore.
            </remarks>
        </member>
        <member name="T:Infralution.Licensing.RegistryEvaluationMonitor">
            <summary>
            Defines an implementation of the <see cref="T:Infralution.Licensing.EvaluationMonitor" /> base class that stores
            the evaluation data in a hidden, encrypted key within the windows registry.
            </summary>
            <remarks>
            <para>
            Instantiate an instance of this class to read/write the evaluation parameters for the   
            given product.  Note that a sophisticated user could determine the 
            changes made to registry keys (using registry monitoring software) and restore the state 
            of these to their pre-installation state (thus resetting the 
            evaluation period).  For this reason it is recommended that you don't rely on this 
            mechanism alone.  You should also consider limiting the functionality of your product 
            in some way or adding nag screens to discourage long term use of evaluation versions.
            </para>
            <para>
            If you have a data oriented application you can increase the security of evaluations by
            storing the current <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> somewhere in your database each time the 
            application runs and cross checking this with the number returned by the EvaluationMonitor.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="countUsageOncePerDay">Should the usage count only be incremented once per day</param>
            <param name="password">A unique password for this product</param>
            <param name="suppressExceptions">
            If true then any exceptions thrown while reading or creating the evaluation data are caught and ignored
            </param>
            <remarks>
            If countUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> is only incremented once
            for each day that the product is actually used.   If countUsageOncePerDay is false then the 
            <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount" /> is incremented each time a new evaluation monitor is instantiated for a product
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.#ctor(System.String)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="password">A unique password for this product</param>
            <remarks>
            Same as calling RegistryEvaluationMonitor(password, false, true)
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.ReadData(System.String,System.DateTime@,System.DateTime@,System.Int32@)">
            <summary>
            Read existing evaluation data (if any) from the registry 
            </summary>
            <param name="productId">The unique product Id</param>
            <param name="firstUseDate">Returns the date the evaluation monitor was first used</param>
            <param name="lastUseDate">Returns the date the evaluation monitor was last used</param>
            <param name="usageCount">Returns the usage count</param>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.WriteData(System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Overridden by derived classes to write the updated evaluation data to persistent storage
            </summary>
            <param name="productId">The unique product Id</param>
            <param name="firstUseDate">The date the evaluation monitor was first used</param>
            <param name="lastUseDate">The date the evaluation monitor was last used</param>
            <param name="usageCount">The usage count</param>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.DeleteData(System.String)">
            <summary>
            Delete the evaluation data
            </summary>
            <param name="productId">The unique product Id</param>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.FindBaseKey(System.String)">
            <summary>
            Find the base key for this product
            </summary>
            <param name="productId">The productId to find the key for</param>
            <returns>The base registry key used to store the data</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.GetLocalName(Microsoft.Win32.RegistryKey)">
            <summary>
            Return the local name of a given registry key
            </summary>
            <param name="key">The key to get the name of</param>
            <returns>The local name of the registry key</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.KeyExists(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Return true if the given sub key already exists 
            </summary>
            <param name="key"></param>
            <param name="subKeyName"></param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.NewBaseKeyName">
            <summary>
            Generate a new base key name
            </summary>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.OpenSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Open a given sub key (readonly) 
            </summary>
            <param name="parentKey">The name of the parent key</param>
            <param name="subKeyName">The name of the sub key</param>
            <returns>The sub key</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.Encrypt(System.String)">
            <summary>
            Encrypt the given text
            </summary>
            <param name="text">The text to encrypt</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.Decrypt(System.Byte[])">
            <summary>
            Decrypt the given byte data to text
            </summary>
            <param name="data">The byte data to decrypt</param>
            <returns>The decrypted text</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.EncryptDate(System.DateTime)">
            <summary>
            Encrypt a date
            </summary>
            <param name="date">The date to encrypt</param>
            <returns>The encrypted date data</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.DecryptDate(System.Byte[])">
            <summary>
            Decrypt a date
            </summary>
            <param name="data">The data to decrypt</param>
            <returns>The descryped date</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.DataEquals(System.Byte[],System.Byte[])">
            <summary>
            Are the contents of the two byte arrays equal
            </summary>
            <param name="a1">The first array</param>
            <param name="a2">The second array </param>
            <returns>True if the contents of the arrays is equal</returns>
        </member>
        <member name="M:Infralution.Licensing.RegistryEvaluationMonitor.Dispose">
            <summary>
            Free resources used by the EvaluationMonitor
            </summary>
        </member>
        <member name="T:Infralution.Licensing.RSACryptoServiceProvider">
             <summary>
             Defines a plugin replacement for the standard .NET <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />
             class
             </summary>
             <remarks>
             <para>
             This class overcomes difficulties that the standard .NET <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />
             class has with running in partial trust environments.   This class only support SHA1 hashing.
             </para>
             <para>
             Uses BigInteger Class Copyright (c) 2002 Chew Keong TAN to implement
             RSA Encryption/Decryption.  BigInteger class is licensed under the following terms:
             </para>
             <code>
             BigInteger Class Version 1.03
            
             Copyright (c) 2002 Chew Keong TAN
             All rights reserved.
            
             Permission is hereby granted, free of charge, to any person obtaining a
             copy of this software and associated documentation files (the
             "Software"), to deal in the Software without restriction, including
             without limitation the rights to use, copy, modify, merge, publish,
             distribute, and/or sell copies of the Software, and to permit persons
             to whom the Software is furnished to do so, provided that the above
             copyright notice(s) and this permission notice appear in all copies of
             the Software and that both the above copyright notice(s) and this
             permission notice appear in supporting documentation.
            
             THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
             OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
             MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
             OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
             HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL
             INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING
             FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
             NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
             WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
            
            
             Disclaimer
             ----------
             Although reasonable care has been taken to ensure the correctness of this
             implementation, this code should never be used in any application without
             proper verification and testing.  I disclaim all liability and responsibility
             to any person or entity with respect to any loss or damage caused, or alleged
             to be caused, directly or indirectly, by the use of this BigInteger class.
             </code>
             </remarks>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.#ctor(System.Int32)">
            <summary>
            Create a new instance of the class
            </summary>
            <param name="dwKeySize">Length of the key in bits.  Must be a multiple of 8</param>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)">
            <summary>
            Create a new instance of the class
            </summary>
            <param name="dwKeySize">Length of the key in bits.  Must be a multiple of 8</param>
            <param name="parameters">For compatibility only - this parameter is ignored</param>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)">
            <summary>
            Import RSA parameters
            </summary>
            <param name="parameters">The parameters to import</param>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.ExportParameters(System.Boolean)">
            <summary>
            Exports the RSA parameters
            </summary>
            <param name="includePrivateParameters">true to include private parameters; otherwise, false</param>
            <returns>The RSA parameters</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.FromXmlString(System.String)">
            <summary>
            Read the RSA parameters from a string
            </summary>
            <param name="xmlString">The string containing the XML parameters</param>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.ToXmlString(System.Boolean)">
            <summary>
            Write the RSA parameters to a string
            </summary>
            <param name="includePrivateParameters">Should the string include private parameters</param>
            <returns></returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)">
            <summary>
            Encrypts data with the RSA algorithm
            </summary>
            <param name="rgb">The data to be encrypted</param>
            <param name="fOAEP">Must be false - OAEP padding is not supported</param>
            <returns>The encrypted data</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)">
            <summary>
            Decrypts data with the RSA algorithm
            </summary>
            <param name="rgb">The data to be decrypted</param>
            <param name="fOAEP"></param>
            <returns>The decrypted data</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Computes the hash value of the specified byte array using the specified hash algorithm, and signs the resulting hash value
            </summary>
            <param name="buffer">The input data for which to compute the hash</param>
            <param name="halg">The hash algorithm to use to create the hash value - only SHA1 is supported</param>
            <returns>The RSA signature for the specified data</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified data
            </summary>
            <param name="buffer">The data that was signed</param>
            <param name="halg">The hash algorithm used to create the hash value of the data - only SHA1 is supported</param>
            <param name="signature">The signature data to be verified</param>
            <returns>True if the signature verifies as valid; otherwise, false</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
            <summary>
            Computes the signature for the specified hash value by encrypting it with the private key
            </summary>
            <param name="rgbHash">The hash value of the data to be signed</param>
            <param name="str">The hash algorithm identifier (OID) used to create the hash value of the data - only SHA1 is supported</param>
            <returns>The RSA signature for the specified hash value</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
            <summary>
            Verifies the specified signature data by comparing it to the signature computed for the specified hash value
            </summary>
            <param name="rgbHash">The hash value of the data to be signed</param>
            <param name="str">The hash algorithm identifier (OID) used to create the hash value of the data - only SHA1 is supported</param>
            <param name="rgbSignature">The signature data to be verified</param>
            <returns>True if the signature verifies as valid; otherwise, false</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.CreateParameters">
            <summary>
            Create a new set of unique parameters
            </summary>
            <remarks>
            Uses the standard <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> to generate
            a new set of parameters.  This should never need to be called from partial
            trust environments
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.PublicTransform(System.Byte[])">
            <summary>
            Transform data using the public key 
            </summary>
            <param name="data">The data to transform - must be the same number of byes as the key</param>
            <returns>The transformed data</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.PrivateTransform(System.Byte[])">
            <summary>
            Transform data using the private key
            </summary>
            <param name="data">The data to transform - must be the same number of byes as the key</param>
            <returns>The transformed data</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.SignSHA1Hash(System.Byte[])">
            <summary>
            Sign an SHA1 hash and return the signature
            </summary>
            <param name="hash">The hash to sign</param>
            <returns>The signature</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.VerifySHA1Hash(System.Byte[],System.Byte[])">
            <summary>
            Verify a signature for an SHA1 hash
            </summary>
            <param name="hash">The hash to verify</param>
            <param name="signature">The signature</param>
            <returns>True if the signature matches the hash</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Dispose of resources used by the class
            </summary>
            <param name="disposing">Is the method being called outside a finalizer</param>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.CompareBytes(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compare the contents of two byte arrays
            </summary>
            <param name="a1">The first byte array</param>
            <param name="i1">The index to start from in the first array</param>
            <param name="a2">The second byte array</param>
            <param name="i2">The index to start from in the second array</param>
            <param name="n">The number of bytes to check</param>
            <returns>True if the bytes are the same</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.PadData(System.Byte[],System.Int32)">
            <summary>
            Pad a byte array of data with leading zero bytes
            </summary>
            <param name="data">The data to pad</param>
            <param name="n">The required length of the data</param>
            <returns>The padded data</returns>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.CheckHashAlgorithm(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Validate that the hash algorithm is SHA1
            </summary>
            <param name="halg">The hash algorithm</param>
        </member>
        <member name="M:Infralution.Licensing.RSACryptoServiceProvider.CheckHashAlgorithmOID(System.String)">
            <summary>
            Validate that the hash algorithm OID is SHA1
            </summary>
            <param name="str">The hash algorithm OID</param>
        </member>
        <member name="P:Infralution.Licensing.RSACryptoServiceProvider.KeyExchangeAlgorithm">
            <summary>
            Returns the name of the key exchange algorithm
            </summary>
        </member>
        <member name="P:Infralution.Licensing.RSACryptoServiceProvider.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm
            </summary>
        </member>
        <member name="P:Infralution.Licensing.RSACryptoServiceProvider.KeySize">
            <summary>
            Gets or sets the size, in bits, of the key modulus 
            </summary>
        </member>
        <member name="T:RightEdge.Common.OptimizationParameter">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.OptimizationResult">
            <summary>
            The results of an optimization;
            </summary>
        </member>
        <member name="M:RightEdge.Common.OptimizationResult.#ctor">
            <summary>
            Constructs a new OptimizationResult object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.OptimizationResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.OptimizationResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.OptimizationResult.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.OptimizationResult.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.OptimizationResult.RunNumber">
            <summary>
            The run number.  This serves as an identifier for this run within the optimization.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OptimizationResult.ParameterValues">
            <summary>
            The system parameter values which were used for this run.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OptimizationResult.ResultsFile">
            <summary>
            The file where the full system results are stored.  These can be loaded with the <see cref="M:RightEdge.Common.SystemResults.Load(System.String)" /> method.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OptimizationResult.FinalStatistic">
            <summary>
            The final bar statistic for the system, which contains information such as the profit and loss, number of positions, APR, etc.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OptimizationResult.RiskResults">
            <summary>
            The risk assessment plugin results for this run.
            </summary>
        </member>
        <member name="T:RightEdge.Common.Order">
            <summary>
            Represents an order that is associated with a position.
            </summary>
            <remarks>
            Use the <see cref="P:RightEdge.Common.Position.Orders" /> property to get a list of the pending orders for
            a position.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.Order.CancelOrder">
            <summary>
            Cancels this order if it is pending.
            </summary>
            <returns>A ReturnCode indicating whether the operation succeeded.</returns>
        </member>
        <member name="M:RightEdge.Common.Order.ToString">
            <summary>
            ToString override to represent an order as a string.
            </summary>
            <remarks>This order will be represented in the following format: TradeType: BrokerOrder.ToString().  For the BrokerOrder format, see the <see cref="M:RightEdge.Common.BrokerOrder.ToString">ToString</see> method on <see cref="T:RightEdge.Common.BrokerOrder">BrokerOrder</see>.</remarks>
            <returns>string containing this order.</returns>
        </member>
        <member name="P:RightEdge.Common.Order.TradeOrder">
            <summary>
            The <see cref="T:RightEdge.Common.PositionManager.TradeOrder" /> associated with this order.
            This property is for internal use and does not need to be used in trading
            system code.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.BrokerOrder">
            <summary>
            The <see cref="P:RightEdge.Common.Order.BrokerOrder" /> associated with this order.
            This property is for internal use and does not need to be used in trading
            system code.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.Symbol">
            <summary>
            The Symbol associated with this order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.ID">
            <summary>
            This order's order ID.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.Size">
            <summary>
            The size of this order (in shares, contracts, etc.).
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.LimitPrice">
            <summary>
            The limit price for the order (if applicable).
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.StopPrice">
            <summary>
            The stop price for the order (if applicable).
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.OrderType">
            <summary>
            The order type (market, limit, stop, etc.)
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.TransactionType">
            <summary>
            The transaction type (buy, sell, short, or cover).
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.OrderState">
            <summary>
            The current order state (pending, filled, cancelled, etc.)
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.Error">
            <summary>
            Error information for the order.  This will be null if the order was
            successfully submitted.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.Tag">
            <summary>
            An object that can be used to store additional user-defined data related to the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.CustomString">
            <summary>
            A string that can be used to store additional user-defined data related to the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.Fills">
            <summary>
            A list of fills for the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.TradeType">
            <summary>
            The type of trade.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.Description">
            <summary>
            A user-definable description for the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Order.BarsValid">
            <summary>
            The number of bars after which the order will be cancelled if it has not been filled.
            </summary>
            <remarks>
            If this number is negative, the order is valid until manually cancelled or until the position is closed.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Order.CancelPending">
            <summary>
            Indicates that a request to cancel the order has been sent to the broker.
            </summary>
        </member>
        <member name="T:RightEdge.Common.OrderSettings">
            <summary>
            Contains information used to submit an order.
            </summary>
            <remarks>To submit an order on an existing position, pass an instance of this class
            to the <see cref="M:RightEdge.Common.Position.SubmitOrder(RightEdge.Common.OrderSettings)" /> of an open position.  To submit an order
            to open a new position, use the <see cref="T:RightEdge.Common.PositionSettings" /> class and the
            <see cref="M:RightEdge.Common.PositionManager.OpenPosition(RightEdge.Common.PositionSettings)" /> method.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.Symbol">
            <summary>
            The symbol to submit the order for.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.Size">
            <summary>
            The size of the order to submit.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.TransactionType">
            <summary>
            The transaction type (buy, sell, short, or cover) for the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.OrderType">
            <summary>
            The order type (market, limit, stop, etc.).
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.LimitPrice">
            <summary>
            The limit price for the order, if applicable.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.StopPrice">
            <summary>
            The stop price for the order, if applicable.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.TrailingStop">
            <summary>
            The trailing stop for the order, if applicable.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.TrailingStopType">
            <summary>
            Indicates whether the trailing stop is specified as a percentage or a fixed price offset for a trailing stop order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.BarsValid">
            <summary>
            The number of bars after which the order will be cancelled if it has not been filled.
            </summary>
            <remarks>
            If this number is negative, the order is valid until manually cancelled or until the position is closed.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.Description">
            <summary>
            An optional description for the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.Tag">
            <summary>
            An object that can be used to store additional user-defined data related to the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.OrderSettings.CustomString">
            <summary>
            A string that can be used to store additional user-defined data related to the order.
            </summary>
        </member>
        <member name="T:RightEdge.Common.ExcludedPluginAttribute">
            <summary>
            Indicates that a class should not be loaded as a plugin even if it implements a plugin interface.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IPluginEditor">
            <summary>
            Interface for implementing plugin editor user interface
            </summary>
        </member>
        <member name="M:RightEdge.Common.IPluginEditor.ShowSettings(System.Object)">
            <summary>
            Called when a plugin needs to show custom settings.
            </summary>
            <param name="plugin">The plugin's parameters</param>
        </member>
        <member name="M:RightEdge.Common.IPluginEditor.GetSettings">
            <summary>
            Called when the plugin needs to return custom settings to RightEdge.
            </summary>
            <returns>object containing user settings.</returns>
        </member>
        <member name="T:RightEdge.Common.PluginEditorAttribute">
            <summary>
            Allows a plugin to specify a class used to edit its settings instead of the default property grid.  
            The class should inherit from <see cref="T:System.Windows.Forms.Control" /> and implement <see cref="T:RightEdge.Common.IPluginEditor" />.
            </summary>
        </member>
        <member name="M:RightEdge.Common.PluginEditorAttribute.#ctor(System.Type)">
            <summary>
            Constructs a PluginEditorAttribute with the specified type.
            </summary>
            <param name="pluginEditorType">The type which will be used to edit the plugin.  This type should inherit from <see cref="T:System.Windows.Forms.Control" />
            and implement the <see cref="T:RightEdge.Common.IPluginEditor" /> interface.</param>
        </member>
        <member name="P:RightEdge.Common.PluginEditorAttribute.PluginEditorType">
            <summary>
            Gets the PluginEditorType for this instance.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TargetPriceType">
            <summary>
            Indicates whether a profit target or stop loss is expressed as a fixed price or a percentage gain or loss.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TargetPriceType.None">
            <summary>
            The profit target or stop loss is not enabled.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TargetPriceType.AbsolutePrice">
            <summary>
            The profit target or stop loss is specified as a fixed price.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TargetPriceType.RelativeRatio">
            <summary>
            The profit target or stop loss is specified as a percentage gain or loss.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TargetPriceType.RelativePrice">
            <summary>
            The profit target or stop loss is specified as a fixed price offset from the entry price.
            </summary>
        </member>
        <member name="F:RightEdge.Common.TargetPriceType.RelativeTicks">
            <summary>
            The profit target or stop loss is specified as a fixed number of ticks offset from the entry price.
            </summary>
        </member>
        <member name="T:RightEdge.Common.Position">
            <summary>
            Represents a position.
            </summary>
        </member>
        <member name="M:RightEdge.Common.Position.SubmitOrder(System.Int64,RightEdge.Common.TransactionType,RightEdge.Common.OrderType,System.Double)">
            <summary>
            Submits an order to modify this position which is valid for one bar.
            </summary>
            <param name="size">The size of the order to submit.</param>
            <param name="transactionType">The transaction type (buy, sell, short, or cover) for the order.</param>
            <param name="orderType">The order type.</param>
            <param name="price">The stop or limit price for the order, if applicable.</param>
            <returns>An <see cref="T:RightEdge.Common.Order" /> object representing the order that was submitted.</returns>
            <remarks>If there is an error which prevents the order from being submitted, then the Error property of the
            returned object will contain the error message.  If the order was successfully submitted, the Error property
            will be null.</remarks>
        </member>
        <member name="M:RightEdge.Common.Position.SubmitOrder(System.Int64,RightEdge.Common.TransactionType,RightEdge.Common.OrderType,System.Double,System.Int32)">
            <summary>
            Submits an order to modify this position.
            </summary>
            <param name="size">The size of the order to submit.</param>
            <param name="transactionType">The transaction type (buy, sell, short, or cover) for the order.</param>
            <param name="orderType">The order type.</param>
            <param name="price">The stop or limit price for the order, if applicable.</param>
            <param name="barsValid">The number of bars before the order should be cancelled.  If this is negative, the order will not be automatically cancelled.</param>
            <returns>An <see cref="T:RightEdge.Common.Order" /> object representing the order that was submitted.</returns>
            <remarks>If there is an error which prevents the order from being submitted, then the Error property of the
            returned object will contain the error message.  If the order was successfully submitted, the Error property
            will be null.</remarks>
        </member>
        <member name="M:RightEdge.Common.Position.SubmitOrder(RightEdge.Common.OrderSettings)">
            <summary>
            Submits an order to modify this position.
            </summary>
            <param name="orderSettings">An OrderSettings object which contains information about the order to be submitted.</param>
            <returns>An <see cref="T:RightEdge.Common.Order" /> object representing the order that was submitted.</returns>
            <remarks>If there is an error which prevents the order from being submitted, then the Error property of the
            returned object will contain the error message.  If the order was successfully submitted, the Error property
            will be null.</remarks>
        </member>
        <member name="M:RightEdge.Common.Position.SetProfitTargetPrice(System.Double)">
            <summary>
            Sets the profit target for this position, specified as a fixed price.
            </summary>
            <param name="profitTargetPrice">The new profit target price.</param>
            <seealso cref="M:RightEdge.Common.Position.SetProfitTargetRatio(System.Double)" />
            <seealso cref="M:RightEdge.Common.Position.SetProfitTarget(System.Double,RightEdge.Common.TargetPriceType)" />
        </member>
        <member name="M:RightEdge.Common.Position.SetProfitTargetRatio(System.Double)">
            <summary>
            Sets the profit target for this position, specified as a percentage gain.
            </summary>
            <param name="profitTargetPercent">The new profit target percentage.</param>
            <seealso cref="M:RightEdge.Common.Position.SetProfitTargetPrice(System.Double)" />
            <seealso cref="M:RightEdge.Common.Position.SetProfitTarget(System.Double,RightEdge.Common.TargetPriceType)" />
        </member>
        <member name="M:RightEdge.Common.Position.SetProfitTarget(System.Double,RightEdge.Common.TargetPriceType)">
            <summary>
            Sets the profit target for this position.
            </summary>
            <param name="profitTarget">The value of the profit target.</param>
            <param name="profitTargetType">Specifies whether the value should be interpreted as a fixed price or as a percentage gain.</param>
            <seealso cref="M:RightEdge.Common.Position.SetProfitTargetPrice(System.Double)" />
            <seealso cref="M:RightEdge.Common.Position.SetProfitTargetRatio(System.Double)" />
        </member>
        <member name="M:RightEdge.Common.Position.SetStopLossPrice(System.Double)">
            <summary>
            Sets the stop loss for this position, specified as a fixed price.
            </summary>
            <param name="stopLossPrice">The new stop loss price.</param>
            <seealso cref="M:RightEdge.Common.Position.SetStopLossRatio(System.Double)" />
            <seealso cref="M:RightEdge.Common.Position.SetStopLoss(System.Double,RightEdge.Common.TargetPriceType)" />
        </member>
        <member name="M:RightEdge.Common.Position.SetStopLossRatio(System.Double)">
            <summary>
            Sets the stop loss for this position, specified as a percentage loss.
            </summary>
            <param name="stopLossPercent">The new stop loss percentage.</param>
            <seealso cref="M:RightEdge.Common.Position.SetStopLossPrice(System.Double)" />
            <seealso cref="M:RightEdge.Common.Position.SetStopLoss(System.Double,RightEdge.Common.TargetPriceType)" />
        </member>
        <member name="M:RightEdge.Common.Position.SetStopLoss(System.Double,RightEdge.Common.TargetPriceType)">
            <summary>
            Sets the stop loss for this position.
            </summary>
            <param name="stopLoss">The value of the stop loss.</param>
            <param name="stopLossType">Specifies whether the value should be interpreted as a fixed price or as a percentage loss.</param>
            <seealso cref="M:RightEdge.Common.Position.SetStopLossPrice(System.Double)" />
            <seealso cref="M:RightEdge.Common.Position.SetStopLossRatio(System.Double)" />
        </member>
        <member name="M:RightEdge.Common.Position.CloseAtMarket">
            <summary>
            Submits a market order to close the position.
            </summary>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether the order to close the position was successfully submitted.</returns>
        </member>
        <member name="M:RightEdge.Common.Position.CloseaAtMarket(System.String)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Position.CloseAtMarket(System.String)">
            <summary>
            Submits a market order to close the position.
            </summary>
            <param name="description">A description for the close position order.</param>
            <returns>A <see cref="T:RightEdge.Common.ReturnCode" /> indicating whether the order to close the position was successfully submitted.</returns>
        </member>
        <member name="M:RightEdge.Common.Position.ToString">
            <summary>
            Outputs a Position object to a string.
            </summary>
            <returns>string containing the position object's data.</returns>
        </member>
        <member name="P:RightEdge.Common.Position.ID">
            <summary>
            The unique ID for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Symbol">
            <summary>
            The symbol this position was established for.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.State">
            <summary>
            The position state (pending, open, or closed).  A pending position is a position
            where the order to open it has been submitted but not filled.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.BarsHeld">
            <summary>
            The number of bars the position has been or was open for.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Info">
            <summary>
            The <see cref="T:RightEdge.Common.PositionInfo" /> object for this position.
            This property is for internal use and does not usually need to be used in trading
            system code.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Type">
            <summary>
            The position type (long or short).
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Description">
            <summary>
            A user-definable description for the order.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Tag">
            <summary>
            An object that can be used to store additional user-defined data related to the position.  Note that this field will not be saved between different live trading sessions.
            The <see cref="P:RightEdge.Common.Position.CustomString" /> field will be saved between sessions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.CustomString">
            <summary>
            A string that can be used to store additional user-defined data related to the position.  
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Error">
            <summary>
            Error information for the position.  This will be null if the order to open the position was
            successfully submitted.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Orders">
            <summary>
            The pending orders for this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Trades">
            <summary>
            The list of trades, or orders that have been filled, for this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.BarCountExit">
            <summary>
            The number of bars before this position will be closed automatically.
            If this value is less than zero, the position will not be automatically closed.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.ProfitTarget">
            <summary>
            The profit target for the position.
            </summary>
            <remarks>This value may represent a fixed price or a percentage gain, depending on the
            value of the <see cref="P:RightEdge.Common.Position.ProfitTargetType" /> property.  To change the profit target,
            use the <see cref="M:RightEdge.Common.Position.SetProfitTarget(System.Double,RightEdge.Common.TargetPriceType)" /> method.</remarks>
        </member>
        <member name="P:RightEdge.Common.Position.ProfitTargetType">
            <summary>
            The type of profit target for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.StopLoss">
            <summary>
            The stop loss for the position.
            </summary>
            <remarks>This value may represent a fixed price or a percentage loss, depending on the
            value of the <see cref="P:RightEdge.Common.Position.StopLossType" /> property.  To change the stop loss,
            use the <see cref="M:RightEdge.Common.Position.SetStopLoss(System.Double,RightEdge.Common.TargetPriceType)" /> method.</remarks>
        </member>
        <member name="P:RightEdge.Common.Position.StopLossType">
            <summary>
            The type of stop loss for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.PendingClose">
            <summary>
            Indicates whether ClosePosition has been called for this position.  If this is true, then additional orders may not be submitted for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.CurrentStats">
            <summary>
            The <see cref="T:RightEdge.Common.PositionStats" /> object representing the current state of the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.CurrentSize">
            <summary>
            The current size of this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.MaxSize">
            <summary>
            The maximum size of this position.
            </summary>
            <remarks>
            Positions can be resized.  This value is the largest size this position achieved.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Position.GrossSize">
            <summary>
            The gross size of this position.
            </summary>
            <remarks>
            This value is the total number of shares or contracts bought (for a long position),
            or shorted (for a short position).  It may be larger than the <see cref="P:RightEdge.Common.Position.MaxSize" />.
            For example, if a position was opened with 200 shares, 100 shares were sold, and then
            100 more shares were bought, the <see cref="P:RightEdge.Common.Position.MaxSize" /> would be 200, but the
            gross size would be 300.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Position.EntryPrice">
            <summary>
            The weighted average of the entry price for the shares or contracts that
            currently make up this position.
            </summary>
            <remarks>
            <para>This value is the average price per share or contract for the shares or
            contracts that currently make up the position.  If the position is closed,
            this value will be zero.</para>
            <para>This value differs from the <see cref="P:RightEdge.Common.Position.GrossEntryPrice" /> in that
            trades which reduce the position size can have an effect on this value.
            For example, consider a position where 200 shares are bought for $10 each.
            Then, 100 shares are sold at $11 each.  Finally, 100 shares are bought at
            $12 each.  In this case, the gross entry price would be $10.67, while the
            entry price would be $11.00.
            </para>
            </remarks>
            <seealso cref="P:RightEdge.Common.Position.GrossEntryPrice" />
        </member>
        <member name="P:RightEdge.Common.Position.GrossEntryPrice">
            <summary>
            The position gross entry price, as a weighted average.
            </summary>
            <remarks>
            This is the average price of all the trades which added to this
            position, weighted by the size of each trade.
            </remarks>
            <seealso cref="P:RightEdge.Common.Position.EntryPrice" />
        </member>
        <member name="P:RightEdge.Common.Position.ExitPrice">
            <summary>
            The position exit price, as a weighted average.
            </summary>
            <remarks>
            This is the average price of all the trades which decreased the position
            size, weighted by the size of each trade.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Position.RealizedProfit">
            <summary>
            The realized profit for this position.
            </summary>
            <remarks>
            This value can be negative to indicate a loss.  This value takes the
            commission paid into account, so it will generally be negative on a
            position which was just opened.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Position.Commission">
            <summary>
            The commission costs paid so far for this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.Interest">
            <summary>
            The amount of interest earned or paid on this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.UnrealizedProfit">
            <summary>
            Gets the unrealized profit for a position.
            </summary>
            <remarks>
            The unrealized profit is the amount of profit that would be gained if the 
            position were to be closed at the current price for the symbol.  However, this
            value does not take into account the commission that may be paid on the trade
            which closes the position.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Position.Exposure">
            <summary>
            Gets the exposure for this position.
            </summary>
            <remarks>
            <para>For a long position on a standard equity, the exposure is both the amount
            of money that it cost to open the position, and the maximum amount of money
            that could be lost from the position (if the stock loses all of its value).</para>
            <para>For short or leveraged positions, the risk/exposure may be theoretically
            infinite or may not correspond to the cost to open a position.  In any case,
            this property returns a value that corresponds to the cost to open the position.</para>
            <para>Note that this value does not include commissions.</para>
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Position.CurrentValue">
            <summary>
            Gets the value of this position.
            </summary>
            <remarks>
            The current value is effectively the amount that would be added to your account if
            the position were closed at the current price, not including commissions
            paid for the closing trade.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.Position.OpenDate">
            <summary>
            The date of the first trade for the position, or <see cref="F:System.DateTime.MaxValue" />
            if there are no trades.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.EntryTransactionType">
            <summary>
            The <see cref="T:RightEdge.Common.TransactionType" /> used to open or add to this position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Position.ExitTransactionType">
            <summary>
            The <see cref="T:RightEdge.Common.TransactionType" /> used to close this position or reduce its size.
            </summary>
        </member>
        <member name="T:RightEdge.Common.RList`1">
            <summary>
            A class that provides access to a series of data.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <remarks>
            An RList is used to provide access to series in RightEdge where there each element in the series
            corresponds to a bar.  The <see cref="P:RightEdge.Common.RList`1.Current" /> property provides access to the value for
            the most recent bar, and the <see cref="M:RightEdge.Common.RList`1.LookBack(System.Int32)" /> method provides access to previous values.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.RList`1.#ctor">
            <summary>
            Constructs an empty RList.
            </summary>
        </member>
        <member name="M:RightEdge.Common.RList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructs an RList with the specified items.
            </summary>
            <param name="items">A list of items to add to the RList.</param>
            <remarks>
            The last item in the supplied list will be the current item of the RList.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.RList`1.LookBack(System.Int32)">
            <summary>
            Returns the element in the series from the specified number of bars ago.  LookBack(0) is the current value,
            LookBack(1) is the previous bar's value, etc.
            </summary>
            <param name="nBars">The number of bars to look back.</param>
            <returns>The element from the specified number of bars ago.</returns>
        </member>
        <member name="M:RightEdge.Common.RList`1.SetValue(System.Int32,`0)">
            <summary>
            Sets a value that has been previously set.
            </summary>
            <param name="lookBack">number of bars to look back.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:RightEdge.Common.RList`1.Add(`0)">
            <summary>
            Adds an item to the series.
            </summary>
            <param name="item">The item to add to the series.</param>
            <remarks>
            If there is a current partial item (<see cref="P:RightEdge.Common.RList`1.HasPartialItem" /> is true), it will be removed.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.RList`1.Clear">
            <summary>
            Removes all items from the series.
            </summary>
        </member>
        <member name="M:RightEdge.Common.RList`1.AsReadOnly">
            <summary>
            Returns a readonly version of this RList.
            </summary>
            <returns>A readonly version of this RList.</returns>
            <remarks>If this RList is already readonly, this method will return a reference to this RList instead of creating a new one.</remarks>
        </member>
        <member name="P:RightEdge.Common.RList`1.TotalCount">
            <summary>
            Returns the total number of bars.
            </summary>
            <remarks>The <see cref="P:RightEdge.Common.RList`1.TotalCount" /> refers to the total number of items added to the list.  If the
            <see cref="P:RightEdge.Common.RList`1.MaxLookBack" /> is enabled, they may not all be accessible.</remarks>
        </member>
        <member name="P:RightEdge.Common.RList`1.Count">
            <summary>
            The number of elements currently in the list.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RList`1.MaxCurrentLookBack">
            <summary>
            Gets the actual maximum current lookback, taking into account the size of the list and the MaxLookBack property.
            </summary>
        </member>
        <member name="P:RightEdge.Common.RList`1.Current">
            <summary>
            The current value of the series.  Using this property is the same as calling LookBack(0).
            </summary>
        </member>
        <member name="T:RightEdge.Common.SeriesChartSettings">
            <summary>
            Contains settings for how an indicator or series is displayed on a chart.
            </summary>
            <seealso cref="P:RightEdge.Common.ISeries.ChartSettings" />
        </member>
        <member name="M:RightEdge.Common.SeriesChartSettings.#ctor">
            <summary>
            SeriesChartSettings constructor.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SeriesChartSettings.Equals(RightEdge.Common.SeriesChartSettings,RightEdge.Common.SeriesChartSettings)">
            <summary>
            Compares two <see cref="T:RightEdge.Common.SeriesChartSettings" /> objects.
            </summary>
            <param name="s1">The first object.</param>
            <param name="s2">The second object.</param>
            <returns>True if the settings are the same for both objects, false otherwise.</returns>
        </member>
        <member name="M:RightEdge.Common.SeriesChartSettings.GetDefaultChartSettings(RightEdge.Common.ISeries)">
            <summary>
            Gets the default chart settings for an indicator, based on the <see cref="T:RightEdge.Common.IndicatorAttribute" /> applied to it.
            </summary>
            <param name="indicator">The indicator to get default settings for.</param>
            <returns>A new <see cref="T:RightEdge.Common.SeriesChartSettings" /> object with the default settings for the indicator.</returns>
        </member>
        <member name="M:RightEdge.Common.SeriesChartSettings.Clone">
            <summary>
            Creates a copy of a <see cref="T:RightEdge.Common.SeriesChartSettings" /> object.
            </summary>
            <returns>A new instance of the class with the same settings as the current one.</returns>
        </member>
        <member name="P:RightEdge.Common.SeriesChartSettings.ShowInChart">
            <summary>
            Determines whether the series will be displayed on a chart or not.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesChartSettings.Color">
            <summary>
            The color which will be used to draw the series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesChartSettings.DisplayName">
            <summary>
            The name which will be used to display the series on the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesChartSettings.LineSize">
            <summary>
            The line size to use to draw the series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesChartSettings.LineType">
            <summary>
            The line type to use to draw the series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesChartSettings.ChartPaneName">
            <summary>
            The chart pane to draw the series on.  If this is null, the series will be drawn on the price pane.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SeriesChartSettings.Symbol">
            <summary>
            The symbol for which the series will be drawn.  This can be left as null in most cases.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SeriesInputValue">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SymbolScriptBase">
            <summary>
            A base class that symbol scripts derive from.
            </summary>
            <remarks>
            <para>The <see cref="T:RightEdge.Common.SymbolScriptBase" /> class provides easy access to symbol-specific information and operations.
            In RightEdge, one copy of your symbol script class is created for each symbol in the trading portfolio.
            You can also create a system class (deriving from <see cref="T:RightEdge.Common.SystemBase" />) for system-level logic.
            </para>
            <para>
            A class with the name MySymbolScriptBase which derives from <see cref="T:RightEdge.Common.SymbolScriptBase" /> will be generated by RightEdge
            in your project.  Your symbol script class should derive from MySymbolScriptBase and include your trading logic.
            </para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.Startup">
            <summary>
            Startup function called at the start of a system run.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.NewBar">
            <summary>
            Called for each new, nonempty bar for the symbol.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.NewTick(RightEdge.Common.BarData,RightEdge.Common.TickData)">
            <summary>
            Called when a new tick is received.
            </summary>
            <param name="partialBar">The current partial bar for this symbol.</param>
            <param name="tick">A <see cref="T:RightEdge.Common.TickData">TickData</see> structure instance containing the latest tick information.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OrderFilled(RightEdge.Common.Position,RightEdge.Common.Trade)">
            <summary>
            Called when an order is filled.
            </summary>
            <param name="position">The position for which an order was filled.</param>
            <param name="trade">The trade object corresponding to the filled order.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OrderCancelled(RightEdge.Common.Position,RightEdge.Common.Order,System.String)">
            <summary>
            Called when an order is cancelled.
            </summary>
            <param name="position">The position for which the order was cancelled.</param>
            <param name="order">The order that was cancelled.</param>
            <param name="information">Broker-supplied string which may include information about why the order was cancelled.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OpenPosition(RightEdge.Common.PositionType,RightEdge.Common.OrderType)">
            <summary>
            Submits an order to open a position.
            </summary>
            <param name="positionType">The PositionType (long or short).</param>
            <param name="orderType">The type of order (market, limit, etc.)</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="P:RightEdge.Common.Position.State" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OpenPosition(RightEdge.Common.PositionType,RightEdge.Common.OrderType,System.Double)">
            <summary>
            Submits an order to open a position.
            </summary>
            <param name="positionType">The PositionType (long or short).</param>
            <param name="orderType">The type of order (market, limit, etc.)</param>
            <param name="price">Limit or Stop price (if applicable).</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="P:RightEdge.Common.Position.State" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OpenPosition(RightEdge.Common.PositionType,RightEdge.Common.OrderType,System.Double,System.Int64)">
            <summary>
            Submits an order to open a position.
            </summary>
            <param name="positionType">The PositionType (long or short).</param>
            <param name="orderType">The type of order (market, limit, etc.)</param>
            <param name="price">Limit or Stop price (if applicable).</param>
            <param name="size">The number of shares or contracts to establish this position with.  If this is
            zero, the position will be sized based on the settings in <see cref="P:RightEdge.Common.PositionManager.AllocationType" />
            and <see cref="P:RightEdge.Common.PositionManager.Allocation" />.</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="P:RightEdge.Common.Position.State" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OpenPosition(RightEdge.Common.PositionSettings)">
            <summary>
            Submits an order to open a position.
            </summary>
            <param name="options">Position options specifying the parameters of the position to open</param>
            <returns>A newly created <see cref="T:RightEdge.Common.Position" /> object.</returns>
            <remarks>
            <para>If the OpenPosition call succeeded, the <see cref="P:RightEdge.Common.Position.Error" /> property of the
            returned position will be null.  If the call failed, then this property will contain a description
            of the error.</para>
            <para>Note that success does not mean that the order was filled by the broker, just that an order
            was successfully sent to the broker.  When this method returns successfully, the <see cref="T:RightEdge.Common.PositionState" />
            of the returned position will be <see cref="F:RightEdge.Common.PositionState.Pending" />.  If and when the order is
            filled, the state will change to <see cref="F:RightEdge.Common.PositionState.Open" />.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.GetFrequency(RightEdge.Common.BarFrequency)">
            <summary>
            Gets the <see cref="T:RightEdge.Common.Frequency" /> object for this symbol and a given bar length.
            </summary>
            <param name="barFrequency"><see cref="T:RightEdge.Common.BarFrequency" /> representing the bar length desired.</param>
            <returns><see cref="T:RightEdge.Common.Frequency" /> object.</returns>
            <remarks>This overload takes a <see cref="T:RightEdge.Common.BarFrequency" /> parameter.  The time-based frequency plugin (<see cref="T:RightEdge.Common.TimeFrequency" /> will be used.</remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.GetFrequency(System.TimeSpan)">
            <summary>
            Gets the <see cref="T:RightEdge.Common.Frequency" /> object for this symbol and a given bar length.
            </summary>
            <param name="barLength">TimeSpan representing the desired bar length.</param>
            <returns><see cref="T:RightEdge.Common.Frequency" /> object.</returns>
            <remarks>This overload takes a BarLength parameter.  The time-based frequency plugin (<see cref="T:RightEdge.Common.TimeFrequency" /> will be used.</remarks>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.GetFrequency(RightEdge.Common.FrequencyPlugin)">
            <summary>
            Gets the <see cref="T:RightEdge.Common.Frequency" /> object for this symbol and a given frequency.
            </summary>
            <param name="plugin"><see cref="T:RightEdge.Common.FrequencyPlugin" /> object which specifies the frequency to be returned.</param>
            <returns><see cref="T:RightEdge.Common.Frequency" /> object.</returns>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OutputError(System.String,System.Boolean)">
            <summary>
            Adds an error message to the system output window.
            </summary>
            <param name="error">The error message.</param>
            <param name="statusBar">Flag to also send this output message to the status bar.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OutputError(System.String)">
            <summary>
            Adds an error message to the system output window.
            </summary>
            <param name="error">The error message.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OutputWarning(System.String,System.Boolean)">
            <summary>
            Adds a warning message to the system output window.
            </summary>
            <param name="warning">The warning message.</param>
            <param name="statusBar">Flag to also send this output message to the status bar.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OutputWarning(System.String)">
            <summary>
            Adds a warning message to the system output window.
            </summary>
            <param name="warning">The warning message.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OutputMessage(System.String,System.Boolean)">
            <summary>
            Adds an informational message to the system output window.
            </summary>
            <param name="message">The message to add.</param>
            <param name="statusBar">Flag to also send this output message to the status bar.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.OutputMessage(System.String)">
            <summary>
            Adds an informational message to the system output window.
            </summary>
            <param name="message">The message to add.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.FillIndicatorRegion(RightEdge.Common.ISeries,RightEdge.Common.ISeries)">
            <summary>
            Shades the area between the two series on a chart.
            </summary>
            <param name="series1">The first series.</param>
            <param name="series2">The second series.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptBase.FillIndicatorRegion(RightEdge.Common.ISeries,RightEdge.Common.ISeries,System.Drawing.Color)">
            <summary>
            Shades the area between the two series on a chart.
            </summary>
            <param name="series1">The first series.</param>
            <param name="series2">The second series.</param>
            <param name="fillColor">The color of the shaded region.</param>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Symbol">
            <summary>
            The symbol associated with this <see cref="T:RightEdge.Common.SymbolScriptBase" /> instance.
            </summary>
            <remarks>A copy of your symbol script class is created for each symbol.</remarks>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Indicators">
            <summary>
            A collection of the indicators for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Bars">
            <summary>
            The list of bars for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.SystemData">
            <summary>
            Gets the <see cref="T:RightEdge.Common.SystemData">SystemData</see> instance.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.SystemParameters">
            <summary>
            Gets the optimization parameters collection for this system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.PositionManager">
            <summary>
            The PositionManager object for the system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Open">
            <summary>
            The series of bar open values for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.High">
            <summary>
            The series of bar high values for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Low">
            <summary>
            The series of bar low values for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Close">
            <summary>
            The series of bar close values for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Volume">
            <summary>
            The series of bar volume values for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Ask">
            <summary>
            The series of bar ask values for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.Bid">
            <summary>
            The series of bar bid values for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.PendingPositions">
            <summary>
            The list of pending positions for the current symbol.
            </summary>
            <remarks>A pending position is a position that has had an order submitted to open the position, but the order has not been filled yet.</remarks>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.OpenPositions">
            <summary>
            The list of open positions for the current symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptBase.ClosedPositions">
            <summary>
            The list of closed positions for the current symbol.
            </summary>
        </member>
        <member name="T:RightEdge.Common.IndicatorCollection">
            <summary>
            Provides access to the indicators for a specific symbol.
            </summary>
        </member>
        <member name="M:RightEdge.Common.IndicatorCollection.#ctor(RightEdge.Common.IndicatorCollections,RightEdge.Common.Symbol)">
            <summary>
            Constructs a new IndicatorCollection instance.
            </summary>
            <param name="manager">A reference to the indicator manager.</param>
            <param name="symbol">The IndicatorCollection will provide access to the indicators for this symbol.</param>
        </member>
        <member name="P:RightEdge.Common.IndicatorCollection.Item(System.String)">
            <summary>
            Returns the indicator with the specified ID.
            </summary>
            <param name="id">The indicator ID.</param>
            <returns>The indicator with the specified ID for the symbol that was passed to the class constructor.</returns>
        </member>
        <member name="T:RightEdge.Common.SymbolScriptCollection`1">
            <summary>
            Manages a collection of <see cref="T:RightEdge.Common.SymbolScriptBase" /> class objects.  One symbol script object is created for each symbol.
            </summary>
            <typeparam name="TSymbolScript">The symbol script class</typeparam>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptCollection`1.Initialize(RightEdge.Common.SystemBase)">
            <summary>
            Creates and initializes a symbol script object for each symbol in the trading portfolio.
            </summary>
            <param name="system">A reference to the system object.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptCollection`1.NewBar">
            <summary>
            Calls the NewBar method for the symbol script objects in the collection.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptCollection`1.NewTick(RightEdge.Common.Symbol,RightEdge.Common.BarData,RightEdge.Common.TickData)">
            <summary>
            Calls the NewTick method for the symbol script object corresponding to the symbol of a tick.
            </summary>
            <param name="symbol">A symbol for which a tick was recieved.</param>
            <param name="partialBar">The current partial bar for the symbol.</param>
            <param name="tick">A <see cref="T:RightEdge.Common.TickData">TickData</see> structure instance containing the latest tick information.</param>
        </member>
        <member name="M:RightEdge.Common.SymbolScriptCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the symbol script objects in the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the symbol script objects in the collection.</returns>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptCollection`1.Item(RightEdge.Common.Symbol)">
            <summary>
            Returns the symbol script object for a specified symbol.
            </summary>
            <param name="symbol">A symbol in the system's trading portfolio.</param>
            <returns>The symbol script object for the specified symbol.</returns>
        </member>
        <member name="P:RightEdge.Common.SymbolScriptCollection`1.Item(System.String)">
            <summary>
            Returns the symbol script object for the symbol with the specified name.
            </summary>
            <param name="symbolName">The name of a symbol in the system's trading portfolio.</param>
            <returns>The symbol script object for the specified symbol.</returns>
        </member>
        <member name="T:RightEdge.Common.SystemParameterInfo">
            <summary>
            Class containing the variables used for optimization.
            </summary>
            <remarks>
            An optimization run can consist of one or more values that can change
            for each system run. This class holds those values. The user will specify
            information about the optimization parameter such as the high and low thresholds
            and the "step" or increment value for each parameter.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.SystemParameterInfo.#ctor">
            <summary>
            Parameterless constructor
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemParameterInfo.#ctor(System.String,System.Double)">
            <summary>
            Constructor that takes a name and default value.
            </summary>
            <param name="name">Friendly name assigned to this parameter.</param>
            <param name="value">Default value of this parameter.</param>
        </member>
        <member name="M:RightEdge.Common.SystemParameterInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemParameterInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemParameterInfo.SerializeOwnedData(RightEdge.Common.SerializationWriter,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemParameterInfo.DeserializeOwnedData(RightEdge.Common.SerializationReader,System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.SystemParameterInfo.Clone">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.SystemParameterInfo.Name">
            <summary>
            Gets or sets the friendly name of this parameter.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemParameterInfo.Value">
            <summary>
            Gets or sets the default or current value of this parameter.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemParameterInfo.Low">
            <summary>
            Gets or sets the low value threshold of this parameter.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemParameterInfo.High">
            <summary>
            Gets or sets the high value threshold of this parameter.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemParameterInfo.NumSteps">
            <summary>
            Gets or sets the number of steps or increments for this parameter.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemParameterInfo.Description">
            <summary>
            Gets or sets the description of this parameter.
            </summary>
        </member>
        <member name="T:RightEdge.Common.SystemResultsAttribute">
            <summary>
            Derived RightEdgeObjectAttribute for use with System Results plugins.
            </summary>
        </member>
        <member name="T:RightEdge.Common.YYESystemResultsAttribute">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.YYESystemResultsAttribute.#ctor">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.YYESystemResultsAttribute.SetDefaults">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.Internal.SystemRunner">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.SystemRunner.#ctor(RightEdge.Common.ISystem,RightEdge.Common.SystemData,System.Windows.Forms.MethodInvoker,RightEdge.Common.SystemRunSettings)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.SystemRunner.SetLiveMode">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.SystemRunner.SetBroker">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.SystemRunner.Startup(RightEdge.Common.SystemRunSettings)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.SystemRunner.SetOpenPositions(RightEdge.Common.Internal.PortfolioXml)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.SystemRunner.ProcessTick(RightEdge.Common.Symbol,RightEdge.Common.TickData)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.SystemRunner.AttemptBrokerReconnect">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.Internal.SystemRunner.GetPortfolioXml">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.SystemRunSettings">
            <summary>
            Settings which control a system simulation.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemRunSettings.#ctor">
            <summary>
            Creates a new <see cref="T:RightEdge.Common.SystemRunSettings" /> object.
            </summary>
        </member>
        <member name="M:RightEdge.Common.SystemRunSettings.Clone">
            <summary>
            Creates a deep copy of the <see cref="T:RightEdge.Common.SystemRunSettings" /> object.
            </summary>
            <returns>A deep copy of the system run settings.</returns>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.Symbols">
            <summary>
            The list of symbols to use for the system
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.UseTicksForSimulation">
            <summary>
            Specifies that for symbols that have tick data in the data store, the tick data should be used for the simulation.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.HighBeforeLowDuringSimulation">
            <summary>
            Specifies that the bar high price should be processed before the low price.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.SaveOptimizationResults">
            <summary>
            Specifies whether optimization results should be saved.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.StartingCapital">
            <summary>
            The amount of capital to begin the simulation with.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.MaxOpenPositions">
            <summary>
            The maximum number of positions allowed to be open at any given time.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.MaxOpenPositionsPerSymbol">
            <summary>
            The maximum number of positions allowed to be open at any given time for one symbol.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.DataStartDate">
            <summary>
            The date to start the simulation.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.TradeStartDate">
            <summary>
            The date to begin trading.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.EndDate">
            <summary>
            The date to end simulation.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.SynchronizeBars">
            <summary>
            If set to true, empty bars will be created when a symbol does not have any data during a time
            period that another symbol did have data.  This ensures that a given index (look back value)
            corresponds to the same date/time for all symbols.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.AllocationType">
            <summary>
            The allocation method to use when position size is not specified.  Use the Allocation property to set a value for this method.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.AllocationPerPosition">
            <summary>
            The amount to allocate for each position when position size is not specified.  How this value is interpreted depends on the AllocationType property.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.LeadBars">
            <summary>
            Number of bars to skip before beginning trades in the simulation.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.BarFrequency">
            <summary>
            The main bar frequency to use for the system.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.ForceRoundLots">
            <summary>
            Specifies if submitted orders will be forced to use round lots.  If true, the number of shares
            will be rounded to the nearest 100 share increment.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.CreateTicksFromBars">
            <summary>
            Controls whether bars are broken into separate ticks for the Open, Low, High, and Close prices in a simulation.
            </summary><remarks><para>If set to true (which is default), then each bar from the data store will be split up into 4 ticks
            for the Open, Low, High, and Close prices. These ticks will be processed separately, which means that if a position
            is filled on the open, the profit target or stop could be hit on the high or low (or close).</para>
            <para>If set to false, then the bar is not converted to ticks. It is processed all at once in the paper trader,
            and there is no opportunity to submit orders between the different bar prices.</para>
            </remarks>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.IgnoreSystemWarnings">
            <summary>
            Gets or sets the system warnings flag.
            </summary><remarks>
            System warnings are messages that RightEdge sends to the output pane when a non-critical error is encountered.
            Set this flag to true to turn off the notification or false to receive the warning notifications.  User generated
            messages to the output window will always be enabled and are not affected.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.ProfitTarget">
            <summary>
            The default profit target value for new positions.  How this is interpreted is controlled by the <see cref="P:RightEdge.Common.PositionManager.ProfitTargetType" /> property.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.ProfitTargetType">
            <summary>
            The default type of profit target to use for new positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.StopLoss">
            <summary>
            The default stop loss value for new positions.  How this is interpreted is controlled by the <see cref="P:RightEdge.Common.PositionManager.StopLossType" /> property.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.StopLossType">
            <summary>
            The default type of stop loss to use for new positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.BarCountExit">
            <summary>
            The default bar count exit value for positions, or zero for none.
            </summary><remarks>
            This property specifies the number of bars after which a position should be automatically closed.
            This value can be set on a per-position basis with the <see cref="P:RightEdge.Common.PositionSettings.BarCountExit" />
            and <see cref="P:RightEdge.Common.Position.BarCountExit" /> properties.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.RestrictOpenOrders">
            <summary>
            Specifies whether the Max Open Positions settings should limit the number of position open orders submitted.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.SystemParameters">
            <summary>
            Specifies the values for system-specific parameters, which may be used for optimization.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.AccountCurrency">
            <summary>
            Gets the currency type for the account.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.ApplyForexInterest">
            <summary>
            Indicates whether the account charges and pays interest on open forex positions.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.ForexRolloverTime">
            <summary>
            The time of day at which forex positions are rolled over and interest is charged.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.RunNumber">
            <summary>
            When running an optimization, the number of the current run within the optimization.  Otherwise, zero.
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.TradingSystemProjectPath">
            <summary>
            The path for the RightEdge project file (.rep) for the currently running system
            </summary>
        </member>
        <member name="P:RightEdge.Common.SystemRunSettings.CustomString">
            <summary>
            A user-definable string.  Can be used to pass data to the system from the command line or an optimization plugin, or from the trading system to a custom system results plugin.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TickFrequency">
            <summary>
            Tick Frequency frequency plugin.
            </summary>
            <remarks>
            The tick frequency is used to generate bars from ticks based on tick count.  
            The only parameter for this plugin is the number of ticks that must come in
            to form a complete bar.  This plugin allows RightEdge to create what is
            commonly referred to as "tick bars".
            </remarks>
        </member>
        <member name="M:RightEdge.Common.TickFrequency.#ctor">
            <summary>
            Constructs a TickFrequency instance.
            </summary>
            <remarks>
            This constructs a TickFrequency instance with a default BarLength of 100 ticks.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.TickFrequency.CreateFrequencyGenerator">
            <summary>
            Creates an IFrequencyGenerator instance
            </summary>
            <returns>an IFrequencyGenerator instance</returns>
        </member>
        <member name="M:RightEdge.Common.TickFrequency.Clone">
            <summary>
            Clones or creates a copy of this TimeFrequency instance.
            </summary>
            <returns>TimeFrequency plugin instance.</returns>
        </member>
        <member name="M:RightEdge.Common.TickFrequency.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TickFrequency.GetHashCode">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.TickFrequency.BarLength">
            <summary>
            Gets or sets the ticks per bar.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TickGenerator">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.TimeFrequency">
            <summary>
            Time Frequency frequency plugin.
            </summary>
            <remarks>
            The time frequency is used to generate bars from ticks based on time.  This is the most common
            form of representing bar data.  The only parameter for this plugin is the length of time that
            must elapse to form a complete bar.  With this plugin, RightEdge can support bars of virtually
            any time frequency.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.#ctor">
            <summary>
            Constructs a TimeFrequency instance.
            </summary>
            <remarks>
            This constructs a TimeFrequency instance with a default BarLength of 1 minute.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.#ctor(System.TimeSpan)">
            <summary>
            Constructs a TimeFreqency instance.
            </summary>
            <param name="barLength">TimeSpan representing the length of time for a complete bar.</param>
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.#ctor(RightEdge.Common.BarFrequency)">
            <summary>
            Constructs a TimeFreqency instance.
            </summary>
            <param name="barLength">BarFrequency enumeration representing the length of time for a complete bar.</param>
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.CreateFrequencyGenerator">
            <summary>
            Creates an IFrequencyGenerator instance
            </summary>
            <returns>an IFrequencyGenerator instance</returns>
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.Clone">
            <summary>
            Clones or creates a copy of this TimeFrequency instance.
            </summary>
            <returns>TimeFrequency plugin instance.</returns>
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.GetHashCode">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.RoundTime(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds the specified date to the nearest period.
            </summary>
            <param name="date">Input date.</param>
            <param name="period">Rounding period.</param>
            <returns>Rounded DateTime instance.</returns>
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.NextRoundedTime(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds the date up to the specified period.
            </summary>
            <param name="date">input date.</param>
            <param name="period">Desired period.</param>
            <returns>Rounded DateTime instance.</returns>
        </member>
        <member name="M:RightEdge.Common.TimeFrequency.ToString">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.TimeFrequency.BarLength">
            <summary>
            Gets or sets the timespan or period for each bar.
            </summary>
        </member>
        <member name="T:RightEdge.Common.TimeFrequencyEditor">
            <exclude />
            <exclude />
        </member>
        <member name="F:RightEdge.Common.TimeFrequencyEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RightEdge.Common.TimeFrequencyEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RightEdge.Common.TimeFrequencyEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RightEdge.Common.Trade">
            <summary>
            Represents a trade or other transaction that has taken place for a position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.TradeIndex">
            <summary>
            The index of this trade in the list of trades for the position.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.PositionStats">
            <summary>
            The position statistics (size, entry price, etc.) as of the time this trade was completed.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.FilledTime">
            <summary>
            The time at which the trade was executed
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.TransactionType">
            <summary>
            The transaction type (Buy, Sell, Short, or Cover)
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.Price">
            <summary>
            The price at which the trade was executed
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.Size">
            <summary>
            The number of shares or contracts in the trade
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.OrderType">
            <summary>
            The order type that caused the trade to be executed (market, limit, etc.)
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.TradeType">
            <summary>
            The type of trade.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.Commission">
            <summary>
            The commission that was paid on the trade
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.Order">
            <summary>
            The order (if any) associated with the trade.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.Description">
            <summary>
            A user-definable description for the trade.
            </summary>
        </member>
        <member name="P:RightEdge.Common.Trade.BuyingPowerChange">
            <summary>
            The change in the account's buying power resulting from this trade
            </summary>
        </member>
        <member name="T:RightEdge.Common.TriggerInfo">
            <exclude />
        </member>
        <member name="T:RightEdge.Common.UserSeries">
            <summary>
            Stores series values calculated by your system, and can be used to display them on a chart.
            </summary>
            <remarks>
            <para>The series will be kept in sync with the bars for the corresponding symbol.  When a new bar comes in,
            a value of NaN will be added to the series.  You can set the value of the series for the current bar
            with the <see cref="P:RightEdge.Common.UserSeries.Current" /> property, or use the <see cref="M:RightEdge.Common.UserSeries.SetValue(System.Int32,System.Double)" /> method to set other
            values.</para>
            <para>A UserSeries needs to be registered with the indicator manager to work properly.  UserSeries that are declared as
            fields of your symbol script class will automatically be registered.  You can also register a series manually
            with the <see cref="M:RightEdge.Common.IndicatorManager.Register(RightEdge.Common.ISeries,RightEdge.Common.Symbol,System.String)" /> method.</para>
            </remarks>
        </member>
        <member name="M:RightEdge.Common.UserSeries.#ctor">
            <summary>
            Creates a new UserSeries.
            </summary>
        </member>
        <member name="M:RightEdge.Common.UserSeries.LookBack(System.Int32)">
            <summary>
            Looks back within the series for the specified value.  A value of 0 represents the most recent value.
            </summary><param name="nBars">Number of bars to lookback in the series.</param><returns>The value contained at the specified index.</returns><remarks>
            A series is a collection of values.  The values within series can be referenced using the Lookback method.
            Use 0 to get the most recent value in the series.  To reference values further back in time, pass a value
            greater than 0.  For example, if the series is created against daily bars, to reference yesterday's value
            use Lookback(1).  To reference the day before yesterday, use Lookback(2) and so on.  Use the
            <see cref="P:RightEdge.Common.ISeries.Count">Count</see> method to determine how many values are contained
            within the series.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.UserSeries.SetValue(System.Int32,System.Double)">
            <summary>
            Sets the value of the series at a specified location.
            </summary>
            <param name="lookBack">The number of bars ago to set the value for.</param>
            <param name="value">The new value for the series at the specified position.</param>
        </member>
        <member name="M:RightEdge.Common.UserSeries.SetCurrentValue(System.Double)">
            <summary>
            Sets the most recent value in the series.
            </summary>
            <param name="value">value to set.</param>
        </member>
        <member name="P:RightEdge.Common.UserSeries.ChartSettings">
            <summary>
            Determines how the series will be drawn on the chart.
            </summary>
        </member>
        <member name="P:RightEdge.Common.UserSeries.Count">
            <summary>
            The number of values in the series.
            </summary>
        </member>
        <member name="P:RightEdge.Common.UserSeries.Current">
            <summary>
            The current value of the series.  This property should return the same value as calling LookBack(0).
            </summary>
        </member>
        <member name="P:RightEdge.Common.UserSeries.OldValuesChange">
            <summary>
            Indicates whether previous values in the series change when a new value is added.
            </summary><value>
            Indicates whether previous values in the series change when a new value is added.
            </value><remarks>
            Usually, in a series that is related to bar data, a new value will be calculated
            and added to the end of the series when a new bar comes in.  The previous values
            of the series will not change.  Return true for this property to indicate that
            this is not the case.  If this returns true, then the <see cref="P:RightEdge.Common.ISeries.OldestValueChanged" />
            property should reflect what values changed.
            </remarks>
        </member>
        <member name="P:RightEdge.Common.UserSeries.OldestValueChanged">
            <summary>
            The lookback index of the oldest value that changed.  Should be zero unless <see cref="P:RightEdge.Common.ISeries.OldValuesChange" /> is true.
            </summary><value>
            The lookback index of the oldest value that changed.  Should be zero unless <see cref="P:RightEdge.Common.ISeries.OldValuesChange" /> is true.
            </value>
        </member>
        <member name="T:RightEdge.Common.VolumeFrequency">
            <summary>
            Constant Volume Bar frequency plugin.
            </summary>
            <remarks>
            The volume bar frequency is used to generate bars from volume.  
            The only parameter for this plugin is the volume value that must come in
            to form a complete bar.  This plugin allows RightEdge to create what is
            commonly referred to as "volume bars".
            </remarks>
        </member>
        <member name="M:RightEdge.Common.VolumeFrequency.#ctor">
            <summary>
            Constructs a VolumeFrequency instance.
            </summary>
            <remarks>
            This constructs a VolumeFrequency instance with a default BarLength of 1000.
            </remarks>
        </member>
        <member name="M:RightEdge.Common.VolumeFrequency.CreateFrequencyGenerator">
            <summary>
            Creates an IFrequencyGenerator instance
            </summary>
            <returns>an IFrequencyGenerator instance</returns>
        </member>
        <member name="M:RightEdge.Common.VolumeFrequency.Clone">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.VolumeFrequency.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.VolumeFrequency.GetHashCode">
            <exclude />
        </member>
        <member name="M:RightEdge.Common.VolumeFrequency.ToString">
            <exclude />
        </member>
        <member name="P:RightEdge.Common.VolumeFrequency.BarVolume">
            <summary>
            Gets or sets the volume amount for each bar.
            </summary>
        </member>
    </members>
</doc>
